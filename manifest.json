{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v4.json", "dbt_version": "1.0.3", "generated_at": "2022-04-12T09:23:44.333006Z", "invocation_id": "5d6cb61e-f3eb-449b-978e-809d5f32d49c", "env": {}, "project_id": "33b2042a5120c531aab0d921c3d3686c", "user_id": "1d920562-f8f6-4188-b28d-ba6a6af86222", "send_anonymous_usage_stats": true, "adapter_type": "redshift"}, "nodes": {"model.redshift.stg_status": {"raw_sql": "with final_table as (\n\n    select id                   as \"Status Id\",\n            label               as \"Status\"\n            from {{ source('freshdesk','status') }}\n)\n\nselect * from final_table", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.redshift.freshdesk.status"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_freshdesk_staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "dev", "schema": "dbt_freshdesk_staging", "fqn": ["redshift", "freshdesk", "staging", "stg_status"], "unique_id": "model.redshift.stg_status", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "freshdesk/staging/stg_status.sql", "original_file_path": "models/freshdesk/staging/stg_status.sql", "name": "stg_status", "alias": "stg_status", "checksum": {"name": "sha256", "checksum": "a1ea34588733e0e08d4dc3562b8370b4551ca4678887ca8ac512a3531e500e45"}, "tags": [], "refs": [], "sources": [["freshdesk", "status"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/redshift/models/freshdesk/staging/stg_status.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_freshdesk_staging", "materialized": "view"}, "created_at": 1649755424.853129, "compiled_sql": "with final_table as (\n\n    select id                   as \"Status Id\",\n            label               as \"Status\"\n            from \"dev\".\"freshdeskstaging\".\"ticketsfields_status\"\n)\n\nselect * from final_table", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_freshdesk_staging\".\"stg_status\""}, "model.redshift.stg_tickets": {"raw_sql": "with tickets as (\n    \n    SELECT distinct\n            \"id\"                                    as \"Ticket Number\",\n            nvl(\"type\",'Not Assigned')              as \"Ticket Type\",\n            \"source\"                                as \"Source Id\",\n            dateadd(hour,2,\"created_at\")            as \"Ticket Created DT\",\n            \"status\"                                as \"Status Id\",    \n            'Online Shopping'                       as \"Service\",\n            \"group_id\"                              as \"Owner Team Id\",\n            \"responder_id\"                          as \"Owner Id\",   \n            priority                                as \"Priority Id\",\n            dateadd(hour,2,\"updated_at\")            as \"Ticket Modified DT\",\n\t        case when \"status\" NOT in (4,5) then 1\n\t\t        else 0 end \t\t\t\t\t\t\tas \"Flag Open\",\n            cast(datediff(hour,\"created_at\", getdate())as float)/24             as \"Open Days\",\n            cast('Freshdesk' as varchar(11)) \t    as \"Contact Type\",\n            json_extract_path_text(custom_fields, 'cf_order_number_'||{{ var(\"cf_suffix\") }})    as \"Order Number\",\n            json_extract_path_text(custom_fields, 'cf_brand_'||{{ var(\"cf_suffix\") }})           as \"Brand\",\n            json_extract_path_text(custom_fields, 'cf_query_type_'||{{ var(\"cf_suffix\") }})      as \"Category\",\n            json_extract_path_text(custom_fields, 'cf_category_'||{{ var(\"cf_suffix\") }})        as \"SubCategory\",\n            cast(deleted as integer)                as \"Flag Ticket Deleted\"   ,\n            cast(spam as integer)                   as \"Flag Spam\"                      \n    FROM {{ source('freshdesk','tickets') }}\n    where \"created_at\" >= '2022-03-22 19:31:00' and \"id\"> 1037\n),\n\nfinal_table as (\n    select *,\n            ROW_NUMBER() OVER (PARTITION BY \"Ticket Number\" ORDER BY \"Ticket Modified DT\" desc, \"Status Id\" desc)    AS \"RowNum\"\n        from tickets\n)\n\nselect * from final_table\n\n-- \"Response Days\"", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.redshift.freshdesk.tickets"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_freshdesk_staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "dev", "schema": "dbt_freshdesk_staging", "fqn": ["redshift", "freshdesk", "staging", "stg_tickets"], "unique_id": "model.redshift.stg_tickets", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "freshdesk/staging/stg_tickets.sql", "original_file_path": "models/freshdesk/staging/stg_tickets.sql", "name": "stg_tickets", "alias": "stg_tickets", "checksum": {"name": "sha256", "checksum": "030b98b04d3e51dfd16993d2b66d51f6f84b6ae2dd314b0b5f6268061d5d838e"}, "tags": [], "refs": [], "sources": [["freshdesk", "tickets"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/redshift/models/freshdesk/staging/stg_tickets.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_freshdesk_staging", "materialized": "view"}, "created_at": 1649755424.859644, "compiled_sql": "with tickets as (\n    \n    SELECT distinct\n            \"id\"                                    as \"Ticket Number\",\n            nvl(\"type\",'Not Assigned')              as \"Ticket Type\",\n            \"source\"                                as \"Source Id\",\n            dateadd(hour,2,\"created_at\")            as \"Ticket Created DT\",\n            \"status\"                                as \"Status Id\",    \n            'Online Shopping'                       as \"Service\",\n            \"group_id\"                              as \"Owner Team Id\",\n            \"responder_id\"                          as \"Owner Id\",   \n            priority                                as \"Priority Id\",\n            dateadd(hour,2,\"updated_at\")            as \"Ticket Modified DT\",\n\t        case when \"status\" NOT in (4,5) then 1\n\t\t        else 0 end \t\t\t\t\t\t\tas \"Flag Open\",\n            cast(datediff(hour,\"created_at\", getdate())as float)/24             as \"Open Days\",\n            cast('Freshdesk' as varchar(11)) \t    as \"Contact Type\",\n            json_extract_path_text(custom_fields, 'cf_order_number_'||2157727)    as \"Order Number\",\n            json_extract_path_text(custom_fields, 'cf_brand_'||2157727)           as \"Brand\",\n            json_extract_path_text(custom_fields, 'cf_query_type_'||2157727)      as \"Category\",\n            json_extract_path_text(custom_fields, 'cf_category_'||2157727)        as \"SubCategory\",\n            cast(deleted as integer)                as \"Flag Ticket Deleted\"   ,\n            cast(spam as integer)                   as \"Flag Spam\"                      \n    FROM \"dev\".\"freshdeskstaging\".\"tickets\"\n    where \"created_at\" >= '2022-03-22 19:31:00' and \"id\"> 1037\n),\n\nfinal_table as (\n    select *,\n            ROW_NUMBER() OVER (PARTITION BY \"Ticket Number\" ORDER BY \"Ticket Modified DT\" desc, \"Status Id\" desc)    AS \"RowNum\"\n        from tickets\n)\n\nselect * from final_table\n\n-- \"Response Days\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_freshdesk_staging\".\"stg_tickets\""}, "model.redshift.stg_conversations": {"raw_sql": "with conversations as (\n\n    select distinct \"body_text\"           as \"Conversation Text\",\n            \"id\"                          as \"Conversation Id\",\n            \"from_email\"\t\t\t      as \"Conversation From Email\", \n            \"ticket_id\"                   as \"Ticket Number\",\n            dateadd(hour,2,\"created_at\")  as \"Conversation DT\"\n        from {{ source('freshdesk', 'conversations') }}\n)\n\nselect * from conversations", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.redshift.freshdesk.conversations"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_freshdesk_staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "dev", "schema": "dbt_freshdesk_staging", "fqn": ["redshift", "freshdesk", "staging", "stg_conversations"], "unique_id": "model.redshift.stg_conversations", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "freshdesk/staging/stg_conversations.sql", "original_file_path": "models/freshdesk/staging/stg_conversations.sql", "name": "stg_conversations", "alias": "stg_conversations", "checksum": {"name": "sha256", "checksum": "810af7a00d4bdc4781c99c1b83b00ccf3fae61f3e412cc04cc7e0aed1a914563"}, "tags": [], "refs": [], "sources": [["freshdesk", "conversations"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/redshift/models/freshdesk/staging/stg_conversations.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_freshdesk_staging", "materialized": "view"}, "created_at": 1649755424.8624651, "compiled_sql": "with conversations as (\n\n    select distinct \"body_text\"           as \"Conversation Text\",\n            \"id\"                          as \"Conversation Id\",\n            \"from_email\"\t\t\t      as \"Conversation From Email\", \n            \"ticket_id\"                   as \"Ticket Number\",\n            dateadd(hour,2,\"created_at\")  as \"Conversation DT\"\n        from \"dev\".\"freshdeskstaging\".\"conversations\"\n)\n\nselect * from conversations", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_freshdesk_staging\".\"stg_conversations\""}, "model.redshift.stg_groups": {"raw_sql": "with groups as (\n\n    select description          as \"Owner Team Description\",\n            name                as \"Owner Team\",\n            group_type\t\t\tas \"Owner Team Type\", \n            id                  as \"Owner Team Id\"\n        from {{ source('freshdesk', 'groups') }}\n)\n\nselect * from groups", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.redshift.freshdesk.groups"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_freshdesk_staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "dev", "schema": "dbt_freshdesk_staging", "fqn": ["redshift", "freshdesk", "staging", "stg_groups"], "unique_id": "model.redshift.stg_groups", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "freshdesk/staging/stg_groups.sql", "original_file_path": "models/freshdesk/staging/stg_groups.sql", "name": "stg_groups", "alias": "stg_groups", "checksum": {"name": "sha256", "checksum": "3d074017be584bad2572de80da74a22739f842c228e7de26c3e62ec94be2043f"}, "tags": [], "refs": [], "sources": [["freshdesk", "groups"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/redshift/models/freshdesk/staging/stg_groups.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_freshdesk_staging", "materialized": "view"}, "created_at": 1649755424.863467, "compiled_sql": "with groups as (\n\n    select description          as \"Owner Team Description\",\n            name                as \"Owner Team\",\n            group_type\t\t\tas \"Owner Team Type\", \n            id                  as \"Owner Team Id\"\n        from \"dev\".\"freshdeskstaging\".\"groups\"\n)\n\nselect * from groups", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_freshdesk_staging\".\"stg_groups\""}, "model.redshift.stg_source": {"raw_sql": "with final_table as (\n\n    select id                           as \"Source Id\",\n            case when label = 'Phone' then 'Telephone'\n                else label  end         as \"Source\"\n            from{{ source('freshdesk', 'source') }}\n)\n\nselect * from final_table", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.redshift.freshdesk.source"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_freshdesk_staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "dev", "schema": "dbt_freshdesk_staging", "fqn": ["redshift", "freshdesk", "staging", "stg_source"], "unique_id": "model.redshift.stg_source", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "freshdesk/staging/stg_source.sql", "original_file_path": "models/freshdesk/staging/stg_source.sql", "name": "stg_source", "alias": "stg_source", "checksum": {"name": "sha256", "checksum": "5b203cd61fa4a16bf8bce8692c77de923f5291452b5e9231e57c714122d5ecf0"}, "tags": [], "refs": [], "sources": [["freshdesk", "source"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/redshift/models/freshdesk/staging/stg_source.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_freshdesk_staging", "materialized": "view"}, "created_at": 1649755424.864507, "compiled_sql": "with final_table as (\n\n    select id                           as \"Source Id\",\n            case when label = 'Phone' then 'Telephone'\n                else label  end         as \"Source\"\n            from\"dev\".\"freshdeskstaging\".\"ticketsfields_source\"\n)\n\nselect * from final_table", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_freshdesk_staging\".\"stg_source\""}, "model.redshift.stg_satisfaction_ratings": {"raw_sql": "with satisfactionratings as (\n    \n    SELECT agent_id                         as \"Agent Id\",\n            dateadd(hour,2,created_at)      as \"Survey DT\",\n            feedback                        as \"Survey Feedback\",\n            id                              as \"Survey Id\",\n            ratings_default_question        as \"Satisfied with Resolution\",\n            ratings_question_101000037586   as \"First Contact Resolution\",\n            ticket_id                       as \"Ticket Number\",\n            dateadd(hour,2,updated_at)      as \"Survey Modified DT\",\n            cast(ticket_id as varchar(50)) || '|FreshDesk'  as \"EventLink\"\n\n\n    FROM {{ source('freshdesk','satisfactionratings') }}\n),\n\nfinal_table as (\n    select *,\n            ROW_NUMBER() OVER (PARTITION BY \"Ticket Number\" ORDER BY \"Survey Modified DT\" desc)    AS \"RowNum\"\n        from satisfactionratings\n)\n\nselect * from final_table", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.redshift.freshdesk.satisfactionratings"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_freshdesk_staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "dev", "schema": "dbt_freshdesk_staging", "fqn": ["redshift", "freshdesk", "staging", "stg_satisfaction_ratings"], "unique_id": "model.redshift.stg_satisfaction_ratings", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "freshdesk/staging/stg_satisfaction_ratings.sql", "original_file_path": "models/freshdesk/staging/stg_satisfaction_ratings.sql", "name": "stg_satisfaction_ratings", "alias": "stg_satisfaction_ratings", "checksum": {"name": "sha256", "checksum": "483d40cd5e20f2451c37648a01b18b2ba81bc1fc7bc9b2526458a1c0918cc4d4"}, "tags": [], "refs": [], "sources": [["freshdesk", "satisfactionratings"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/redshift/models/freshdesk/staging/stg_satisfaction_ratings.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_freshdesk_staging", "materialized": "view"}, "created_at": 1649755424.8654678, "compiled_sql": "with satisfactionratings as (\n    \n    SELECT agent_id                         as \"Agent Id\",\n            dateadd(hour,2,created_at)      as \"Survey DT\",\n            feedback                        as \"Survey Feedback\",\n            id                              as \"Survey Id\",\n            ratings_default_question        as \"Satisfied with Resolution\",\n            ratings_question_101000037586   as \"First Contact Resolution\",\n            ticket_id                       as \"Ticket Number\",\n            dateadd(hour,2,updated_at)      as \"Survey Modified DT\",\n            cast(ticket_id as varchar(50)) || '|FreshDesk'  as \"EventLink\"\n\n\n    FROM \"dev\".\"freshdeskstaging\".\"satisfactionratings\"\n),\n\nfinal_table as (\n    select *,\n            ROW_NUMBER() OVER (PARTITION BY \"Ticket Number\" ORDER BY \"Survey Modified DT\" desc)    AS \"RowNum\"\n        from satisfactionratings\n)\n\nselect * from final_table", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_freshdesk_staging\".\"stg_satisfaction_ratings\""}, "model.redshift.stg_priority": {"raw_sql": "with \nfinal_table as (\n\n    select value                as \"Priority Id\",\n            label               as \"Priority\"\n            from {{ source('freshdesk','priority') }}\n)\n\nselect * from final_table", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.redshift.freshdesk.priority"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_freshdesk_staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "dev", "schema": "dbt_freshdesk_staging", "fqn": ["redshift", "freshdesk", "staging", "stg_priority"], "unique_id": "model.redshift.stg_priority", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "freshdesk/staging/stg_priority.sql", "original_file_path": "models/freshdesk/staging/stg_priority.sql", "name": "stg_priority", "alias": "stg_priority", "checksum": {"name": "sha256", "checksum": "4099f5ad7506ae55c6b133b9d0b619fd54e6bcd0cc3a06d2d854c509986cacc1"}, "tags": [], "refs": [], "sources": [["freshdesk", "priority"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/redshift/models/freshdesk/staging/stg_priority.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_freshdesk_staging", "materialized": "view"}, "created_at": 1649755424.866417, "compiled_sql": "with \nfinal_table as (\n\n    select value                as \"Priority Id\",\n            label               as \"Priority\"\n            from \"dev\".\"freshdeskstaging\".\"ticketsfields_priority\"\n)\n\nselect * from final_table", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_freshdesk_staging\".\"stg_priority\""}, "model.redshift.stg_agents": {"raw_sql": "with agent as (\n\n    select available        as \"Flag Agent Available\",\n            contact_name    as \"Owner\",\n            id              as \"Owner Id\"\n        from {{ source('freshdesk', 'agents') }}\n)\n\nselect * from agent", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.redshift.freshdesk.agents"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_freshdesk_staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "dev", "schema": "dbt_freshdesk_staging", "fqn": ["redshift", "freshdesk", "staging", "stg_agents"], "unique_id": "model.redshift.stg_agents", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "freshdesk/staging/stg_agents.sql", "original_file_path": "models/freshdesk/staging/stg_agents.sql", "name": "stg_agents", "alias": "stg_agents", "checksum": {"name": "sha256", "checksum": "87d8d96d22b74f17495538455d53cae908cfb59408bfcbb6851a863166aad91a"}, "tags": [], "refs": [], "sources": [["freshdesk", "agents"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/redshift/models/freshdesk/staging/stg_agents.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_freshdesk_staging", "materialized": "view"}, "created_at": 1649755424.8674712, "compiled_sql": "with agent as (\n\n    select available        as \"Flag Agent Available\",\n            contact_name    as \"Owner\",\n            id              as \"Owner Id\"\n        from \"dev\".\"freshdeskstaging\".\"agents\"\n)\n\nselect * from agent", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_freshdesk_staging\".\"stg_agents\""}, "model.redshift.stg_ratings_definition": {"raw_sql": "with final_table as (\n\n    select -103 as \"Score\", 'Very dissatisfied' as \"Value\", 'Negative' as \"Sentiment\"\n    union all\n    select -102 as \"Score\", 'Dissatisfied' as \"Value\", 'Negative' as \"Sentiment\"\n    union all\n    select 100 as \"Score\", 'Neutral' as \"Value\", 'Neutral' as \"Sentiment\"\n    union all\n    select 102 as \"Score\", 'Satisfied' as \"Value\", 'Positive' as \"Sentiment\"\n    union all\n    select 103 as \"Score\", 'Very satisfied' as \"Value\", 'Positive' as \"Sentiment\"\n\n)\n\nselect * from final_table", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "dbt_freshdesk_staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "dev", "schema": "dbt_freshdesk_staging", "fqn": ["redshift", "freshdesk", "staging", "stg_ratings_definition"], "unique_id": "model.redshift.stg_ratings_definition", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "freshdesk/staging/stg_ratings_definition.sql", "original_file_path": "models/freshdesk/staging/stg_ratings_definition.sql", "name": "stg_ratings_definition", "alias": "stg_ratings_definition", "checksum": {"name": "sha256", "checksum": "eacd4a203647de971d7ad2b944658ec4598f4f464f5793759e4a080dc8f4b04e"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/redshift/models/freshdesk/staging/stg_ratings_definition.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_freshdesk_staging", "materialized": "view"}, "created_at": 1649755424.868416, "compiled_sql": "with final_table as (\n\n    select -103 as \"Score\", 'Very dissatisfied' as \"Value\", 'Negative' as \"Sentiment\"\n    union all\n    select -102 as \"Score\", 'Dissatisfied' as \"Value\", 'Negative' as \"Sentiment\"\n    union all\n    select 100 as \"Score\", 'Neutral' as \"Value\", 'Neutral' as \"Sentiment\"\n    union all\n    select 102 as \"Score\", 'Satisfied' as \"Value\", 'Positive' as \"Sentiment\"\n    union all\n    select 103 as \"Score\", 'Very satisfied' as \"Value\", 'Positive' as \"Sentiment\"\n\n)\n\nselect * from final_table", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_freshdesk_staging\".\"stg_ratings_definition\""}, "model.redshift.fct_freshdesk_tickets": {"raw_sql": "with \n\n--if ticket is reopened after being resolved we get the last instance of it being open so we can find the soonest resolved date after this\nlast_open_instance as (\n\n    select \"Ticket Number\",\n            min(\"RowNum\")   as \"Min RowNum\"\n        FROM {{ ref('stg_tickets') }}\n        where \"Status Id\" not in (4,5)\n        group by \"Ticket Number\"\n),\n\nfirst_response as (\n\n    select \"Ticket Number\",\n            min(\"Conversation DT\")   as \"Response DT\"\n        FROM {{ ref('stg_conversations') }}\n        group by \"Ticket Number\"\n),\n\nresolved_date as (\n\n    select t.\"Ticket Number\",\n            min(t.\"Ticket Modified DT\")   as \"Resolved By DT\"\n        FROM {{ ref('stg_tickets') }} t\n        left join last_open_instance loi on t.\"Ticket Number\" = loi.\"Ticket Number\"\n        where t.\"Status Id\" in (4,5) and (t.\"RowNum\" < loi.\"Min RowNum\" or loi.\"Min RowNum\" is null)\n        group by t.\"Ticket Number\"\n),\n\nreopened_flag_temp as (\n        select t.\"Ticket Number\",\n                max(t.\"RowNum\" )        as \"RowNum\" \n        FROM {{ ref('stg_tickets') }} t\n        where t.\"Status Id\" in (4,5) \n        group by t.\"Ticket Number\"\n),\n\nreopened_flag as (\n        select t.\"Ticket Number\",\n                1 as \"Flag Reopened\"\n        FROM reopened_flag_temp t\n        left join last_open_instance loi on t.\"Ticket Number\" = loi.\"Ticket Number\"\n        where t.\"RowNum\" > loi.\"Min RowNum\"\n),\n\ntickets as (\n    \n    SELECT \n            t.\"Ticket Number\",\n            t.\"Ticket Type\",\n            t.\"Contact Type\",\n            nvl(so.\"Source\",cast(t.\"Source Id\" as varchar))                     as \"Source\",\n            t.\"Ticket Created DT\",\n            nvl(st.\"Status\",cast(t.\"Status Id\" as varchar))                     as \"Ticket Status\",\n            case when t.\"Category\" = '' then 'Not Assigned'\n                else t.\"Category\" end                                           as \"Category\",   \n            t.\"Service\", \n            nvl(g.\"Owner Team\",'Not Assigned')                                  as \"Owner Team\",\n            nvl(a.\"Owner\", 'Not Assigned')                                      as \"Owner\",\n            case when t.\"Brand\" = '' then 'Not Assigned'\n                else  t.\"Brand\" end                                             as \"Brand\",  \n            t.\"Order Number\",\n            case when t.\"SubCategory\" = '' then 'Not Assigned'\n                else  t.\"SubCategory\"   end                                     as \"SubCategory\",\n            t.\"Priority Id\",\n            nvl(p.\"Priority\",cast(t.\"Priority Id\" as varchar))                  as \"Priority\",\n            t.\"Ticket Modified DT\",\n            case when t.\"Flag Open\" = 0 then rd.\"Resolved By DT\"   end          as \"Resolved By DT\",\n            case when t.\"Flag Open\" = 0 then cast(datediff(hour,t.\"Ticket Created DT\",rd.\"Resolved By DT\") as float)/24 end        as \"Resolved Days\",\n            case when \"Flag Open\" = 0 then\n                case when datediff(hour,t.\"Ticket Created DT\",rd.\"Resolved By DT\")<24 then 1 \n                        else 0 end end                                          as \"Flag <24 Hours Resolved\",\n            cast(datediff(hour,t.\"Ticket Created DT\",fr.\"Response DT\") as float)/24        as \"Response Days\",\n            case when cast(datediff(hour,t.\"Ticket Created DT\",fr.\"Response DT\") as float)<2 then 1\n                        else 0 end                                              as \"Flag <2 Hours Responded\",\n            fr.\"Response DT\",\n            t.\"Open Days\"                                                       as \"Open Days\",\n\t    {{ generate_open_days_bins('\"Open Days\"') }}                        as \"Open Days Age\",\t\n\t    {{ generate_open_days_sort('\"Open Days\"') }}                        as \"Open Days Age Sort\",\n            t.\"Flag Open\",\n            cast(t.\"Ticket Number\" as varchar(50)) || '|FreshDesk'              as \"EventLink\",\n            case when \"Flag Reopened\" is null then 0 \n                else \"Flag Reopened\"    end                                     as \"Flag Reopened\",\n            case when \"Flag Reopened\" = 1 then 'Reopened' \n                else 'Not Reopened'    end                                      as \"Is Reopened\",\n            \"Flag Ticket Deleted\",            \n            case when \"Flag Ticket Deleted\" =1 then 'Deleted'\n                else 'Not Deleted'     end                                      as \"Is Ticket Deleted\"   ,\n            \"Flag Spam\"\n        FROM {{ ref('stg_tickets') }} t\n        left join {{ ref('stg_agents') }} a on t.\"Owner Id\" = a.\"Owner Id\"\n        left join {{ ref('stg_groups') }} g on t.\"Owner Team Id\" = g.\"Owner Team Id\"\n        left join {{ ref('stg_priority') }} p on t.\"Priority Id\" = p.\"Priority Id\"\n        left join {{ ref('stg_source') }} so on t.\"Source Id\" = so.\"Source Id\"\n        left join {{ ref('stg_status') }} st on t.\"Status Id\" = st.\"Status Id\"\n        left join resolved_date rd on t.\"Ticket Number\" = rd.\"Ticket Number\"\n        left join reopened_flag rof on t.\"Ticket Number\" = rof.\"Ticket Number\"\n        left join first_response fr on t.\"Ticket Number\" = fr.\"Ticket Number\"\n        where t.\"RowNum\"=1\n)\n\nselect * from tickets", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.redshift.generate_open_days_bins", "macro.redshift.generate_open_days_sort"], "nodes": ["model.redshift.stg_tickets", "model.redshift.stg_conversations", "model.redshift.stg_tickets", "model.redshift.stg_tickets", "model.redshift.stg_tickets", "model.redshift.stg_agents", "model.redshift.stg_groups", "model.redshift.stg_priority", "model.redshift.stg_source", "model.redshift.stg_status"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_freshdesk", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "dev", "schema": "dbt_freshdesk", "fqn": ["redshift", "freshdesk", "transformed", "fct_freshdesk_tickets"], "unique_id": "model.redshift.fct_freshdesk_tickets", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "freshdesk/transformed/fct_freshdesk_tickets.sql", "original_file_path": "models/freshdesk/transformed/fct_freshdesk_tickets.sql", "name": "fct_freshdesk_tickets", "alias": "fct_freshdesk_tickets", "checksum": {"name": "sha256", "checksum": "70a8bb8eb9546ec177d2a23735235a0bad504d74267cd7bd054024a07f8e3a0f"}, "tags": [], "refs": [["stg_tickets"], ["stg_conversations"], ["stg_tickets"], ["stg_tickets"], ["stg_tickets"], ["stg_agents"], ["stg_groups"], ["stg_priority"], ["stg_source"], ["stg_status"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/redshift/models/freshdesk/transformed/fct_freshdesk_tickets.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_freshdesk", "materialized": "table"}, "created_at": 1649755424.8693419, "compiled_sql": "with \n\n--if ticket is reopened after being resolved we get the last instance of it being open so we can find the soonest resolved date after this\nlast_open_instance as (\n\n    select \"Ticket Number\",\n            min(\"RowNum\")   as \"Min RowNum\"\n        FROM \"dev\".\"dbt_freshdesk_staging\".\"stg_tickets\"\n        where \"Status Id\" not in (4,5)\n        group by \"Ticket Number\"\n),\n\nfirst_response as (\n\n    select \"Ticket Number\",\n            min(\"Conversation DT\")   as \"Response DT\"\n        FROM \"dev\".\"dbt_freshdesk_staging\".\"stg_conversations\"\n        group by \"Ticket Number\"\n),\n\nresolved_date as (\n\n    select t.\"Ticket Number\",\n            min(t.\"Ticket Modified DT\")   as \"Resolved By DT\"\n        FROM \"dev\".\"dbt_freshdesk_staging\".\"stg_tickets\" t\n        left join last_open_instance loi on t.\"Ticket Number\" = loi.\"Ticket Number\"\n        where t.\"Status Id\" in (4,5) and (t.\"RowNum\" < loi.\"Min RowNum\" or loi.\"Min RowNum\" is null)\n        group by t.\"Ticket Number\"\n),\n\nreopened_flag_temp as (\n        select t.\"Ticket Number\",\n                max(t.\"RowNum\" )        as \"RowNum\" \n        FROM \"dev\".\"dbt_freshdesk_staging\".\"stg_tickets\" t\n        where t.\"Status Id\" in (4,5) \n        group by t.\"Ticket Number\"\n),\n\nreopened_flag as (\n        select t.\"Ticket Number\",\n                1 as \"Flag Reopened\"\n        FROM reopened_flag_temp t\n        left join last_open_instance loi on t.\"Ticket Number\" = loi.\"Ticket Number\"\n        where t.\"RowNum\" > loi.\"Min RowNum\"\n),\n\ntickets as (\n    \n    SELECT \n            t.\"Ticket Number\",\n            t.\"Ticket Type\",\n            t.\"Contact Type\",\n            nvl(so.\"Source\",cast(t.\"Source Id\" as varchar))                     as \"Source\",\n            t.\"Ticket Created DT\",\n            nvl(st.\"Status\",cast(t.\"Status Id\" as varchar))                     as \"Ticket Status\",\n            case when t.\"Category\" = '' then 'Not Assigned'\n                else t.\"Category\" end                                           as \"Category\",   \n            t.\"Service\", \n            nvl(g.\"Owner Team\",'Not Assigned')                                  as \"Owner Team\",\n            nvl(a.\"Owner\", 'Not Assigned')                                      as \"Owner\",\n            case when t.\"Brand\" = '' then 'Not Assigned'\n                else  t.\"Brand\" end                                             as \"Brand\",  \n            t.\"Order Number\",\n            case when t.\"SubCategory\" = '' then 'Not Assigned'\n                else  t.\"SubCategory\"   end                                     as \"SubCategory\",\n            t.\"Priority Id\",\n            nvl(p.\"Priority\",cast(t.\"Priority Id\" as varchar))                  as \"Priority\",\n            t.\"Ticket Modified DT\",\n            case when t.\"Flag Open\" = 0 then rd.\"Resolved By DT\"   end          as \"Resolved By DT\",\n            case when t.\"Flag Open\" = 0 then cast(datediff(hour,t.\"Ticket Created DT\",rd.\"Resolved By DT\") as float)/24 end        as \"Resolved Days\",\n            case when \"Flag Open\" = 0 then\n                case when datediff(hour,t.\"Ticket Created DT\",rd.\"Resolved By DT\")<24 then 1 \n                        else 0 end end                                          as \"Flag <24 Hours Resolved\",\n            cast(datediff(hour,t.\"Ticket Created DT\",fr.\"Response DT\") as float)/24        as \"Response Days\",\n            case when cast(datediff(hour,t.\"Ticket Created DT\",fr.\"Response DT\") as float)<2 then 1\n                        else 0 end                                              as \"Flag <2 Hours Responded\",\n            fr.\"Response DT\",\n            t.\"Open Days\"                                                       as \"Open Days\",\n\t    \n    case when floor(\"Open Days\") = 0 then '< 24 Hours'\n\t\t when floor(\"Open Days\") = 1 then '1 Day'\n\t\t when floor(\"Open Days\") = 2 then '2 Days'\n\t\t when floor(\"Open Days\") = 3 then '3 Days'\n\t\t when floor(\"Open Days\") >3 and floor(\"Open Days\") <10 then '4 - 10 Days'\n\t\t when floor(\"Open Days\") >=10 and floor(\"Open Days\") <21 then '10 - 20 Days'\n\t\t when floor(\"Open Days\") >=21 and floor(\"Open Days\") <42 then '21 - 42 Days'\n\t\t else '> 42 Days' end\n                        as \"Open Days Age\",\t\n\t    \n    case when floor(\"Open Days\") = 0 then 1\n\t\t when floor(\"Open Days\") = 1 then 2\n\t\t when floor(\"Open Days\") = 2 then 3\n\t\t when floor(\"Open Days\") = 3 then 4\n\t\t when floor(\"Open Days\") >3 and floor(\"Open Days\") <10 then 5\n\t\t when floor(\"Open Days\") >=10 and floor(\"Open Days\") <21 then 6\n\t\t when floor(\"Open Days\") >=21 and floor(\"Open Days\") <42 then 7\n\t\t else 8 end\n                        as \"Open Days Age Sort\",\n            t.\"Flag Open\",\n            cast(t.\"Ticket Number\" as varchar(50)) || '|FreshDesk'              as \"EventLink\",\n            case when \"Flag Reopened\" is null then 0 \n                else \"Flag Reopened\"    end                                     as \"Flag Reopened\",\n            case when \"Flag Reopened\" = 1 then 'Reopened' \n                else 'Not Reopened'    end                                      as \"Is Reopened\",\n            \"Flag Ticket Deleted\",            \n            case when \"Flag Ticket Deleted\" =1 then 'Deleted'\n                else 'Not Deleted'     end                                      as \"Is Ticket Deleted\"   ,\n            \"Flag Spam\"\n        FROM \"dev\".\"dbt_freshdesk_staging\".\"stg_tickets\" t\n        left join \"dev\".\"dbt_freshdesk_staging\".\"stg_agents\" a on t.\"Owner Id\" = a.\"Owner Id\"\n        left join \"dev\".\"dbt_freshdesk_staging\".\"stg_groups\" g on t.\"Owner Team Id\" = g.\"Owner Team Id\"\n        left join \"dev\".\"dbt_freshdesk_staging\".\"stg_priority\" p on t.\"Priority Id\" = p.\"Priority Id\"\n        left join \"dev\".\"dbt_freshdesk_staging\".\"stg_source\" so on t.\"Source Id\" = so.\"Source Id\"\n        left join \"dev\".\"dbt_freshdesk_staging\".\"stg_status\" st on t.\"Status Id\" = st.\"Status Id\"\n        left join resolved_date rd on t.\"Ticket Number\" = rd.\"Ticket Number\"\n        left join reopened_flag rof on t.\"Ticket Number\" = rof.\"Ticket Number\"\n        left join first_response fr on t.\"Ticket Number\" = fr.\"Ticket Number\"\n        where t.\"RowNum\"=1\n)\n\nselect * from tickets", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_freshdesk\".\"fct_freshdesk_tickets\""}, "model.redshift.fct_freshdesk_ticket_events": {"raw_sql": "with\n\n prev_status as (\n\n    select \"Ticket Number\",\n            \"Status Id\",\n            LAG(\"Status Id\", 1)\n                OVER (PARTITION BY \"Ticket Number\" ORDER BY rownum desc ) as PrevStatus,\n            \"Ticket Modified DT\"\n        FROM {{ ref('stg_tickets') }}\n        order by rownum\n\n),\n\nreopened_dates as (\n    select \"Ticket Number\",\n            \"Ticket Modified DT\"\n        from prev_status\n        where \"Status Id\" not in (4,5) and PrevStatus in (4,5)\n),\n\n\nCreated as (\n\n    SELECT\n            'Created' AS \"Event Type\",\n            \"EventLink\",\n\t        \"Contact Type\", \n            \"Category\",\n            \"SubCategory\",\n            \"Service\",\n            \"Source\",\n            \"Brand\",\n            trunc(\"Ticket Created DT\") as \"DateKey\",\n            \"Ticket Created DT\"                                 as \"Event DT\",\n            \"EventLink\" || '|'  || 'Created'                    as \"Primary Key\",\n            \"Flag Spam\"\n    FROM {{ref('fct_freshdesk_tickets')}}\n    where \"Ticket Created DT\" is not null\n    ),\n\nResolved as (\n\n    SELECT\n            'Resolved' AS \"Event Type\",\n            \"EventLink\",\n\t        \"Contact Type\",  \n            \"Category\",\n            \"SubCategory\",\n            \"Service\",\n            \"Source\",\n            \"Brand\",\n            trunc(\"Resolved By DT\")    as \"DateKey\",\n            \"Resolved By DT\"                                    as \"Event DT\",\n            \"EventLink\" || '|'  || 'Resolved'                   as \"Primary Key\",\n            \"Flag Spam\"\n    FROM {{ref('fct_freshdesk_tickets')}}\n    where \"Resolved By DT\" is not null\n    and \"Ticket Status\" IN ('Resolved', 'Cancelled', 'Closed')\n    ),\n\n Reopened as (\n\n    SELECT\n            'Reopened'                                          AS \"Event Type\",\n            fct.\"EventLink\",\n\t        fct.\"Contact Type\",  \n            fct.\"Category\",\n            fct.\"SubCategory\",\n            fct.\"Service\",\n            fct.\"Source\",\n            fct.\"Brand\",\n            trunc(rd.\"Ticket Modified DT\")                      as \"DateKey\",\n            rd.\"Ticket Modified DT\"                             as \"Event DT\",\n            fct.\"EventLink\" || '|'  || 'Reopened'               as \"Primary Key\",\n            fct.\"Flag Spam\"\n    FROM {{ref('fct_freshdesk_tickets')}} fct\n    inner join reopened_dates rd on fct.\"Ticket Number\" = rd.\"Ticket Number\"\n    where fct.\"Flag Reopened\"=1\n    ),\n\n\n\n  Survey as (\n\n    SELECT\n            'Survey'                                         AS \"Event Type\",\n            fct.\"EventLink\",\n\t        fct.\"Contact Type\",  \n            fct.\"Category\",\n            fct.\"SubCategory\",\n            fct.\"Service\",\n            fct.\"Source\",\n            fct.\"Brand\",\n            trunc(rd.\"Survey DT\")                           as \"DateKey\",\n            rd.\"Survey DT\"                                  as \"Event DT\",\n            fct.\"EventLink\" || '|'  || 'Survey'             as \"Primary Key\",\n            fct.\"Flag Spam\"\n    FROM {{ref('fct_freshdesk_tickets')}} fct\n    inner join {{ref('fct_satisfaction_ratings')}} rd on fct.\"Ticket Number\" = rd.\"Ticket Number\"\n    ),\n\n\n\n{% set datasets = \"Created\",\"Resolved\",\"Reopened\",\"Survey\" %}\n\n    final_table as (\n\n        {{ union_tables_in_list(datasets) }}\n    )\n\n    select * from final_table", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.redshift.union_tables_in_list"], "nodes": ["model.redshift.stg_tickets", "model.redshift.fct_freshdesk_tickets", "model.redshift.fct_freshdesk_tickets", "model.redshift.fct_freshdesk_tickets", "model.redshift.fct_freshdesk_tickets", "model.redshift.fct_satisfaction_ratings"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_freshdesk", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "dev", "schema": "dbt_freshdesk", "fqn": ["redshift", "freshdesk", "transformed", "fct_freshdesk_ticket_events"], "unique_id": "model.redshift.fct_freshdesk_ticket_events", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "freshdesk/transformed/fct_freshdesk_ticket_events.sql", "original_file_path": "models/freshdesk/transformed/fct_freshdesk_ticket_events.sql", "name": "fct_freshdesk_ticket_events", "alias": "fct_freshdesk_ticket_events", "checksum": {"name": "sha256", "checksum": "9473f1c0808a70eba0368546e69babb82f977a5675811ce2db5685b9a49bf502"}, "tags": [], "refs": [["stg_tickets"], ["fct_freshdesk_tickets"], ["fct_freshdesk_tickets"], ["fct_freshdesk_tickets"], ["fct_freshdesk_tickets"], ["fct_satisfaction_ratings"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/redshift/models/freshdesk/transformed/fct_freshdesk_ticket_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_freshdesk", "materialized": "table"}, "created_at": 1649755424.8748958, "compiled_sql": "with\n\n prev_status as (\n\n    select \"Ticket Number\",\n            \"Status Id\",\n            LAG(\"Status Id\", 1)\n                OVER (PARTITION BY \"Ticket Number\" ORDER BY rownum desc ) as PrevStatus,\n            \"Ticket Modified DT\"\n        FROM \"dev\".\"dbt_freshdesk_staging\".\"stg_tickets\"\n        order by rownum\n\n),\n\nreopened_dates as (\n    select \"Ticket Number\",\n            \"Ticket Modified DT\"\n        from prev_status\n        where \"Status Id\" not in (4,5) and PrevStatus in (4,5)\n),\n\n\nCreated as (\n\n    SELECT\n            'Created' AS \"Event Type\",\n            \"EventLink\",\n\t        \"Contact Type\", \n            \"Category\",\n            \"SubCategory\",\n            \"Service\",\n            \"Source\",\n            \"Brand\",\n            trunc(\"Ticket Created DT\") as \"DateKey\",\n            \"Ticket Created DT\"                                 as \"Event DT\",\n            \"EventLink\" || '|'  || 'Created'                    as \"Primary Key\",\n            \"Flag Spam\"\n    FROM \"dev\".\"dbt_freshdesk\".\"fct_freshdesk_tickets\"\n    where \"Ticket Created DT\" is not null\n    ),\n\nResolved as (\n\n    SELECT\n            'Resolved' AS \"Event Type\",\n            \"EventLink\",\n\t        \"Contact Type\",  \n            \"Category\",\n            \"SubCategory\",\n            \"Service\",\n            \"Source\",\n            \"Brand\",\n            trunc(\"Resolved By DT\")    as \"DateKey\",\n            \"Resolved By DT\"                                    as \"Event DT\",\n            \"EventLink\" || '|'  || 'Resolved'                   as \"Primary Key\",\n            \"Flag Spam\"\n    FROM \"dev\".\"dbt_freshdesk\".\"fct_freshdesk_tickets\"\n    where \"Resolved By DT\" is not null\n    and \"Ticket Status\" IN ('Resolved', 'Cancelled', 'Closed')\n    ),\n\n Reopened as (\n\n    SELECT\n            'Reopened'                                          AS \"Event Type\",\n            fct.\"EventLink\",\n\t        fct.\"Contact Type\",  \n            fct.\"Category\",\n            fct.\"SubCategory\",\n            fct.\"Service\",\n            fct.\"Source\",\n            fct.\"Brand\",\n            trunc(rd.\"Ticket Modified DT\")                      as \"DateKey\",\n            rd.\"Ticket Modified DT\"                             as \"Event DT\",\n            fct.\"EventLink\" || '|'  || 'Reopened'               as \"Primary Key\",\n            fct.\"Flag Spam\"\n    FROM \"dev\".\"dbt_freshdesk\".\"fct_freshdesk_tickets\" fct\n    inner join reopened_dates rd on fct.\"Ticket Number\" = rd.\"Ticket Number\"\n    where fct.\"Flag Reopened\"=1\n    ),\n\n\n\n  Survey as (\n\n    SELECT\n            'Survey'                                         AS \"Event Type\",\n            fct.\"EventLink\",\n\t        fct.\"Contact Type\",  \n            fct.\"Category\",\n            fct.\"SubCategory\",\n            fct.\"Service\",\n            fct.\"Source\",\n            fct.\"Brand\",\n            trunc(rd.\"Survey DT\")                           as \"DateKey\",\n            rd.\"Survey DT\"                                  as \"Event DT\",\n            fct.\"EventLink\" || '|'  || 'Survey'             as \"Primary Key\",\n            fct.\"Flag Spam\"\n    FROM \"dev\".\"dbt_freshdesk\".\"fct_freshdesk_tickets\" fct\n    inner join \"dev\".\"dbt_freshdesk\".\"fct_satisfaction_ratings\" rd on fct.\"Ticket Number\" = rd.\"Ticket Number\"\n    ),\n\n\n\n\n\n    final_table as (\n\n        \n       \n\t   \n\n        select * from Created\n\n        union all\n\n    \n\n        select * from Resolved\n\n        union all\n\n    \n\n        select * from Reopened\n\n        union all\n\n    \n\n        select * from Survey\n\n        \n\n    \n\n    )\n\n    select * from final_table", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_freshdesk\".\"fct_freshdesk_ticket_events\""}, "model.redshift.fct_satisfaction_ratings": {"raw_sql": "with \n\n\nsatisfaction_ratings as (\n    \n    SELECT \n            t.\"Survey DT\",\n            t.\"Survey Feedback\",\n            \"Satisfied with Resolution\"                 as \"Satisfied with Resolution Score\",\n            ard.Value                                   as \"Satisfied with Resolution\",\n            ard.Sentiment                               as \"Satisfied with Resolution Sentiment\",\n            \"First Contact Resolution\"                  as \"First Contact Resolution Score\",\n            case when \"First Contact Resolution\"=-103 then 'No'  \n               else case when \"First Contact Resolution\"=103   then 'Yes' end end as \"First Contact Resolution\",\n            t.\"Survey Id\",\n            t.\"Ticket Number\",\n            nvl(a.\"Owner\", 'Not Assigned')              as \"Owner\",\n            \"EventLink\"\n\n        FROM {{ ref('stg_satisfaction_ratings') }} t\n        left join {{ ref('stg_agents') }} a on t.\"Agent Id\" = a.\"Owner Id\"\n        left join {{ ref('stg_ratings_definition') }} ard on t.\"Satisfied with Resolution\" = ard.Score\n        left join {{ ref('stg_ratings_definition') }} ard2 on t.\"First Contact Resolution\" = ard2.Score\n        where t.\"RowNum\"=1\n)\n\nselect * from satisfaction_ratings", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.redshift.stg_satisfaction_ratings", "model.redshift.stg_agents", "model.redshift.stg_ratings_definition", "model.redshift.stg_ratings_definition"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_freshdesk", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "dev", "schema": "dbt_freshdesk", "fqn": ["redshift", "freshdesk", "transformed", "fct_satisfaction_ratings"], "unique_id": "model.redshift.fct_satisfaction_ratings", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "freshdesk/transformed/fct_satisfaction_ratings.sql", "original_file_path": "models/freshdesk/transformed/fct_satisfaction_ratings.sql", "name": "fct_satisfaction_ratings", "alias": "fct_satisfaction_ratings", "checksum": {"name": "sha256", "checksum": "cd615298ff1cde649bc7e13098488f9021b0b242dbe46658fce7cc48081490b0"}, "tags": [], "refs": [["stg_satisfaction_ratings"], ["stg_agents"], ["stg_ratings_definition"], ["stg_ratings_definition"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/redshift/models/freshdesk/transformed/fct_satisfaction_ratings.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_freshdesk", "materialized": "table"}, "created_at": 1649755424.878827, "compiled_sql": "with \n\n\nsatisfaction_ratings as (\n    \n    SELECT \n            t.\"Survey DT\",\n            t.\"Survey Feedback\",\n            \"Satisfied with Resolution\"                 as \"Satisfied with Resolution Score\",\n            ard.Value                                   as \"Satisfied with Resolution\",\n            ard.Sentiment                               as \"Satisfied with Resolution Sentiment\",\n            \"First Contact Resolution\"                  as \"First Contact Resolution Score\",\n            case when \"First Contact Resolution\"=-103 then 'No'  \n               else case when \"First Contact Resolution\"=103   then 'Yes' end end as \"First Contact Resolution\",\n            t.\"Survey Id\",\n            t.\"Ticket Number\",\n            nvl(a.\"Owner\", 'Not Assigned')              as \"Owner\",\n            \"EventLink\"\n\n        FROM \"dev\".\"dbt_freshdesk_staging\".\"stg_satisfaction_ratings\" t\n        left join \"dev\".\"dbt_freshdesk_staging\".\"stg_agents\" a on t.\"Agent Id\" = a.\"Owner Id\"\n        left join \"dev\".\"dbt_freshdesk_staging\".\"stg_ratings_definition\" ard on t.\"Satisfied with Resolution\" = ard.Score\n        left join \"dev\".\"dbt_freshdesk_staging\".\"stg_ratings_definition\" ard2 on t.\"First Contact Resolution\" = ard2.Score\n        where t.\"RowNum\"=1\n)\n\nselect * from satisfaction_ratings", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_freshdesk\".\"fct_satisfaction_ratings\""}, "model.redshift.stg_rtt_costs": {"raw_sql": "WITH \nstaging_rtt_costs as \n(\n    SELECT \n        client,\n        \"date_dt\",\n        EXTRACT(MONTH FROM \"date_dt\")                               as \"month_dt\",\n        EXTRACT(DAY FROM \"date_dt\")                                 as \"day_of_month_dt\",\n        EXTRACT(DAYOFWEEK from \"date_dt\")                           as \"day_of_week_dt\",\n        parcel_number,\n        sender_suburb,\n        sender_hub,\n        sender_area,\n        consignee_suburb,\n        consignee_hub,\n        consignee_area,\n        area,\n        \"route\",\n        svl,\n        nr_parcels, \n        actual_weight,\n        volume_weight,\n        weight_billed,\n        \"min_change\",\n        add_on_kg,\n        {{varchar_to_numeric('rate_per_kg')}}                       as rate_per_kg,\n        {{varchar_to_numeric('rate_charge')}}                       as rate_charge,\n        {{varchar_to_numeric('total_exclusive')}}                   as total_exclusive,\n        {{varchar_to_numeric('outlying_rate_charge')}}              as outlying_rate_charge,\n        {{varchar_to_numeric('subtotal')}}                          as subtotal,\n        {{varchar_to_numeric('fuel_surcharge')}}                    as fuel_surcharge,\n        {{varchar_to_numeric('vat')}}                               as vat,\n        {{varchar_to_numeric('total_inclusive')}}                   as total_inclusive\n    FROM \n        {{ ref('base_rtt_costs') }}\n)\nSELECT * FROM staging_rtt_costs", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.redshift.varchar_to_numeric"], "nodes": ["model.redshift.base_rtt_costs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_parcel_costs_staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "dev", "schema": "dbt_parcel_costs_staging", "fqn": ["redshift", "parcel_costs", "staging", "stg_rtt_costs"], "unique_id": "model.redshift.stg_rtt_costs", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "parcel_costs/staging/stg_rtt_costs.sql", "original_file_path": "models/parcel_costs/staging/stg_rtt_costs.sql", "name": "stg_rtt_costs", "alias": "stg_rtt_costs", "checksum": {"name": "sha256", "checksum": "42f1a09ab09318200d2b742b61b74c6f097dea3878760fe3aa6987d12ad3c00d"}, "tags": [], "refs": [["base_rtt_costs"]], "sources": [], "description": "rtt staging parcel costs", "columns": {}, "meta": {}, "docs": {"show": false}, "patch_path": "redshift://models/parcel_costs/staging/staging.yml", "compiled_path": "target/compiled/redshift/models/parcel_costs/staging/stg_rtt_costs.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_parcel_costs_staging", "materialized": "view"}, "created_at": 1649755424.9472919, "compiled_sql": "WITH \nstaging_rtt_costs as \n(\n    SELECT \n        client,\n        \"date_dt\",\n        EXTRACT(MONTH FROM \"date_dt\")                               as \"month_dt\",\n        EXTRACT(DAY FROM \"date_dt\")                                 as \"day_of_month_dt\",\n        EXTRACT(DAYOFWEEK from \"date_dt\")                           as \"day_of_week_dt\",\n        parcel_number,\n        sender_suburb,\n        sender_hub,\n        sender_area,\n        consignee_suburb,\n        consignee_hub,\n        consignee_area,\n        area,\n        \"route\",\n        svl,\n        nr_parcels, \n        actual_weight,\n        volume_weight,\n        weight_billed,\n        \"min_change\",\n        add_on_kg,\n        \n\n    \n     cast(rate_per_kg as DECIMAL(10,2))\n    \n\n                       as rate_per_kg,\n        \n\n    \n     cast(rate_charge as DECIMAL(10,2))\n    \n\n                       as rate_charge,\n        \n\n    \n     cast(total_exclusive as DECIMAL(10,2))\n    \n\n                   as total_exclusive,\n        \n\n    \n     cast(outlying_rate_charge as DECIMAL(10,2))\n    \n\n              as outlying_rate_charge,\n        \n\n    \n     cast(subtotal as DECIMAL(10,2))\n    \n\n                          as subtotal,\n        \n\n    \n     cast(fuel_surcharge as DECIMAL(10,2))\n    \n\n                    as fuel_surcharge,\n        \n\n    \n     cast(vat as DECIMAL(10,2))\n    \n\n                               as vat,\n        \n\n    \n     cast(total_inclusive as DECIMAL(10,2))\n    \n\n                   as total_inclusive\n    FROM \n        \"dev\".\"dbt_parcel_costs_staging\".\"base_rtt_costs\"\n)\nSELECT * FROM staging_rtt_costs", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_parcel_costs_staging\".\"stg_rtt_costs\""}, "model.redshift.stg_otd_costs": {"raw_sql": "WITH \n    base_otd_costs as( \n    SELECT\n        shipment_id,                      \n        parcel_id,                       \n        poa_date_dt,  \n        poa_date_part_dt,\n        EXTRACT(MONTH FROM \"poa_date_part_dt\")                                                                      as \"poa_month_dt\",\n        EXTRACT(DAY FROM \"poa_date_part_dt\")                                                                        as \"poa_day_of_month_dt\",\n        EXTRACT(DAYOFWEEK from \"poa_date_part_dt\")                                                                  as \"poa_day_of_week_dt\",  \n        poa_date_time_dt * 24                                                                                       as poa_hr,\n        (poa_hr - floor(poa_hr)) * 60                                                                               as poa_min,\n        (poa_min - floor(poa_min)) * 60                                                                             as poa_sec,\n        concat(concat(concat(concat(cast(poa_hr as int),':'),cast(poa_min as int)),':'),cast(poa_sec as int))       as poa_time,\n        poh_date_dt,    \n        poh_date_part_dt,\n        EXTRACT(MONTH FROM \"poh_date_part_dt\")                                                                      as \"poh_month_dt\",\n        EXTRACT(DAY FROM \"poh_date_part_dt\")                                                                        as \"poh_day_of_month_dt\",\n        EXTRACT(DAYOFWEEK from \"poh_date_part_dt\")                                                                  as \"poh_day_of_week_dt\", \n        poh_date_time_dt * 24                                                                                       as poh_hr,\n        (poh_hr - floor(poh_hr)) * 60                                                                               as poh_min,\n        (poh_min - floor(poh_min)) * 60                                                                             as poh_sec,\n        concat(concat(concat(concat(cast(poh_hr as int),':'),cast(poh_min as int)),':'),cast(poh_sec as int))       as poh_time,\n        primary_customer_id,               \n        client,                         \n        sender_name,                     \n        \"length\",                        \n        \"width\",                         \n        \"height\",                        \n        \"weight\",                        \n        chargeable_mass,                 \n        shipper_name,                     \n        shipper,                        \n        \"service\",                       \n        \"zone\",                         \n        {{varchar_to_numeric('chargeout_excl')}}                                                                    as chargeout_excl,             \n        shipment_name,                   \n        shipment_country_id,  \n        trunc(dateadd(d,cast(pod_date_dt as int),'1899-12-30'))                                                     as pod_date_dt,\n        trunc(dateadd(d,cast(costing_date_dt as int),'1899-12-30'))                                                 as costing_date_dt,   \n        client_site,                     \n        order_number2,                   \n        brand,                          \n        total_brands,                 \n        order_cat                      \n    FROM\n        {{ ref('base_otd_costs') }}\n    )\nSELECT * FROM base_otd_costs", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.redshift.varchar_to_numeric"], "nodes": ["model.redshift.base_otd_costs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_parcel_costs_staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "dev", "schema": "dbt_parcel_costs_staging", "fqn": ["redshift", "parcel_costs", "staging", "stg_otd_costs"], "unique_id": "model.redshift.stg_otd_costs", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "parcel_costs/staging/stg_otd_costs.sql", "original_file_path": "models/parcel_costs/staging/stg_otd_costs.sql", "name": "stg_otd_costs", "alias": "stg_otd_costs", "checksum": {"name": "sha256", "checksum": "df78d252371100d9197c495784b5a2dc5f8c18db625be2d1d85618a41350eb26"}, "tags": [], "refs": [["base_otd_costs"]], "sources": [], "description": "otd staging parcel costs", "columns": {}, "meta": {}, "docs": {"show": false}, "patch_path": "redshift://models/parcel_costs/staging/staging.yml", "compiled_path": "target/compiled/redshift/models/parcel_costs/staging/stg_otd_costs.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_parcel_costs_staging", "materialized": "view"}, "created_at": 1649755424.94685, "compiled_sql": "WITH \n    base_otd_costs as( \n    SELECT\n        shipment_id,                      \n        parcel_id,                       \n        poa_date_dt,  \n        poa_date_part_dt,\n        EXTRACT(MONTH FROM \"poa_date_part_dt\")                                                                      as \"poa_month_dt\",\n        EXTRACT(DAY FROM \"poa_date_part_dt\")                                                                        as \"poa_day_of_month_dt\",\n        EXTRACT(DAYOFWEEK from \"poa_date_part_dt\")                                                                  as \"poa_day_of_week_dt\",  \n        poa_date_time_dt * 24                                                                                       as poa_hr,\n        (poa_hr - floor(poa_hr)) * 60                                                                               as poa_min,\n        (poa_min - floor(poa_min)) * 60                                                                             as poa_sec,\n        concat(concat(concat(concat(cast(poa_hr as int),':'),cast(poa_min as int)),':'),cast(poa_sec as int))       as poa_time,\n        poh_date_dt,    \n        poh_date_part_dt,\n        EXTRACT(MONTH FROM \"poh_date_part_dt\")                                                                      as \"poh_month_dt\",\n        EXTRACT(DAY FROM \"poh_date_part_dt\")                                                                        as \"poh_day_of_month_dt\",\n        EXTRACT(DAYOFWEEK from \"poh_date_part_dt\")                                                                  as \"poh_day_of_week_dt\", \n        poh_date_time_dt * 24                                                                                       as poh_hr,\n        (poh_hr - floor(poh_hr)) * 60                                                                               as poh_min,\n        (poh_min - floor(poh_min)) * 60                                                                             as poh_sec,\n        concat(concat(concat(concat(cast(poh_hr as int),':'),cast(poh_min as int)),':'),cast(poh_sec as int))       as poh_time,\n        primary_customer_id,               \n        client,                         \n        sender_name,                     \n        \"length\",                        \n        \"width\",                         \n        \"height\",                        \n        \"weight\",                        \n        chargeable_mass,                 \n        shipper_name,                     \n        shipper,                        \n        \"service\",                       \n        \"zone\",                         \n        \n\n    \n     cast(chargeout_excl as DECIMAL(10,2))\n    \n\n                                                                    as chargeout_excl,             \n        shipment_name,                   \n        shipment_country_id,  \n        trunc(dateadd(d,cast(pod_date_dt as int),'1899-12-30'))                                                     as pod_date_dt,\n        trunc(dateadd(d,cast(costing_date_dt as int),'1899-12-30'))                                                 as costing_date_dt,   \n        client_site,                     \n        order_number2,                   \n        brand,                          \n        total_brands,                 \n        order_cat                      \n    FROM\n        \"dev\".\"dbt_parcel_costs_staging\".\"base_otd_costs\"\n    )\nSELECT * FROM base_otd_costs", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_parcel_costs_staging\".\"stg_otd_costs\""}, "model.redshift.stg_ram_costs": {"raw_sql": "WITH \nstaging_ram_costs as\n(\n    SELECT \n        \"date_dt\",\n        EXTRACT(MONTH FROM \"date_dt\")                                       as \"month_dt\",\n        EXTRACT(DAY FROM \"date_dt\")                                         as \"day_of_month_dt\",\n        EXTRACT(DAYOFWEEK from \"date_dt\")                                   as \"day_of_week_dt\",\n        \"time_dt\",\n        \"consignment\",\n        \"suburb_a\",\n        \"hub_a\",\n        \"suburb_b\",\n        \"hub_b\",\n        area,\n        parcels,\n        weight,\n        \"vol_weight\",\n        \"charge_kg\",\n        service,\n        {{varchar_to_numeric('basic_rate')}}                                as basic_rate,\n        {{varchar_to_numeric('fuel_surcharge')}}                            as fuel_surcharge,\n        {{varchar_to_numeric('waybill_charge')}}                            as waybill_charge,\n        {{varchar_to_numeric('s_surcharge')}}                               as s_surcharge,\n        {{varchar_to_numeric('saturday_charge')}}                           as saturday_charge,\n        {{varchar_to_numeric('after_hours_charge')}}                        as after_hours_charge,\n        {{varchar_to_numeric('armoured_vehicle_charge')}}                   as armoured_vehicle_charge,\n        {{varchar_to_numeric('card_assembly_charge')}}                      as card_assembly_charge,\n        {{varchar_to_numeric('township_charge')}}                           as township_charge,\n        {{varchar_to_numeric('insured_value')}}                             as insured_value,\n        {{varchar_to_numeric('sub_total')}}                                 as sub_total,\n        {{varchar_to_numeric('vat')}}                                       as vat,\n        {{varchar_to_numeric('total')}}                                     as total,\n        delivered_dt,\n        to_date(delivered_dt, 'DD/MM/YYYY')                                 as delivered_date_dt,\n        DATEDIFF(day, \"date_dt\", delivered_date_dt)                         as duration_of_fulfillment\n    FROM \n        {{ ref('base_ram_costs') }}\n)\nSELECT * FROM staging_ram_costs", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.redshift.varchar_to_numeric"], "nodes": ["model.redshift.base_ram_costs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_parcel_costs_staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "dev", "schema": "dbt_parcel_costs_staging", "fqn": ["redshift", "parcel_costs", "staging", "stg_ram_costs"], "unique_id": "model.redshift.stg_ram_costs", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "parcel_costs/staging/stg_ram_costs.sql", "original_file_path": "models/parcel_costs/staging/stg_ram_costs.sql", "name": "stg_ram_costs", "alias": "stg_ram_costs", "checksum": {"name": "sha256", "checksum": "d83bef81a2b9b21b014767d29fcda3fdd3a35bfbac58532a401a682ee7359c39"}, "tags": [], "refs": [["base_ram_costs"]], "sources": [], "description": "ram staging parcel costs", "columns": {}, "meta": {}, "docs": {"show": false}, "patch_path": "redshift://models/parcel_costs/staging/staging.yml", "compiled_path": "target/compiled/redshift/models/parcel_costs/staging/stg_ram_costs.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_parcel_costs_staging", "materialized": "view"}, "created_at": 1649755424.947079, "compiled_sql": "WITH \nstaging_ram_costs as\n(\n    SELECT \n        \"date_dt\",\n        EXTRACT(MONTH FROM \"date_dt\")                                       as \"month_dt\",\n        EXTRACT(DAY FROM \"date_dt\")                                         as \"day_of_month_dt\",\n        EXTRACT(DAYOFWEEK from \"date_dt\")                                   as \"day_of_week_dt\",\n        \"time_dt\",\n        \"consignment\",\n        \"suburb_a\",\n        \"hub_a\",\n        \"suburb_b\",\n        \"hub_b\",\n        area,\n        parcels,\n        weight,\n        \"vol_weight\",\n        \"charge_kg\",\n        service,\n        \n\n    \n     cast(basic_rate as DECIMAL(10,2))\n    \n\n                                as basic_rate,\n        \n\n    \n     cast(fuel_surcharge as DECIMAL(10,2))\n    \n\n                            as fuel_surcharge,\n        \n\n    \n     cast(waybill_charge as DECIMAL(10,2))\n    \n\n                            as waybill_charge,\n        \n\n    \n     cast(s_surcharge as DECIMAL(10,2))\n    \n\n                               as s_surcharge,\n        \n\n    \n     cast(saturday_charge as DECIMAL(10,2))\n    \n\n                           as saturday_charge,\n        \n\n    \n     cast(after_hours_charge as DECIMAL(10,2))\n    \n\n                        as after_hours_charge,\n        \n\n    \n     cast(armoured_vehicle_charge as DECIMAL(10,2))\n    \n\n                   as armoured_vehicle_charge,\n        \n\n    \n     cast(card_assembly_charge as DECIMAL(10,2))\n    \n\n                      as card_assembly_charge,\n        \n\n    \n     cast(township_charge as DECIMAL(10,2))\n    \n\n                           as township_charge,\n        \n\n    \n     cast(insured_value as DECIMAL(10,2))\n    \n\n                             as insured_value,\n        \n\n    \n     cast(sub_total as DECIMAL(10,2))\n    \n\n                                 as sub_total,\n        \n\n    \n     cast(vat as DECIMAL(10,2))\n    \n\n                                       as vat,\n        \n\n    \n     cast(total as DECIMAL(10,2))\n    \n\n                                     as total,\n        delivered_dt,\n        to_date(delivered_dt, 'DD/MM/YYYY')                                 as delivered_date_dt,\n        DATEDIFF(day, \"date_dt\", delivered_date_dt)                         as duration_of_fulfillment\n    FROM \n        \"dev\".\"dbt_parcel_costs_staging\".\"base_ram_costs\"\n)\nSELECT * FROM staging_ram_costs", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_parcel_costs_staging\".\"stg_ram_costs\""}, "model.redshift.fct_otd_costs": {"raw_sql": "{{\n  config(\n    materialized='table'\n  )\n}}\n\nWITH \ntransformed_otd_costs as \n(\n    SELECT\n        transformed_otd_costs.shipment_id                                                                   as fulfillment_shipment_id,\n        transformed_otd_costs.parcel_id                                                                     as fulfillment_parcel_id,\n        transformed_otd_costs.poa_date_dt                                                                   as fulfillment_poa_date_dt,\n        transformed_otd_costs.poa_date_part_dt                                                              as fulfillment_poa_date_part_dt,\n        cast(transformed_otd_costs.poa_time as time)                                                        as fulfillment_poa_time_dt,\n        cast(transformed_otd_costs.poh_time as time)                                                        as fulfillment_poh_time_dt,\n        transformed_otd_costs.poa_month_dt                                                                  as poa_month_dt,\n        transformed_otd_costs.poa_day_of_month_dt                                                           as poa_day_of_month_dt,\n        transformed_otd_costs.poa_day_of_week_dt                                                            as poa_day_of_week_dt,   \n        transformed_otd_costs.poh_date_dt                                                                   as fulfillment_poh_date_dt,\n        transformed_otd_costs.poh_date_part_dt                                                              as fulfillment_poh_date_part_dt,\n        transformed_otd_costs.poh_month_dt                                                                  as poh_month_dt,\n        transformed_otd_costs.poh_day_of_month_dt                                                           as poh_day_of_month_dt,\n        transformed_otd_costs.poh_day_of_week_dt                                                            as poh_day_of_week_dt,\n        transformed_otd_costs.primary_customer_id                                                           as fulfillment_primary_customer_id,\n        transformed_otd_costs.client                                                                        as client,\n        transformed_otd_costs.sender_name                                                                   as sender_name,\n        transformed_otd_costs.weight                                                                        as parcel_weight,\n        transformed_otd_costs.length                                                                        as parcel_length,\n        transformed_otd_costs.width                                                                         as parcel_width,\n        transformed_otd_costs.height                                                                        as parcel_height,\n        transformed_otd_costs.chargeable_mass                                                               as parcel_chargeable_mass,\n        transformed_otd_costs.shipper_name                                                                  as shipper_name,\n        transformed_otd_costs.shipper                                                                       as shipper,\n        transformed_otd_costs.service                                                                       as service,\n        transformed_otd_costs.zone                                                                          as zone,\n        transformed_otd_costs.chargeout_excl                                                                as chargeout_excl,\n        transformed_otd_costs.shipment_name                                                                 as shipment_name,\n        transformed_otd_costs.shipment_country_id                                                           as shipment_country_id,\n        transformed_otd_costs.pod_date_dt                                                                   as pod_date_dt,\n        transformed_otd_costs.costing_date_dt                                                               as costing_date_dt,\n        transformed_otd_costs.client_site                                                                   as client_site,\n        transformed_otd_costs.order_number2                                                                 as order_number2,\n        transformed_otd_costs.brand                                                                         as parcel_brand,\n        transformed_otd_costs.total_brands                                                                  as total_brands,\n        transformed_otd_costs.order_cat                                                                     as order_cat,\n        DATEDIFF(day, transformed_otd_costs.\"poa_date_part_dt\", transformed_otd_costs.pod_date_dt)          as duration_of_fulfillment,  \n        item_order_details.\"parcel no\"                                                                      as parcel_no,\n        COUNT(item_order_details.\"parcel no\")                                                               as number_of_items,\n        (chargeout_excl / number_of_items)::DECIMAL(10,2)                                                   as cost_per_item\n    FROM\n        {{ ref('stg_otd_costs') }} transformed_otd_costs\n    JOIN \n        {{ source('fulfillment', 'omni_orders_fct_order_item_details') }} item_order_details\n    ON \n        item_order_details.\"parcel no\" = parcel_id\n    GROUP BY \n        fulfillment_shipment_id, fulfillment_parcel_id, fulfillment_poa_date_dt, fulfillment_poa_date_part_dt, fulfillment_poh_date_part_dt, fulfillment_poh_date_dt, poa_month_dt, poh_month_dt, \n        poa_day_of_month_dt, fulfillment_poa_time_dt, fulfillment_poh_time_dt, poh_day_of_month_dt, poa_day_of_week_dt, poh_day_of_week_dt, fulfillment_primary_customer_id, client, \n        sender_name, parcel_weight, parcel_length, parcel_width, parcel_height, parcel_chargeable_mass, shipper_name, \n        shipper, service, zone, chargeout_excl, shipment_name, shipment_country_id, pod_date_dt,costing_date_dt,\n        client_site, order_number2, parcel_brand, total_brands,  order_cat, duration_of_fulfillment, parcel_no\n\n)\nSELECT * FROM transformed_otd_costs", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.redshift.fulfillment.omni_orders_fct_order_item_details", "model.redshift.stg_otd_costs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_parcel_costs", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "dev", "schema": "dbt_parcel_costs", "fqn": ["redshift", "parcel_costs", "transformed", "fct_otd_costs"], "unique_id": "model.redshift.fct_otd_costs", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "parcel_costs/transformed/fct_otd_costs.sql", "original_file_path": "models/parcel_costs/transformed/fct_otd_costs.sql", "name": "fct_otd_costs", "alias": "fct_otd_costs", "checksum": {"name": "sha256", "checksum": "2b6005d0395c78996f325b49668af464803e2973a485d9fb7a921cb9da077a3c"}, "tags": [], "refs": [["stg_otd_costs"]], "sources": [["fulfillment", "omni_orders_fct_order_item_details"]], "description": "otd transformed data with item costs", "columns": {"fulfillment_shipment_id": {"name": "fulfillment_shipment_id", "description": "shipment id of the parcel", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "fulfillment_parcel_id": {"name": "fulfillment_parcel_id", "description": "parcel id", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "fulfillment_poa_date_dt": {"name": "fulfillment_poa_date_dt", "description": "proof of acceptance date as an excel serial number", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "fulfillment_poa_date_part_dt": {"name": "fulfillment_poa_date_part_dt", "description": "date of parcel acceptance", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "date"}, "fulfillment_poa_time_dt": {"name": "fulfillment_poa_time_dt", "description": "time of parcel acceptance", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "time"}, "fulfillment_poh_time_dt": {"name": "fulfillment_poh_time_dt", "description": "time of parcel handover to the courier", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "time"}, "poa_month_dt": {"name": "poa_month_dt", "description": "month of fulfillment", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "poa_day_of_month_dt": {"name": "poa_day_of_month_dt", "description": "day of month of fulfillment", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "poa_day_of_week_dt": {"name": "poa_day_of_week_dt", "description": "day of week of fulfillment", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "fulfillment_poh_date_dt": {"name": "fulfillment_poh_date_dt", "description": "parcel handover date to the courier as an excel serial number", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "fulfillment_poh_date_part_dt": {"name": "fulfillment_poh_date_part_dt", "description": "date of parcel handover", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "date"}, "poh_month_dt": {"name": "poh_month_dt", "description": "month of parcel handover", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "poh_day_of_month_dt": {"name": "poh_day_of_month_dt", "description": "day of month of parcel handover", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "poh_day_of_week_dt": {"name": "poh_day_of_week_dt", "description": "day of week of parcel handover", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "fulfillment_primary_customer_id": {"name": "fulfillment_primary_customer_id", "description": "fulfillment customer i.e TFG", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "client": {"name": "client", "description": "fulfillment client E.G The Foschini Group", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "sender_name": {"name": "sender_name", "description": "courier branch e.g On The Dot - Olifantsfontein", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "parcel_weight": {"name": "parcel_weight", "description": "weight of parcel", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "parcel_length": {"name": "parcel_length", "description": "length of parcel", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "parcel_width": {"name": "parcel_width", "description": "width of parcel", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "parcel_height": {"name": "parcel_height", "description": "height of parcel", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "parcel_chargeable_mass": {"name": "parcel_chargeable_mass", "description": "chargeable mass of parcel", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "shipper_name": {"name": "shipper_name", "description": "name of shipper e.g Fedex, Pargo", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "shipper": {"name": "shipper", "description": "Abbreviation of Shipper e.g FED, PAR", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "service": {"name": "service", "description": "service type e.g ECO", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "zone": {"name": "zone", "description": "area of delivery e.g Main centre, local", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "chargeout_excl": {"name": "chargeout_excl", "description": "parcel fulfillment costs excluding tax", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "shipment_name": {"name": "shipment_name", "description": "destination person or entity e.g Totalsports", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "shipment_country_id": {"name": "shipment_country_id", "description": "shipment country", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "pod_date_dt": {"name": "pod_date_dt", "description": "proof of delivery of parcel", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "date"}, "costing_date_dt": {"name": "costing_date_dt", "description": "costing date", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "date"}, "client_site": {"name": "client_site", "description": "abbreviated client site e.g OTDMID", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "order_number2": {"name": "order_number2", "description": "order number", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "parcel_brand": {"name": "parcel_brand", "description": "brand e.g Totalsports, Foschini", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "total_brands": {"name": "total_brands", "description": "number of brands in parcel", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "order_cat": {"name": "order_cat", "description": "category of order e.g Flush, Outbound", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "duration_of_fulfillment": {"name": "duration_of_fulfillment", "description": "number of days taken from approval to delivery of a parcel", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "parcel_no": {"name": "parcel_no", "description": "parcel number", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "number_of_items": {"name": "number_of_items", "description": "number of items in parcel", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "cost_per_item": {"name": "cost_per_item", "description": "cost of fulfillment for each item in parcel", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}}, "meta": {}, "docs": {"show": true}, "patch_path": "redshift://models/parcel_costs/transformed/transformed.yml", "compiled_path": "target/compiled/redshift/models/parcel_costs/transformed/fct_otd_costs.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_parcel_costs", "materialized": "table"}, "created_at": 1649755424.958418, "compiled_sql": "\n\nWITH \ntransformed_otd_costs as \n(\n    SELECT\n        transformed_otd_costs.shipment_id                                                                   as fulfillment_shipment_id,\n        transformed_otd_costs.parcel_id                                                                     as fulfillment_parcel_id,\n        transformed_otd_costs.poa_date_dt                                                                   as fulfillment_poa_date_dt,\n        transformed_otd_costs.poa_date_part_dt                                                              as fulfillment_poa_date_part_dt,\n        cast(transformed_otd_costs.poa_time as time)                                                        as fulfillment_poa_time_dt,\n        cast(transformed_otd_costs.poh_time as time)                                                        as fulfillment_poh_time_dt,\n        transformed_otd_costs.poa_month_dt                                                                  as poa_month_dt,\n        transformed_otd_costs.poa_day_of_month_dt                                                           as poa_day_of_month_dt,\n        transformed_otd_costs.poa_day_of_week_dt                                                            as poa_day_of_week_dt,   \n        transformed_otd_costs.poh_date_dt                                                                   as fulfillment_poh_date_dt,\n        transformed_otd_costs.poh_date_part_dt                                                              as fulfillment_poh_date_part_dt,\n        transformed_otd_costs.poh_month_dt                                                                  as poh_month_dt,\n        transformed_otd_costs.poh_day_of_month_dt                                                           as poh_day_of_month_dt,\n        transformed_otd_costs.poh_day_of_week_dt                                                            as poh_day_of_week_dt,\n        transformed_otd_costs.primary_customer_id                                                           as fulfillment_primary_customer_id,\n        transformed_otd_costs.client                                                                        as client,\n        transformed_otd_costs.sender_name                                                                   as sender_name,\n        transformed_otd_costs.weight                                                                        as parcel_weight,\n        transformed_otd_costs.length                                                                        as parcel_length,\n        transformed_otd_costs.width                                                                         as parcel_width,\n        transformed_otd_costs.height                                                                        as parcel_height,\n        transformed_otd_costs.chargeable_mass                                                               as parcel_chargeable_mass,\n        transformed_otd_costs.shipper_name                                                                  as shipper_name,\n        transformed_otd_costs.shipper                                                                       as shipper,\n        transformed_otd_costs.service                                                                       as service,\n        transformed_otd_costs.zone                                                                          as zone,\n        transformed_otd_costs.chargeout_excl                                                                as chargeout_excl,\n        transformed_otd_costs.shipment_name                                                                 as shipment_name,\n        transformed_otd_costs.shipment_country_id                                                           as shipment_country_id,\n        transformed_otd_costs.pod_date_dt                                                                   as pod_date_dt,\n        transformed_otd_costs.costing_date_dt                                                               as costing_date_dt,\n        transformed_otd_costs.client_site                                                                   as client_site,\n        transformed_otd_costs.order_number2                                                                 as order_number2,\n        transformed_otd_costs.brand                                                                         as parcel_brand,\n        transformed_otd_costs.total_brands                                                                  as total_brands,\n        transformed_otd_costs.order_cat                                                                     as order_cat,\n        DATEDIFF(day, transformed_otd_costs.\"poa_date_part_dt\", transformed_otd_costs.pod_date_dt)          as duration_of_fulfillment,  \n        item_order_details.\"parcel no\"                                                                      as parcel_no,\n        COUNT(item_order_details.\"parcel no\")                                                               as number_of_items,\n        (chargeout_excl / number_of_items)::DECIMAL(10,2)                                                   as cost_per_item\n    FROM\n        \"dev\".\"dbt_parcel_costs_staging\".\"stg_otd_costs\" transformed_otd_costs\n    JOIN \n        \"dev\".\"exasol\".\"omni_orders_fct_order_item_details\" item_order_details\n    ON \n        item_order_details.\"parcel no\" = parcel_id\n    GROUP BY \n        fulfillment_shipment_id, fulfillment_parcel_id, fulfillment_poa_date_dt, fulfillment_poa_date_part_dt, fulfillment_poh_date_part_dt, fulfillment_poh_date_dt, poa_month_dt, poh_month_dt, \n        poa_day_of_month_dt, fulfillment_poa_time_dt, fulfillment_poh_time_dt, poh_day_of_month_dt, poa_day_of_week_dt, poh_day_of_week_dt, fulfillment_primary_customer_id, client, \n        sender_name, parcel_weight, parcel_length, parcel_width, parcel_height, parcel_chargeable_mass, shipper_name, \n        shipper, service, zone, chargeout_excl, shipment_name, shipment_country_id, pod_date_dt,costing_date_dt,\n        client_site, order_number2, parcel_brand, total_brands,  order_cat, duration_of_fulfillment, parcel_no\n\n)\nSELECT * FROM transformed_otd_costs", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_parcel_costs\".\"fct_otd_costs\""}, "model.redshift.fct_rtt_costs": {"raw_sql": "{{\n  config(\n    materialized='table'\n  )\n}}\n\nWITH \ntransformed_rtt_costs as \n(\n    SELECT \n        transformed_one_stock_columns.parcel_number                         as one_stock_parcel_number,\n        transformed_one_stock_columns.client                                as client,\n        transformed_one_stock_columns.date_dt                               as fulfillment_start_date_dt,\n        transformed_one_stock_columns.month_dt                              as fulfillment_start_month_dt,\n        transformed_one_stock_columns.day_of_month_dt                       as fulfillment_start_day_of_month_dt,\n        transformed_one_stock_columns.day_of_week_dt                        as fulfillment_start_day_of_week_dt,\n        transformed_one_stock_columns.sender_hub                            as sender_hub,\n        transformed_one_stock_columns.sender_area                           as sender_area,\n        transformed_one_stock_columns.consignee_hub                         as consignee_hub,\n        transformed_one_stock_columns.consignee_area                        as consignee_area,\n        transformed_one_stock_columns.area                                  as area,\n        transformed_one_stock_columns.route                                 as route,\n        transformed_one_stock_columns.nr_parcels                            as nr_parcels,\n        transformed_one_stock_columns.actual_weight                         as parcel_actual_weight,\n        transformed_one_stock_columns.volume_weight                         as parcel_volume_weight,\n        transformed_one_stock_columns.weight_billed                         as parcel_weight_billed,\n        transformed_one_stock_columns.min_change                            as parcel_min_change,\n        transformed_one_stock_columns.add_on_kg                             as parcel_add_on_kg,\n        transformed_one_stock_columns.rate_per_kg                           as parcel_rate_per_kg,\n        transformed_one_stock_columns.total_exclusive                       as parcel_total_exclusive,\n        transformed_one_stock_columns.subtotal                              as parcel_subtotal,\n        transformed_one_stock_columns.fuel_surcharge                        as parcel_fuel_surcharge,\n        transformed_one_stock_columns.vat                                   as parcel_vat,\n        transformed_one_stock_columns.total_inclusive                       as parcel_total_inclusive,\n        item_order_details.\"parcel no\"                                      as item_parcel_no,\n        COUNT(item_order_details.\"parcel no\")                               as number_of_items,\n        (parcel_total_exclusive / number_of_items)::DECIMAL(10,2)           as cost_per_item\n\n    FROM\n  \n        {{ ref('stg_rtt_costs') }} transformed_one_stock_columns\n    JOIN \n        {{ source('fulfillment', 'omni_orders_fct_order_item_details') }} item_order_details\n    ON \n        item_order_details.\"parcel no\" = transformed_one_stock_columns.parcel_number\n \n    GROUP BY \n        one_stock_parcel_number, client, fulfillment_start_date_dt, fulfillment_start_month_dt, fulfillment_start_day_of_month_dt, fulfillment_start_day_of_week_dt,  \n        sender_hub, sender_area, consignee_hub, consignee_area, area, route, nr_parcels, parcel_actual_weight, \n        parcel_volume_weight, parcel_weight_billed, parcel_min_change, parcel_add_on_kg, parcel_rate_per_kg, parcel_total_exclusive,\n        parcel_subtotal, parcel_fuel_surcharge, parcel_vat, parcel_total_inclusive, item_parcel_no\n)\nSELECT * FROM transformed_rtt_costs", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.redshift.fulfillment.omni_orders_fct_order_item_details", "model.redshift.stg_rtt_costs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_parcel_costs", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "dev", "schema": "dbt_parcel_costs", "fqn": ["redshift", "parcel_costs", "transformed", "fct_rtt_costs"], "unique_id": "model.redshift.fct_rtt_costs", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "parcel_costs/transformed/fct_rtt_costs.sql", "original_file_path": "models/parcel_costs/transformed/fct_rtt_costs.sql", "name": "fct_rtt_costs", "alias": "fct_rtt_costs", "checksum": {"name": "sha256", "checksum": "4bcf196a0bc1fcb539eab1f780ea4ce821a58bcde8974a8dcdaf517e31711f49"}, "tags": [], "refs": [["stg_rtt_costs"]], "sources": [["fulfillment", "omni_orders_fct_order_item_details"]], "description": "rtt transformed data with item costs", "columns": {"one_stock_parcel_number": {"name": "one_stock_parcel_number", "description": "parcel number", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "client": {"name": "client", "description": "fulfillment client e.g One Stock", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "fulfillment_start_date_dt": {"name": "fulfillment_start_date_dt", "description": "date of start of fulfillment process", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "date"}, "fulfillment_start_month_dt": {"name": "fulfillment_start_month_dt", "description": "month fulfillment occured", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "fulfillment_start_day_of_month_dt": {"name": "fulfillment_start_day_of_month_dt", "description": "day of month of fulfillment", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "fulfillment_start_day_of_week_dt": {"name": "fulfillment_start_day_of_week_dt", "description": "day of week of fulfillment", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "sender_hub": {"name": "sender_hub", "description": "hub center the parcel is coming from .eg RTT STYLE CPT", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "sender_area": {"name": "sender_area", "description": "area the parcel is coming from e.g CPT", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "consignee_hub": {"name": "consignee_hub", "description": "area of fulfillment center receiving parcel e.g RTT STYLE JHB", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "consignee_area": {"name": "consignee_area", "description": "area of fulfillment center receiving parcel e.g JHB", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "area": {"name": "area", "description": "area the parcel is being delivered to E.G Main, Local", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "route": {"name": "route", "description": "route the parcel will go through e.g CPT - KIM", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "nr_parcels": {"name": "nr_parcels", "description": "number of parcels in the entire order", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "parcel_actual_weight": {"name": "parcel_actual_weight", "description": "weight of parcel", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "parcel_volume_weight": {"name": "parcel_volume_weight", "description": "volume weight of parcel", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "parcel_weight_billed": {"name": "parcel_weight_billed", "description": "parcel charged weight", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "parcel_min_change": {"name": "parcel_min_change", "description": "parcel min change?", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "parcel_add_on_kg": {"name": "parcel_add_on_kg", "description": "add on weight", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "parcel_total_exclusive": {"name": "parcel_total_exclusive", "description": "parcel costs excluding extra charges", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "parcel_subtotal": {"name": "parcel_subtotal", "description": "parcel costs excluding vat", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "parcel_fuel_surcharge": {"name": "parcel_fuel_surcharge", "description": "parcel fuel surcharge", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "parcel_vat": {"name": "parcel_vat", "description": "vat", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "parcel_total_inclusive": {"name": "parcel_total_inclusive", "description": "parcel costs including vat", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "item_parcel_no": {"name": "item_parcel_no", "description": "parcel number", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "number_of_items": {"name": "number_of_items", "description": "number of items in parcel", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "cost_per_item": {"name": "cost_per_item", "description": "cost of fulfillment for each item in parcel", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}}, "meta": {}, "docs": {"show": true}, "patch_path": "redshift://models/parcel_costs/transformed/transformed.yml", "compiled_path": "target/compiled/redshift/models/parcel_costs/transformed/fct_rtt_costs.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_parcel_costs", "materialized": "table"}, "created_at": 1649755424.972024, "compiled_sql": "\n\nWITH \ntransformed_rtt_costs as \n(\n    SELECT \n        transformed_one_stock_columns.parcel_number                         as one_stock_parcel_number,\n        transformed_one_stock_columns.client                                as client,\n        transformed_one_stock_columns.date_dt                               as fulfillment_start_date_dt,\n        transformed_one_stock_columns.month_dt                              as fulfillment_start_month_dt,\n        transformed_one_stock_columns.day_of_month_dt                       as fulfillment_start_day_of_month_dt,\n        transformed_one_stock_columns.day_of_week_dt                        as fulfillment_start_day_of_week_dt,\n        transformed_one_stock_columns.sender_hub                            as sender_hub,\n        transformed_one_stock_columns.sender_area                           as sender_area,\n        transformed_one_stock_columns.consignee_hub                         as consignee_hub,\n        transformed_one_stock_columns.consignee_area                        as consignee_area,\n        transformed_one_stock_columns.area                                  as area,\n        transformed_one_stock_columns.route                                 as route,\n        transformed_one_stock_columns.nr_parcels                            as nr_parcels,\n        transformed_one_stock_columns.actual_weight                         as parcel_actual_weight,\n        transformed_one_stock_columns.volume_weight                         as parcel_volume_weight,\n        transformed_one_stock_columns.weight_billed                         as parcel_weight_billed,\n        transformed_one_stock_columns.min_change                            as parcel_min_change,\n        transformed_one_stock_columns.add_on_kg                             as parcel_add_on_kg,\n        transformed_one_stock_columns.rate_per_kg                           as parcel_rate_per_kg,\n        transformed_one_stock_columns.total_exclusive                       as parcel_total_exclusive,\n        transformed_one_stock_columns.subtotal                              as parcel_subtotal,\n        transformed_one_stock_columns.fuel_surcharge                        as parcel_fuel_surcharge,\n        transformed_one_stock_columns.vat                                   as parcel_vat,\n        transformed_one_stock_columns.total_inclusive                       as parcel_total_inclusive,\n        item_order_details.\"parcel no\"                                      as item_parcel_no,\n        COUNT(item_order_details.\"parcel no\")                               as number_of_items,\n        (parcel_total_exclusive / number_of_items)::DECIMAL(10,2)           as cost_per_item\n\n    FROM\n  \n        \"dev\".\"dbt_parcel_costs_staging\".\"stg_rtt_costs\" transformed_one_stock_columns\n    JOIN \n        \"dev\".\"exasol\".\"omni_orders_fct_order_item_details\" item_order_details\n    ON \n        item_order_details.\"parcel no\" = transformed_one_stock_columns.parcel_number\n \n    GROUP BY \n        one_stock_parcel_number, client, fulfillment_start_date_dt, fulfillment_start_month_dt, fulfillment_start_day_of_month_dt, fulfillment_start_day_of_week_dt,  \n        sender_hub, sender_area, consignee_hub, consignee_area, area, route, nr_parcels, parcel_actual_weight, \n        parcel_volume_weight, parcel_weight_billed, parcel_min_change, parcel_add_on_kg, parcel_rate_per_kg, parcel_total_exclusive,\n        parcel_subtotal, parcel_fuel_surcharge, parcel_vat, parcel_total_inclusive, item_parcel_no\n)\nSELECT * FROM transformed_rtt_costs", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_parcel_costs\".\"fct_rtt_costs\""}, "model.redshift.fct_combined_costs": {"raw_sql": "{{\n  config(\n    materialized='table'\n  )\n}}\n\nWITH \ncombined_data as \n(\nSELECT \n    'OTD'                                           as fulfillment_partner,\n    otd_costs.fulfillment_parcel_id                 as fulfillment_parcel_id,\n    otd_costs.fulfillment_poa_date_part_dt          as fulfillment_start_date_dt,\n    otd_costs.poa_month_dt                          as fulfillment_month_dt,\n    otd_costs.poa_day_of_month_dt                   as fulfillment_day_of_month_dt,\n    otd_costs.poa_day_of_week_dt                    as fulfillment_day_of_week,\n    otd_costs.parcel_weight                         as parcel_weight,\n    otd_costs.chargeout_excl                        as parcel_total_amount_excl,\n    {{map_area_locations('zone')}}                  as parcel_delivery_regulated_area,\n    otd_costs.zone                                  as parcel_delivery_zone,\n    otd_costs.number_of_items                       as number_of_items,\n    otd_costs.cost_per_item                         as cost_per_item\nFROM {{ ref('fct_otd_costs') }} otd_costs\n\nUNION\nSELECT \n    'RAM'                                           as fulfillment_partner,\n    ram_costs.consigment                            as fulfillment_parcel_id,\n    ram_costs.fulfillment_start_date_dt             as fulfillment_start_date_dt,\n    ram_costs.fulfillment_start_month_dt            as fulfillment_month_dt,\n    ram_costs.fulfillment_start_day_of_month_dt     as fulfillment_day_of_month_dt,\n    ram_costs.fulfillment_start_day_of_week_dt      as fulfillment_day_of_week,\n    ram_costs.parcel_weight                         as parcel_weight,\n    ram_costs.parcel_total                          as parcel_total_amount_excl,\n    {{map_area_locations('area')}}                  as parcel_delivery_regulated_area,\n    ram_costs.area                                  as parcel_delivery_zone,\n    ram_costs.number_of_items                       as number_of_items,\n    ram_costs.cost_per_item                         as cost_per_item\nFROM {{ ref('fct_ram_costs') }} ram_costs\nUNION\nSELECT\n    'RTT'                                           as fulfillment_partner,\n    rtt_costs.one_stock_parcel_number               as fulfillment_parcel_id,\n    rtt_costs.fulfillment_start_date_dt             as fulfillment_start_date_dt,\n    rtt_costs.fulfillment_start_month_dt            as fulfillment_month_dt,\n    rtt_costs.fulfillment_start_day_of_month_dt     as fulfillment_day_of_month_dt,\n    rtt_costs.fulfillment_start_day_of_week_dt      as fulfillment_day_of_week,\n    rtt_costs.parcel_actual_weight                  as parcel_weight,\n    rtt_costs.parcel_total_inclusive                as parcel_total_amount_excl,\n    {{map_area_locations('area')}}                  as parcel_delivery_regulated_area,\n    rtt_costs.area                                  as parcel_delivery_zone,\n    rtt_costs.number_of_items                       as number_of_items,\n    rtt_costs.cost_per_item                         as cost_per_item\n  \nFROM {{ ref('fct_rtt_costs') }} rtt_costs\n\n)\n\nSELECT * FROM combined_data", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.redshift.map_area_locations"], "nodes": ["model.redshift.fct_otd_costs", "model.redshift.fct_ram_costs", "model.redshift.fct_rtt_costs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_parcel_costs", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "dev", "schema": "dbt_parcel_costs", "fqn": ["redshift", "parcel_costs", "transformed", "fct_combined_costs"], "unique_id": "model.redshift.fct_combined_costs", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "parcel_costs/transformed/fct_combined_costs.sql", "original_file_path": "models/parcel_costs/transformed/fct_combined_costs.sql", "name": "fct_combined_costs", "alias": "fct_combined_costs", "checksum": {"name": "sha256", "checksum": "cfb881c2d985725977c4b2395a1e4ae45376d48452b288b36337164cfc02040f"}, "tags": [], "refs": [["fct_otd_costs"], ["fct_ram_costs"], ["fct_rtt_costs"]], "sources": [], "description": "transformed costs of all couriers combined", "columns": {"fulfillment_partner": {"name": "fulfillment_partner", "description": "fulfillment partner used for that order i.e OTD, RTT, RAM", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "fulfillment_parcel_id": {"name": "fulfillment_parcel_id", "description": "parcel number", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "fulfillment_start_date_dt": {"name": "fulfillment_start_date_dt", "description": "date of start of fulfillment process", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "date"}, "fulfillment_month_dt": {"name": "fulfillment_month_dt", "description": "month fulfillment occured", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "fulfillment_day_of_month_dt": {"name": "fulfillment_day_of_month_dt", "description": "day of month of fulfillment", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "fulfillment_day_of_week_dt": {"name": "fulfillment_day_of_week_dt", "description": "day of week of fulfillment", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "parcel_weight": {"name": "parcel_weight", "description": "weight of parcel", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "parcel_total_amount_excl": {"name": "parcel_total_amount_excl", "description": "parcel costs excluding vat", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "double"}, "parcel_delivery_regulated_area": {"name": "parcel_delivery_regulated_area", "description": "area type the parcel is being delivered to regulated across partners i.e Local, Main, Outlying, Regional", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "parcel_delivery_zone": {"name": "parcel_delivery_zone", "description": "zone the parcel is being delivered to as passed through by the courier partners e.g L, R, M, Main, Local etc.", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "number_of_items": {"name": "number_of_items", "description": "number of items in parcel", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "cost_per_item": {"name": "cost_per_item", "description": "cost of fulfillment for each item in parcel", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}}, "meta": {}, "docs": {"show": true}, "patch_path": "redshift://models/parcel_costs/transformed/transformed.yml", "compiled_path": "target/compiled/redshift/models/parcel_costs/transformed/fct_combined_costs.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_parcel_costs", "materialized": "table"}, "created_at": 1649755424.97536, "compiled_sql": "\n\nWITH \ncombined_data as \n(\nSELECT \n    'OTD'                                           as fulfillment_partner,\n    otd_costs.fulfillment_parcel_id                 as fulfillment_parcel_id,\n    otd_costs.fulfillment_poa_date_part_dt          as fulfillment_start_date_dt,\n    otd_costs.poa_month_dt                          as fulfillment_month_dt,\n    otd_costs.poa_day_of_month_dt                   as fulfillment_day_of_month_dt,\n    otd_costs.poa_day_of_week_dt                    as fulfillment_day_of_week,\n    otd_costs.parcel_weight                         as parcel_weight,\n    otd_costs.chargeout_excl                        as parcel_total_amount_excl,\n    \n    case\n        when zone = 'LOCAL OUTLYING' then 'Outlying'\n        when zone = 'MAIN OUTLYING' then 'Outlying'\n        when zone = 'LOCAL' then 'Local'\n        when zone = 'MAIN' then 'Main'\n        when zone = 'L' then 'Local'\n        when zone = 'M' then 'Main'\n        when zone = 'Local' then 'Local'\n        when zone = 'Local Township' then 'Local'\n        when zone = 'Outlying' then 'Outlying'\n        when zone = 'Main Township' then 'Main'\n        when zone = 'Main Centre' then 'Main'\n        when zone = 'Regional' then 'Regional'\n        when zone = 'R' then 'Regional'\n        when zone = 'Regional Township' then 'Regional'\n        when zone = 'Remote' then 'Remote'\n        else null end\n                  as parcel_delivery_regulated_area,\n    otd_costs.zone                                  as parcel_delivery_zone,\n    otd_costs.number_of_items                       as number_of_items,\n    otd_costs.cost_per_item                         as cost_per_item\nFROM \"dev\".\"dbt_parcel_costs\".\"fct_otd_costs\" otd_costs\n\nUNION\nSELECT \n    'RAM'                                           as fulfillment_partner,\n    ram_costs.consigment                            as fulfillment_parcel_id,\n    ram_costs.fulfillment_start_date_dt             as fulfillment_start_date_dt,\n    ram_costs.fulfillment_start_month_dt            as fulfillment_month_dt,\n    ram_costs.fulfillment_start_day_of_month_dt     as fulfillment_day_of_month_dt,\n    ram_costs.fulfillment_start_day_of_week_dt      as fulfillment_day_of_week,\n    ram_costs.parcel_weight                         as parcel_weight,\n    ram_costs.parcel_total                          as parcel_total_amount_excl,\n    \n    case\n        when area = 'LOCAL OUTLYING' then 'Outlying'\n        when area = 'MAIN OUTLYING' then 'Outlying'\n        when area = 'LOCAL' then 'Local'\n        when area = 'MAIN' then 'Main'\n        when area = 'L' then 'Local'\n        when area = 'M' then 'Main'\n        when area = 'Local' then 'Local'\n        when area = 'Local Township' then 'Local'\n        when area = 'Outlying' then 'Outlying'\n        when area = 'Main Township' then 'Main'\n        when area = 'Main Centre' then 'Main'\n        when area = 'Regional' then 'Regional'\n        when area = 'R' then 'Regional'\n        when area = 'Regional Township' then 'Regional'\n        when area = 'Remote' then 'Remote'\n        else null end\n                  as parcel_delivery_regulated_area,\n    ram_costs.area                                  as parcel_delivery_zone,\n    ram_costs.number_of_items                       as number_of_items,\n    ram_costs.cost_per_item                         as cost_per_item\nFROM \"dev\".\"dbt_parcel_costs\".\"fct_ram_costs\" ram_costs\nUNION\nSELECT\n    'RTT'                                           as fulfillment_partner,\n    rtt_costs.one_stock_parcel_number               as fulfillment_parcel_id,\n    rtt_costs.fulfillment_start_date_dt             as fulfillment_start_date_dt,\n    rtt_costs.fulfillment_start_month_dt            as fulfillment_month_dt,\n    rtt_costs.fulfillment_start_day_of_month_dt     as fulfillment_day_of_month_dt,\n    rtt_costs.fulfillment_start_day_of_week_dt      as fulfillment_day_of_week,\n    rtt_costs.parcel_actual_weight                  as parcel_weight,\n    rtt_costs.parcel_total_inclusive                as parcel_total_amount_excl,\n    \n    case\n        when area = 'LOCAL OUTLYING' then 'Outlying'\n        when area = 'MAIN OUTLYING' then 'Outlying'\n        when area = 'LOCAL' then 'Local'\n        when area = 'MAIN' then 'Main'\n        when area = 'L' then 'Local'\n        when area = 'M' then 'Main'\n        when area = 'Local' then 'Local'\n        when area = 'Local Township' then 'Local'\n        when area = 'Outlying' then 'Outlying'\n        when area = 'Main Township' then 'Main'\n        when area = 'Main Centre' then 'Main'\n        when area = 'Regional' then 'Regional'\n        when area = 'R' then 'Regional'\n        when area = 'Regional Township' then 'Regional'\n        when area = 'Remote' then 'Remote'\n        else null end\n                  as parcel_delivery_regulated_area,\n    rtt_costs.area                                  as parcel_delivery_zone,\n    rtt_costs.number_of_items                       as number_of_items,\n    rtt_costs.cost_per_item                         as cost_per_item\n  \nFROM \"dev\".\"dbt_parcel_costs\".\"fct_rtt_costs\" rtt_costs\n\n)\n\nSELECT * FROM combined_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_parcel_costs\".\"fct_combined_costs\""}, "model.redshift.fct_order_items_with_costs": {"raw_sql": "{{\n  config(\n    materialized='table'\n  )\n}}\n\nWITH \norder_items_with_costs as \n(\nSELECT \n    fct_combined_costs.fulfillment_partner,\n    fct_combined_costs.fulfillment_parcel_id,\n    fct_combined_costs.fulfillment_start_date_dt,\n    fct_combined_costs.fulfillment_month_dt,\n    fct_combined_costs.fulfillment_day_of_month_dt,\n    fct_combined_costs.fulfillment_day_of_week,\n    fct_combined_costs.parcel_weight,\n    fct_combined_costs.parcel_total_amount_excl,\n    fct_combined_costs.parcel_delivery_regulated_area,\n    fct_combined_costs.parcel_delivery_zone,\n    fct_combined_costs.number_of_items,\n    fct_combined_costs.cost_per_item,\n\n    item_order_details.\"order item id\",\n    item_order_details.\"order no\",\n    item_order_details.\"order id\",\n    item_order_details.\"order type id\",\n    item_order_details.\"order type\",\n    item_order_details.\"allocation id\",\n    item_order_details.\"brand\",\n    item_order_details.\"brand id\",\n    item_order_details.\"operating division\",\n    item_order_details.\"order source\",\n    item_order_details.\"platform\",\n    item_order_details.\"device category\",\n    item_order_details.\"website\",\n    item_order_details.\"order item status\",\n    item_order_details.\"order item status id\",\n    item_order_details.\"order status\",\n    item_order_details.\"paid status\",\n    item_order_details.\"flag paid\",\n    item_order_details.\"sku\",\n    item_order_details.\"company id\",\n    item_order_details.\"product link\",\n    item_order_details.\"item type\",\n    item_order_details.\"payment types\",\n    item_order_details.\"flag staff order\",\n    item_order_details.\"is staff order\",\n    item_order_details.\"is ibt\",\n    item_order_details.\"flag ibt\",\n    item_order_details.\"is future order\",\n    item_order_details.\"flag future order\",\n    item_order_details.\"is furniture order\",\n    item_order_details.\"flag furniture order\",\n    item_order_details.\"is gift wrapped\",\n    item_order_details.\"is gift\",\n    item_order_details.\"is on gift registry\",\n    item_order_details.\"flag on gift registry\",\n    item_order_details.\"selling price orig\",\n    item_order_details.\"selling price act\",\n    item_order_details.\"selling price act (excl vat)\",\n    item_order_details.\"discount amount\",\n    item_order_details.\"sale type\",\n    item_order_details.\"vat\",\n    item_order_details.\"quantity\",\n    item_order_details.\"ff centre\",\n    item_order_details.\"fulfillment centre type id\",\n    item_order_details.\"otd vs os\",\n    item_order_details.\"tracking code\",\n    item_order_details.\"parcel no\",\n    item_order_details.\"has parcel no\",\n    item_order_details.\"flag parcel no\",\n    item_order_details.\"claim branch\",\n    item_order_details.\"is cancelled\",\n    item_order_details.\"flag cancelled\",\n    item_order_details.\"cancelled status\",\n    item_order_details.\"egs no\",\n    item_order_details.\"courier\",\n    item_order_details.\"size sku\",\n    item_order_details.\"service type\",\n    item_order_details.\"order dt\",\n    item_order_details.\"release dt\",\n    item_order_details.\"packed dt\",\n    item_order_details.\"response status\",\n    item_order_details.\"flag cnc order\",\n    item_order_details.\"is cnc order\",\n    item_order_details.\"shipping address line1\",\n    item_order_details.\"shipping address line2\",\n    item_order_details.\"shipping address postal code\",\n    item_order_details.\"shipping address city\",\n    item_order_details.\"shipping address latitude\",\n    item_order_details.\"shipping address longitude\",\n    item_order_details.\"shipping address region\",\n    item_order_details.\"shipping address province\",\n    item_order_details.\"fulfillment province\",\n    item_order_details.\"flag same fulfillment province\",\n    item_order_details.\"pup code\",\n    item_order_details.\"pup branch code\",\n    item_order_details.\"flag cnc brand match\",\n    item_order_details.\"delivery option\",\n    item_order_details.\"flag os size active\",\n    item_order_details.\"is os size active\",\n    item_order_details.\"flag return\",\n    item_order_details.\"return code\",\n    item_order_details.\"cancel dt\",\n    item_order_details.\"return reason\",\n    item_order_details.\"return dt\",\n    item_order_details.\"return transaction number\",\n    item_order_details.\"refund processed\",\n    item_order_details.\"allow refund\",\n    item_order_details.\"merchandise type\",\n    item_order_details.\"merchandise category\",\n    item_order_details.\"paid dt\",\n    item_order_details.\"courier fulfillment status\",\n    item_order_details.\"customer mobile\",\n    item_order_details.\"customer email\",\n    item_order_details.\"customer name\",\n    item_order_details.\"guest checkout\",\n    item_order_details.\"flag guest checkout\",\n    item_order_details.\"on manifest dt\",\n    item_order_details.\"courier notified dt\",\n    item_order_details.\"courier handed over dt\",\n    item_order_details.\"courier out on delivery dt\",\n    item_order_details.\"client missed courier dt\",\n    item_order_details.\"courier delivered dt\",\n    item_order_details.\"cnc arrived dt\",\n    item_order_details.\"cnc ready for collection dt\",\n    item_order_details.\"cnc customer collected dt\",\n    item_order_details.\"cnc customer failed collection dt\",\n    item_order_details.\"claim sent dt\",\n    item_order_details.\"claimed dt\",\n    item_order_details.\"is delivered\",\n    item_order_details.\"flag delivered\",\n    item_order_details.\"is courier delivered\",\n    item_order_details.\"flag courier delivered\",\n    item_order_details.\"is dispatched\",\n    item_order_details.\"flag dispatched\",\n    item_order_details.\"is packed\",\n    item_order_details.\"flag packed\",\n    item_order_details.\"cnc status\",\n    item_order_details.\"flag cnc missing ready date\",\n    item_order_details.\"order aging end dt adj\",\n    item_order_details.\"order aging courier end dt adj\",\n    item_order_details.\"delivery status\",\n    item_order_details.\"order placed to customer wd\",\n    item_order_details.\"order placed to customer cd\",\n    item_order_details.\"order placed to delivered wd\",\n    item_order_details.\"order placed to delivered cd\",\n    item_order_details.\"courier notified to h/o wd\",\n    item_order_details.\"courier notified to h/o cd\",\n    item_order_details.\"courier h/o to customer wd\",\n    item_order_details.\"courier h/o to customer cd\",\n    item_order_details.\"courier h/o to delivered wd\",\n    item_order_details.\"courier h/o to delivered cd\",\n    item_order_details.\"packed date to customer wd\",\n    item_order_details.\"packed date to delivered wd\",\n    item_order_details.\"packed date to delivered cd\",\n    item_order_details.\"arrived at pup to ready for collectiondt wd\",\n    item_order_details.\"arrived at pup to ready for collectiondt cd\",\n    item_order_details.\"paid to packed wd\",\n    item_order_details.\"paid to pack cd\",\n    item_order_details.\"cnc ready to collected wd\",\n    item_order_details.\"cnc ready to collected cd\",\n    item_order_details.\"cnc arrived to ready hr\",\n    item_order_details.\"cnc arrived to ready hr bins\",\n    item_order_details.\"cnc ready to collected wd bins\",\n    item_order_details.\"cnc ready to collected cd bins\",\n    item_order_details.\"order placed to customer cd bins\",\n    item_order_details.\"order placed to customer wd bins\",\n    item_order_details.\"courier notified to h/o wd bins\",\n    item_order_details.\"courier notified to h/o cd bins\",\n    item_order_details.\"courier h/o to delivered wd bins\",\n    item_order_details.\"courier h/o to delivered cd bins\",\n    item_order_details.\"customer 5wd sla\",\n    item_order_details.\"customer 5cd sla\",\n    item_order_details.\"courier 3wd sla\"\nFROM {{ source('fulfillment', 'omni_orders_fct_order_item_details') }} item_order_details\n\nLEFT OUTER JOIN {{ ref('fct_combined_costs') }} fct_combined_costs\n\nON \nfct_combined_costs.fulfillment_parcel_id = item_order_details.\"parcel no\"\n\n)\n\nSELECT * FROM order_items_with_costs", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.redshift.fulfillment.omni_orders_fct_order_item_details", "model.redshift.fct_combined_costs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_parcel_costs", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "dev", "schema": "dbt_parcel_costs", "fqn": ["redshift", "parcel_costs", "transformed", "fct_order_items_with_costs"], "unique_id": "model.redshift.fct_order_items_with_costs", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "parcel_costs/transformed/fct_order_items_with_costs.sql", "original_file_path": "models/parcel_costs/transformed/fct_order_items_with_costs.sql", "name": "fct_order_items_with_costs", "alias": "fct_order_items_with_costs", "checksum": {"name": "sha256", "checksum": "32a6b834ec81483351fa543ff88e1346e9998281f2f0ba70b22b7a0d6748163f"}, "tags": [], "refs": [["fct_combined_costs"]], "sources": [["fulfillment", "omni_orders_fct_order_item_details"]], "description": "transformed costs of all couriers combined joined with the omni order item details data", "columns": {"fulfillment_partner": {"name": "fulfillment_partner", "description": "fulfillment partner used for that order", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "fulfillment_parcel_id": {"name": "fulfillment_parcel_id", "description": "parcel number", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "fulfillment_start_date_dt": {"name": "fulfillment_start_date_dt", "description": "date of start of fulfillment process", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "date"}, "fulfillment_month_dt": {"name": "fulfillment_month_dt", "description": "month fulfillment occured", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "fulfillment_day_of_month_dt": {"name": "fulfillment_day_of_month_dt", "description": "day of month of fulfillment", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "fulfillment_day_of_week_dt": {"name": "fulfillment_day_of_week_dt", "description": "day of week of fulfillment", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "parcel_weight": {"name": "parcel_weight", "description": "weight of parcel", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "parcel_total_amount_excl": {"name": "parcel_total_amount_excl", "description": "parcel costs excluding vat", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "parcel_delivery_regulated_area": {"name": "parcel_delivery_regulated_area", "description": "area type the parcel is being delivered to regulated across partners i.e Main, Local, Regional, Outlying", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "parcel_delivery_zone": {"name": "parcel_delivery_zone", "description": "zone the parcel is being delivered to as passed through by the courier partners e.g L, R, M, Main, Local etc.", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "number_of_items": {"name": "number_of_items", "description": "number of items in parcel", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "cost_per_item": {"name": "cost_per_item", "description": "cost of fulfillment for each item in parcel", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "Order Item Id": {"name": "Order Item Id", "description": "Order Item ID to link back to the original Order Item in the Order Item table", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "id number"}, "Order No": {"name": "Order No", "description": "id field from the Order table", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "id text"}, "Order Id": {"name": "Order Id", "description": "id field from the Order table", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "id number"}, "Order Type Id": {"name": "Order Type Id", "description": "id field from the Order table", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "id number"}, "Order Type": {"name": "Order Type", "description": "salesorder, ibt etc", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "Allocation Id": {"name": "Allocation Id", "description": "gives shipping information", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "Brand": {"name": "Brand", "description": "Brand based off the brandid field", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "Brand Id": {"name": "Brand Id", "description": "id links to brand table", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "id number"}, "Operating Division": {"name": "Operating Division", "description": "Operating Division to which the brand belongs", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "Order Source": {"name": "Order Source", "description": "website where order was placed", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "Platform": {"name": "Platform", "description": "App, Web or mobile, based off order source", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "Device Category": {"name": "Device Category", "description": "desktop or mobile", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "Website": {"name": "Website", "description": "Website where order was placed", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "Order Item Status": {"name": "Order Item Status", "description": "current status of the order item", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "Order Item Status Id": {"name": "Order Item Status Id", "description": "current status id of the order item", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "id number"}, "Order Status": {"name": "Order Status", "description": "current status of the order", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "Paid Status": {"name": "Paid Status", "description": "Is Paid / Not Paid", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "flag text"}, "Flag Paid": {"name": "Flag Paid", "description": "1 if Paid, else 0", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "flag"}, "SKU": {"name": "SKU", "description": "Product SKU", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "id number"}, "Company Id": {"name": "Company Id", "description": "Company Id of the order item", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "id number"}, "Product Link": {"name": "Product Link", "description": "Combination of SKU and Company Id to link to the dim_product table", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "id text"}, "Item Type": {"name": "Item Type", "description": "Item Type", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "Payment Types": {"name": "Payment Types", "description": "list of all the payment types associated with that order", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "Flag Staff Order": {"name": "Flag Staff Order", "description": "1 if Staff Order, else 0", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "flag"}, "Is Staff Order": {"name": "Is Staff Order", "description": "Staff Order / Not Staff Order", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "flag text"}, "Is IBT": {"name": "Is IBT", "description": "Is IBT / Not IBT, derived from OrderNo", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "flag text"}, "Flag IBT": {"name": "Flag IBT", "description": "1 if IBT, else 0, derived from OrderNo", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "flag"}, "Is Future Order": {"name": "Is Future Order", "description": "Is Future Order / Not Future Order, derived from DoNotShipUntil in OrderItems", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "flag text"}, "Flag Future Order": {"name": "Flag Future Order", "description": "1 if Future Order, else 0, derived from DoNotShipUntil in OrderItems", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "flag"}, "Do Not Ship Until DT": {"name": "Do Not Ship Until DT", "description": "timestamp when order should be shipped", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "timestamp"}, "Is Furniture Order": {"name": "Is Furniture Order", "description": "Furniture / Not Furniture, derived from FulfillmentCenterId = 4", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "flag text"}, "Flag Furniture Order": {"name": "Flag Furniture Order", "description": "1 if Furniture, else 0, derived from FulfillmentCenterId = 4", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "flag"}, "Is Gift Wrapped": {"name": "Is Gift Wrapped", "description": "Is Gift Wrapped / Not Gift Wrapped", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "flag text"}, "Is Gift": {"name": "Is Gift", "description": "Gift / Not Gift", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "flag text"}, "Gift Registry No": {"name": "Gift Registry No", "description": "if not null then is on Gift Registry", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "Is On Gift Registry": {"name": "Is On Gift Registry", "description": "Gift Registry / Not Gift Registry", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "flag text"}, "Flag On Gift Registry": {"name": "Flag On Gift Registry", "description": "1 if on Gift Registry, else 0", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "flag"}, "Selling Price Orig": {"name": "Selling Price Orig", "description": "Original Selling Price", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "Selling Price Act": {"name": "Selling Price Act", "description": "Actual Selling Price", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "Selling Price Act (excl Vat)": {"name": "Selling Price Act (excl Vat)", "description": "Actual Selling Price excluding Vat", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "Discount Amount": {"name": "Discount Amount", "description": "Selling Price Orig - Selling Price Act", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "Sale Type": {"name": "Sale Type", "description": "markdown / regular", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "Vat": {"name": "Vat", "description": "Vat Amount", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "Quantity": {"name": "Quantity", "description": "Quantity (currently 1 for all items, added in in case this changes in the future)", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "FF Centre": {"name": "FF Centre", "description": "Fulfillment Centre, used for differentiating between OneStock (Store) and OTD (OTD Mid)", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "Fulfillment Centre Type Id": {"name": "Fulfillment Centre Type Id", "description": "Fulfillment Centre Type, 1 = OTD, 4 = Furniture, 6 = OneStock", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "OTD vs OS": {"name": "OTD vs OS", "description": "OTD, Onestock or Other", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "Tracking Code": {"name": "Tracking Code", "description": "only used when Fulfillment Centre Type = 6, ie OneStock", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "Parcel No": {"name": "Parcel No", "description": "derived from Carton Number for OneStock else Tracking Number", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "id text"}, "Has Parcel No": {"name": "Has Parcel No", "description": "Has Parcel No / No Parcel No", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "flag text"}, "Flag Parcel No": {"name": "Flag Parcel No", "description": "1 if there is a Parcel No, else 0", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "flag"}, "Claim Branch": {"name": "Claim Branch", "description": "Branch Number of OneStock Branch that claimed the broadcast", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "id number"}, "Is Cancelled": {"name": "Is Cancelled", "description": "Is Cancelled / Not Cancelled", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "flag text"}, "Flag Cancelled": {"name": "Flag Cancelled", "description": "1 if Order Item is Cancelled, else 0", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "flag"}, "Cancelled Status": {"name": "Cancelled Status", "description": "derived from OrderItemStatus field", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "EGS No": {"name": "EGS No", "description": "EGSBNumber", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "id text"}, "Courier": {"name": "Courier", "description": "Uses the courier from the Carton table otherwise the default courier for that company", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "Size SKU": {"name": "Size SKU", "description": "From the OS size table", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "id number"}, "Service Type": {"name": "Service Type", "description": "Delivery Type", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "Order DT": {"name": "Order DT", "description": "When Order was placed", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "timestamp"}, "Release DT": {"name": "Release DT", "description": "If there is a Do Not Ship Until Date this is used otherwise Order Placed is used", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "timestamp"}, "Packed DT": {"name": "Packed DT", "description": "OneStock Only", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "timestamp"}, "Response Status": {"name": "Response Status", "description": "OneStock Only", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "Flag CNC Order": {"name": "Flag CNC Order", "description": "1 if CNC Order (PUPCode is not null), else 0", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "flag"}, "Is CNC Order": {"name": "Is CNC Order", "description": "CNC Order / Not CNC Order", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "flag text"}, "Shipping Address Line1": {"name": "Shipping Address Line1", "description": "Shipping Address Line1", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "Shipping Address Line2": {"name": "Shipping Address Line2", "description": "Shipping Address Line2", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "Shipping Address Postal Code": {"name": "Shipping Address Postal Code", "description": "Shipping Address Postal Code", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "Shipping Address City": {"name": "Shipping Address City", "description": "Shipping Address City", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "Shipping Address Suburb": {"name": "Shipping Address Suburb", "description": "Shipping Address Suburb", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "Shipping Address Latitude": {"name": "Shipping Address Latitude", "description": "Shipping Address Latitude", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "Shipping Address Longitude": {"name": "Shipping Address Longitude", "description": "Shipping Address Longitude", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "Shipping Address Region": {"name": "Shipping Address Region", "description": "Shipping Address Region", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "Shipping Address Province": {"name": "Shipping Address Province", "description": "Shipping Address Province", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "Fulfillment Province": {"name": "Fulfillment Province", "description": "Fulfillment Province", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "Flag Same Fulfillment Province": {"name": "Flag Same Fulfillment Province", "description": "1 if Fulfillment Province = Shipping Address Province else 0", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "flag"}, "PUP Code": {"name": "PUP Code", "description": "Pick Up Code", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "PUP Branch Code": {"name": "PUP Branch Code", "description": "Branch Code for Pick Up - can be joined to dim_branches for more branch details", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "id number"}, "Flag CNC Brand Match": {"name": "Flag CNC Brand Match", "description": "1 if the item brand matches the PUP Brand brand, else 0", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "flag"}, "Delivery Option": {"name": "Delivery Option", "description": "Shipping, collection etc", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "Flag OS Size Active": {"name": "Flag OS Size Active", "description": "derived from IsActive in OS Size table", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "flag"}, "Is OS Size Active": {"name": "Is OS Size Active", "description": "Active / Inactive", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "flag text"}, "Flag Return": {"name": "Flag Return", "description": "if there is a Return Code for the item it is classified as a return", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "flag"}, "Return Code": {"name": "Return Code", "description": "any number indicates a return", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "Cancel DT": {"name": "Cancel DT", "description": "timestamp when an order item was cancelled", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "timestamp"}, "Return Reason": {"name": "Return Reason", "description": "indicates why customer returned an item", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "Return DT": {"name": "Return DT", "description": "when the return was processed", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "timestamp"}, "Return Transaction Number": {"name": "Return Transaction Number", "description": "Return Transaction Number", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "Refund Processed": {"name": "Refund Processed", "description": "1 if refund was processed", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "flag"}, "Allow Refund": {"name": "Allow Refund", "description": "1 if refund was allowed", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "flag"}, "Merchandise Type": {"name": "Merchandise Type", "description": "10000|Clothing, 11000|Technology, 12000|Cosmetics, 13000|Jewellery, 14000|Homeware, 15000|Furniture", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "Merchandise Category": {"name": "Merchandise Category", "description": "Clothing, Technology, Cosmetics, Jewellery, Homeware, Furniture", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "Paid DT": {"name": "Paid DT", "description": "timestamp when the payment was processed", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "timestamp"}, "Courier Fulfillment Status": {"name": "Courier Fulfillment Status", "description": "derived from Order Item Status", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "Customer Mobile": {"name": "Customer Mobile", "description": "temp field until we have a dim_customer table", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "Customer Email": {"name": "Customer Email", "description": "temp field until we have a dim_customer table", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "Customer Name": {"name": "Customer Name", "description": "temp field until we have a dim_customer table", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "Guest Checkout": {"name": "Guest Checkout", "description": "Guest Checkout vs Logged In Checkout", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "Flag Guest Checkout": {"name": "Flag Guest Checkout", "description": "1 if Guest Checkout, elso 0", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "flag"}, "On Manifest DT": {"name": "On Manifest DT", "description": "OneStock only", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "timestamp"}, "Courier Notified DT": {"name": "Courier Notified DT", "description": "Courier Notified DT", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "timestamp"}, "Courier Handed Over DT": {"name": "Courier Handed Over DT", "description": "Handed Over DT", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "timestamp"}, "Courier Out On Delivery DT": {"name": "Courier Out On Delivery DT", "description": "Courier Out On Delivery DT", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "timestamp"}, "Client Missed Courier DT": {"name": "Client Missed Courier DT", "description": "Client Missed Courier DT", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "timestamp"}, "Courier Delivered DT": {"name": "Courier Delivered DT", "description": "Courier Delivered DT", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "timestamp"}, "CNC Arrived DT": {"name": "CNC Arrived DT", "description": "CNC Arrived DT", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "timestamp"}, "CNC Ready For Collection DT": {"name": "CNC Ready For Collection DT", "description": "CNC Ready For Collection DT", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "timestamp"}, "CNC Customer Collected DT": {"name": "CNC Customer Collected DT", "description": "CNC Customer Collected DT", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "timestamp"}, "CNC Customer Failed Collection DT": {"name": "CNC Customer Failed Collection DT", "description": "CNC Customer Failed Collection DT", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "timestamp"}, "Claim Sent DT": {"name": "Claim Sent DT", "description": "Claim Sent DT", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "timestamp"}, "Claimed DT": {"name": "Claimed DT", "description": "Claimed DT", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "timestamp"}, "Return Handed Over DT": {"name": "Return Handed Over DT", "description": "Return Handed Over DT", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "timestamp"}, "Is Delivered": {"name": "Is Delivered", "description": "Delivered / Not Delivered", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "flag text"}, "Flag Delivered": {"name": "Flag Delivered", "description": "1 if Delivered, else 0", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "flag"}, "Is Courier Delivered": {"name": "Is Courier Delivered", "description": "Courier Delivered / Courier Not Delivered", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "flag text"}, "Flag Courier Delivered": {"name": "Flag Courier Delivered", "description": "1 if Courier Delivered, else 0", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "flag"}, "Is Dispatched": {"name": "Is Dispatched", "description": "Dispatched / Not Dispatched", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "flag text"}, "Flag Dispatched": {"name": "Flag Dispatched", "description": "1 if Dispatched, else 0", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "flag"}, "Is Packed": {"name": "Is Packed", "description": "Packed / Not Packed", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "flag text"}, "Flag Packed": {"name": "Flag Packed", "description": "1 if Packed, else 0", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "flag"}, "CNC Status": {"name": "CNC Status", "description": "Click and Collect Order Status", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "Flag CNC Missing Ready Date": {"name": "Flag CNC Missing Ready Date", "description": "CNC Ready For Collection DT is null", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "flag"}, "Order Aging Courier End DT Adj": {"name": "Order Aging Courier End DT Adj", "description": "Used in ageing calculations", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "timestamp"}, "Order Aging End DT Adj": {"name": "Order Aging End DT Adj", "description": "Used in ageing calculations", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "timestamp"}, "Delivery Status": {"name": "Delivery Status", "description": "Delivery Status", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "Order Placed to Customer WD": {"name": "Order Placed to Customer WD", "description": "number of working days between Order Released and Customer receiving the item", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "Order Placed to Customer CD": {"name": "Order Placed to Customer CD", "description": "number of calendar days between Order Released and Customer receiving the item", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "Order Placed to Delivered WD": {"name": "Order Placed to Delivered WD", "description": "number of working days between Order Released and Courier delivering the item", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "Order Placed to Delivered CD": {"name": "Order Placed to Delivered CD", "description": "number of calendar days between Order Released and Courier delivering the item", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "Courier Notified to H/O WD": {"name": "Courier Notified to H/O WD", "description": "number of working days between Courier Notified and Courier handing over the item", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "Courier Notified to H/O CD": {"name": "Courier Notified to H/O CD", "description": "number of calendar days between Courier Notified and Courier handing over the item", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "Courier H/O to Customer WD": {"name": "Courier H/O to Customer WD", "description": "number of working days between Courier handing over and Customer receiving the item", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "Courier H/O to Customer CD": {"name": "Courier H/O to Customer CD", "description": "number of calendar days between Courierhanding over and Customer receiving the item", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "Courier H/O to Delivered WD": {"name": "Courier H/O to Delivered WD", "description": "number of working days between Courier handing over and Courier delivering the item", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "Courier H/O to Delivered CD": {"name": "Courier H/O to Delivered CD", "description": "number of calendar days between Courierhanding over and Courier delivering the item", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "Packed Date to Customer WD": {"name": "Packed Date to Customer WD", "description": "number of working days between store packing and Customer receiving the item", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "Packed Date to Customer CD": {"name": "Packed Date to Customer CD", "description": "number of calendar days between store packing and Customer receiving the item", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "Packed Date to Delivered WD": {"name": "Packed Date to Delivered WD", "description": "number of working days between store packing and Courier delivering the item", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "Packed Date to Delivered CD": {"name": "Packed Date to Delivered CD", "description": "number of calendar days between store packing and Courier delivering the item", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "Arrived at PUP to Ready for Collection WD": {"name": "Arrived at PUP to Ready for Collection WD", "description": "number of working days between CNC Arrived DT and CNC Ready For Collection DT", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "Arrived at PUP to Ready for Collection CD": {"name": "Arrived at PUP to Ready for Collection CD", "description": "number of calendar days between CNC Arrived DT and CNC Ready For Collection DT", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "Paid to Packed WD": {"name": "Paid to Packed WD", "description": "number of working days between Paid DT and Packed DT", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "Paid to Packed CD": {"name": "Paid to Packed CD", "description": "number of calendar days between Paid DT and Packed DT", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "CNC Ready to Collected WD": {"name": "CNC Ready to Collected WD", "description": "number of working days between CNC Ready For Collection DT and CNC Customer Collected DT", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "CNC Ready to Collected CD": {"name": "CNC Ready to Collected CD", "description": "number of calendar days between CNC Ready For Collection DT and CNC Customer Collected DT", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "CNC Arrived to Ready HR": {"name": "CNC Arrived to Ready HR", "description": "number of hours between CNC Arrived DT and CNC Ready For Collection DT", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "CNC Arrived to Ready HR Bins": {"name": "CNC Arrived to Ready HR Bins", "description": "CNC Arrived to Ready HR into bins (0-1, 1-4, 4-8, 8-24, 24-48, 48+)", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "bins"}, "CNC Ready to Collected WD Bins": {"name": "CNC Ready to Collected WD Bins", "description": "CNC Ready to Collected WD into bins (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9+)", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "bins"}, "CNC Ready to Collected CD Bins": {"name": "CNC Ready to Collected CD Bins", "description": "CNC Ready to Collected CD into bins (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9+)", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "bins"}, "Order Placed to Customer WD Bins": {"name": "Order Placed to Customer WD Bins", "description": "Order Placed to Customer WD into bins (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9+)", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "bins"}, "Order Placed to Customer CD Bins": {"name": "Order Placed to Customer CD Bins", "description": "Order Placed to Customer CD into bins (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9+)", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "bins"}, "Courier Notified to H/O WD Bins": {"name": "Courier Notified to H/O WD Bins", "description": "Courier Notified to H/O WD into bins (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9+)", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "bins"}, "Courier Notified to H/O CD Bins": {"name": "Courier Notified to H/O CD Bins", "description": "Courier Notified to H/O CD into bins (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9+)", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "bins"}, "Courier H/O to Delivered WD Bins": {"name": "Courier H/O to Delivered WD Bins", "description": "Courier H/O to Delivered WD into bins (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9+)", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "bins"}, "Customer 5WD SLA": {"name": "Customer 5WD SLA", "description": "In SLA if Order Placed to Customer WD < 6", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "flag text"}, "Customer 5CD SLA": {"name": "Customer 5CD SLA", "description": "In SLA if Order Placed to Customer CD < 6", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "flag text"}, "Courier 3WD SLA": {"name": "Courier 3WD SLA", "description": "In SLA if Courier H/O to Delivered WD < 4", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "flag text"}}, "meta": {}, "docs": {"show": true}, "patch_path": "redshift://models/parcel_costs/transformed/transformed.yml", "compiled_path": "target/compiled/redshift/models/parcel_costs/transformed/fct_order_items_with_costs.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_parcel_costs", "materialized": "table"}, "created_at": 1649755425.016931, "compiled_sql": "\n\nWITH \norder_items_with_costs as \n(\nSELECT \n    fct_combined_costs.fulfillment_partner,\n    fct_combined_costs.fulfillment_parcel_id,\n    fct_combined_costs.fulfillment_start_date_dt,\n    fct_combined_costs.fulfillment_month_dt,\n    fct_combined_costs.fulfillment_day_of_month_dt,\n    fct_combined_costs.fulfillment_day_of_week,\n    fct_combined_costs.parcel_weight,\n    fct_combined_costs.parcel_total_amount_excl,\n    fct_combined_costs.parcel_delivery_regulated_area,\n    fct_combined_costs.parcel_delivery_zone,\n    fct_combined_costs.number_of_items,\n    fct_combined_costs.cost_per_item,\n\n    item_order_details.\"order item id\",\n    item_order_details.\"order no\",\n    item_order_details.\"order id\",\n    item_order_details.\"order type id\",\n    item_order_details.\"order type\",\n    item_order_details.\"allocation id\",\n    item_order_details.\"brand\",\n    item_order_details.\"brand id\",\n    item_order_details.\"operating division\",\n    item_order_details.\"order source\",\n    item_order_details.\"platform\",\n    item_order_details.\"device category\",\n    item_order_details.\"website\",\n    item_order_details.\"order item status\",\n    item_order_details.\"order item status id\",\n    item_order_details.\"order status\",\n    item_order_details.\"paid status\",\n    item_order_details.\"flag paid\",\n    item_order_details.\"sku\",\n    item_order_details.\"company id\",\n    item_order_details.\"product link\",\n    item_order_details.\"item type\",\n    item_order_details.\"payment types\",\n    item_order_details.\"flag staff order\",\n    item_order_details.\"is staff order\",\n    item_order_details.\"is ibt\",\n    item_order_details.\"flag ibt\",\n    item_order_details.\"is future order\",\n    item_order_details.\"flag future order\",\n    item_order_details.\"is furniture order\",\n    item_order_details.\"flag furniture order\",\n    item_order_details.\"is gift wrapped\",\n    item_order_details.\"is gift\",\n    item_order_details.\"is on gift registry\",\n    item_order_details.\"flag on gift registry\",\n    item_order_details.\"selling price orig\",\n    item_order_details.\"selling price act\",\n    item_order_details.\"selling price act (excl vat)\",\n    item_order_details.\"discount amount\",\n    item_order_details.\"sale type\",\n    item_order_details.\"vat\",\n    item_order_details.\"quantity\",\n    item_order_details.\"ff centre\",\n    item_order_details.\"fulfillment centre type id\",\n    item_order_details.\"otd vs os\",\n    item_order_details.\"tracking code\",\n    item_order_details.\"parcel no\",\n    item_order_details.\"has parcel no\",\n    item_order_details.\"flag parcel no\",\n    item_order_details.\"claim branch\",\n    item_order_details.\"is cancelled\",\n    item_order_details.\"flag cancelled\",\n    item_order_details.\"cancelled status\",\n    item_order_details.\"egs no\",\n    item_order_details.\"courier\",\n    item_order_details.\"size sku\",\n    item_order_details.\"service type\",\n    item_order_details.\"order dt\",\n    item_order_details.\"release dt\",\n    item_order_details.\"packed dt\",\n    item_order_details.\"response status\",\n    item_order_details.\"flag cnc order\",\n    item_order_details.\"is cnc order\",\n    item_order_details.\"shipping address line1\",\n    item_order_details.\"shipping address line2\",\n    item_order_details.\"shipping address postal code\",\n    item_order_details.\"shipping address city\",\n    item_order_details.\"shipping address latitude\",\n    item_order_details.\"shipping address longitude\",\n    item_order_details.\"shipping address region\",\n    item_order_details.\"shipping address province\",\n    item_order_details.\"fulfillment province\",\n    item_order_details.\"flag same fulfillment province\",\n    item_order_details.\"pup code\",\n    item_order_details.\"pup branch code\",\n    item_order_details.\"flag cnc brand match\",\n    item_order_details.\"delivery option\",\n    item_order_details.\"flag os size active\",\n    item_order_details.\"is os size active\",\n    item_order_details.\"flag return\",\n    item_order_details.\"return code\",\n    item_order_details.\"cancel dt\",\n    item_order_details.\"return reason\",\n    item_order_details.\"return dt\",\n    item_order_details.\"return transaction number\",\n    item_order_details.\"refund processed\",\n    item_order_details.\"allow refund\",\n    item_order_details.\"merchandise type\",\n    item_order_details.\"merchandise category\",\n    item_order_details.\"paid dt\",\n    item_order_details.\"courier fulfillment status\",\n    item_order_details.\"customer mobile\",\n    item_order_details.\"customer email\",\n    item_order_details.\"customer name\",\n    item_order_details.\"guest checkout\",\n    item_order_details.\"flag guest checkout\",\n    item_order_details.\"on manifest dt\",\n    item_order_details.\"courier notified dt\",\n    item_order_details.\"courier handed over dt\",\n    item_order_details.\"courier out on delivery dt\",\n    item_order_details.\"client missed courier dt\",\n    item_order_details.\"courier delivered dt\",\n    item_order_details.\"cnc arrived dt\",\n    item_order_details.\"cnc ready for collection dt\",\n    item_order_details.\"cnc customer collected dt\",\n    item_order_details.\"cnc customer failed collection dt\",\n    item_order_details.\"claim sent dt\",\n    item_order_details.\"claimed dt\",\n    item_order_details.\"is delivered\",\n    item_order_details.\"flag delivered\",\n    item_order_details.\"is courier delivered\",\n    item_order_details.\"flag courier delivered\",\n    item_order_details.\"is dispatched\",\n    item_order_details.\"flag dispatched\",\n    item_order_details.\"is packed\",\n    item_order_details.\"flag packed\",\n    item_order_details.\"cnc status\",\n    item_order_details.\"flag cnc missing ready date\",\n    item_order_details.\"order aging end dt adj\",\n    item_order_details.\"order aging courier end dt adj\",\n    item_order_details.\"delivery status\",\n    item_order_details.\"order placed to customer wd\",\n    item_order_details.\"order placed to customer cd\",\n    item_order_details.\"order placed to delivered wd\",\n    item_order_details.\"order placed to delivered cd\",\n    item_order_details.\"courier notified to h/o wd\",\n    item_order_details.\"courier notified to h/o cd\",\n    item_order_details.\"courier h/o to customer wd\",\n    item_order_details.\"courier h/o to customer cd\",\n    item_order_details.\"courier h/o to delivered wd\",\n    item_order_details.\"courier h/o to delivered cd\",\n    item_order_details.\"packed date to customer wd\",\n    item_order_details.\"packed date to delivered wd\",\n    item_order_details.\"packed date to delivered cd\",\n    item_order_details.\"arrived at pup to ready for collectiondt wd\",\n    item_order_details.\"arrived at pup to ready for collectiondt cd\",\n    item_order_details.\"paid to packed wd\",\n    item_order_details.\"paid to pack cd\",\n    item_order_details.\"cnc ready to collected wd\",\n    item_order_details.\"cnc ready to collected cd\",\n    item_order_details.\"cnc arrived to ready hr\",\n    item_order_details.\"cnc arrived to ready hr bins\",\n    item_order_details.\"cnc ready to collected wd bins\",\n    item_order_details.\"cnc ready to collected cd bins\",\n    item_order_details.\"order placed to customer cd bins\",\n    item_order_details.\"order placed to customer wd bins\",\n    item_order_details.\"courier notified to h/o wd bins\",\n    item_order_details.\"courier notified to h/o cd bins\",\n    item_order_details.\"courier h/o to delivered wd bins\",\n    item_order_details.\"courier h/o to delivered cd bins\",\n    item_order_details.\"customer 5wd sla\",\n    item_order_details.\"customer 5cd sla\",\n    item_order_details.\"courier 3wd sla\"\nFROM \"dev\".\"exasol\".\"omni_orders_fct_order_item_details\" item_order_details\n\nLEFT OUTER JOIN \"dev\".\"dbt_parcel_costs\".\"fct_combined_costs\" fct_combined_costs\n\nON \nfct_combined_costs.fulfillment_parcel_id = item_order_details.\"parcel no\"\n\n)\n\nSELECT * FROM order_items_with_costs", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_parcel_costs\".\"fct_order_items_with_costs\""}, "model.redshift.fct_ram_costs": {"raw_sql": "{{\n  config(\n    materialized='table'\n  )\n}}\n\nWITH \ntransformed_ram_costs as \n(   \n    SELECT \n        transformed_ram_costs.date_dt                                   as fulfillment_start_date_dt,\n        transformed_ram_costs.month_dt                                  as fulfillment_start_month_dt,\n        transformed_ram_costs.day_of_month_dt                           as fulfillment_start_day_of_month_dt,\n        transformed_ram_costs.day_of_week_dt                            as fulfillment_start_day_of_week_dt,\n        transformed_ram_costs.time_dt                                   as fulfillment_start_time_dt,\n        transformed_ram_costs.consignment                               as consigment,\n        transformed_ram_costs.hub_a                                     as hub_a,\n        transformed_ram_costs.hub_b                                     as hub_b,\n        transformed_ram_costs.area                                      as area,\n        transformed_ram_costs.parcels                                   as number_of_parcels,\n        transformed_ram_costs.weight                                    as parcel_weight,\n        transformed_ram_costs.vol_weight                                as parcel_vol_weight,\n        transformed_ram_costs.charge_kg                                 as parcel_charge_kg,\n        transformed_ram_costs.service                                   as service,\n        transformed_ram_costs.basic_rate                                as parcel_basic_rate,\n        transformed_ram_costs.fuel_surcharge                            as parcel_fuel_surcharge,\n        transformed_ram_costs.s_surcharge                               as parcel_s_surcharge,\n        transformed_ram_costs.township_charge                           as parcel_township_charge,\n        transformed_ram_costs.sub_total                                 as parcel_sub_total,\n        transformed_ram_costs.vat                                       as parcel_vat,\n        transformed_ram_costs.total                                     as parcel_total,\n        transformed_ram_costs.date_dt                                   as parcel_delivery_date_dt,\n        transformed_ram_costs.duration_of_fulfillment                   as duration_of_fulfillment,\n        item_order_details.\"parcel no\"                                  as parcel_no,\n        COUNT(item_order_details.\"parcel no\")                           as number_of_items,\n        (parcel_sub_total / number_of_items)::DECIMAL(10,2)             as cost_per_item\n    FROM\n        {{ ref('stg_ram_costs') }} transformed_ram_costs\n    JOIN \n        {{ source('fulfillment', 'omni_orders_fct_order_item_details') }} item_order_details\n    ON \n        item_order_details.\"parcel no\" = consignment\n    GROUP BY \n        fulfillment_start_date_dt, fulfillment_start_month_dt, fulfillment_start_day_of_month_dt, fulfillment_start_day_of_week_dt, fulfillment_start_time_dt, consignment, \n        hub_a, hub_b, area, number_of_parcels, parcel_weight, parcel_vol_weight, parcel_charge_kg, \n        service, parcel_basic_rate, parcel_fuel_surcharge, parcel_s_surcharge, parcel_township_charge, parcel_sub_total, parcel_vat,\n        parcel_total, parcel_delivery_date_dt, duration_of_fulfillment, parcel_no\n\n)\nSELECT * FROM transformed_ram_costs", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.redshift.fulfillment.omni_orders_fct_order_item_details", "model.redshift.stg_ram_costs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_parcel_costs", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "dev", "schema": "dbt_parcel_costs", "fqn": ["redshift", "parcel_costs", "transformed", "fct_ram_costs"], "unique_id": "model.redshift.fct_ram_costs", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "parcel_costs/transformed/fct_ram_costs.sql", "original_file_path": "models/parcel_costs/transformed/fct_ram_costs.sql", "name": "fct_ram_costs", "alias": "fct_ram_costs", "checksum": {"name": "sha256", "checksum": "d4707d872e33a92d22254b9877b9cd7b81d4537078e0dc92e1053dda2754af33"}, "tags": [], "refs": [["stg_ram_costs"]], "sources": [["fulfillment", "omni_orders_fct_order_item_details"]], "description": "ram transformed data with item costs", "columns": {"fulfillment_start_date_dt": {"name": "fulfillment_start_date_dt", "description": "date of start of fulfillment process", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "date"}, "fulfillment_start_month_dt": {"name": "fulfillment_start_month_dt", "description": "month fulfillment occured", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "fulfillment_start_day_of_month_dt": {"name": "fulfillment_start_day_of_month_dt", "description": "day of month of fulfillment", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "fulfillment_start_day_of_week_dt": {"name": "fulfillment_start_day_of_week_dt", "description": "day of week of fulfillment", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "fulfillment_start_time_dt": {"name": "fulfillment_start_time_dt", "description": "time of start of fulfillment process", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "time"}, "consignment": {"name": "consignment", "description": "parcel number", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "hub_a": {"name": "hub_a", "description": "hub center the parcel is coming from e.g CPT", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "hub_b": {"name": "hub_b", "description": "hub center the parcel is going to E.G DBN", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "area": {"name": "area", "description": "area the parcel is being delivered to E.G L for local", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "number_of_parcels": {"name": "number_of_parcels", "description": "number of parcels in the entire order", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "parcel_weight": {"name": "parcel_weight", "description": "weight of parcel", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "parcel_vol_weight": {"name": "parcel_vol_weight", "description": "volume weight of parcel", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "parcel_charge_kg": {"name": "parcel_charge_kg", "description": "parcel chargeable weight", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "service": {"name": "service", "description": "service type", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "parcel_basic_rate": {"name": "parcel_basic_rate", "description": "basic rate charged for parcel", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "parcel_fuel_surcharge": {"name": "parcel_fuel_surcharge", "description": "parcel fuel surcharge", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "parcel_s_surcharge": {"name": "parcel_s_surcharge", "description": "s surcharge?", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "parcel_township_charge": {"name": "parcel_township_charge", "description": "charge added due to delivery in specific zones", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "parcel_sub_total": {"name": "parcel_sub_total", "description": "parcel costs excluding vat", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "parcel_vat": {"name": "parcel_vat", "description": "vat", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "parcel_total": {"name": "parcel_total", "description": "parcel costs including vat", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "parcel_delivery_date_dt": {"name": "parcel_delivery_date_dt", "description": "parcel delivery date", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "date"}, "duration_of_fulfillment": {"name": "duration_of_fulfillment", "description": "number of days taken from approval to delivery of a parcel", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "parcel_no": {"name": "parcel_no", "description": "parcel number", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "text"}, "number_of_items": {"name": "number_of_items", "description": "number of items in parcel", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}, "cost_per_item": {"name": "cost_per_item", "description": "cost of fulfillment for each item in parcel", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "number"}}, "meta": {}, "docs": {"show": true}, "patch_path": "redshift://models/parcel_costs/transformed/transformed.yml", "compiled_path": "target/compiled/redshift/models/parcel_costs/transformed/fct_ram_costs.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_parcel_costs", "materialized": "table"}, "created_at": 1649755424.965308, "compiled_sql": "\n\nWITH \ntransformed_ram_costs as \n(   \n    SELECT \n        transformed_ram_costs.date_dt                                   as fulfillment_start_date_dt,\n        transformed_ram_costs.month_dt                                  as fulfillment_start_month_dt,\n        transformed_ram_costs.day_of_month_dt                           as fulfillment_start_day_of_month_dt,\n        transformed_ram_costs.day_of_week_dt                            as fulfillment_start_day_of_week_dt,\n        transformed_ram_costs.time_dt                                   as fulfillment_start_time_dt,\n        transformed_ram_costs.consignment                               as consigment,\n        transformed_ram_costs.hub_a                                     as hub_a,\n        transformed_ram_costs.hub_b                                     as hub_b,\n        transformed_ram_costs.area                                      as area,\n        transformed_ram_costs.parcels                                   as number_of_parcels,\n        transformed_ram_costs.weight                                    as parcel_weight,\n        transformed_ram_costs.vol_weight                                as parcel_vol_weight,\n        transformed_ram_costs.charge_kg                                 as parcel_charge_kg,\n        transformed_ram_costs.service                                   as service,\n        transformed_ram_costs.basic_rate                                as parcel_basic_rate,\n        transformed_ram_costs.fuel_surcharge                            as parcel_fuel_surcharge,\n        transformed_ram_costs.s_surcharge                               as parcel_s_surcharge,\n        transformed_ram_costs.township_charge                           as parcel_township_charge,\n        transformed_ram_costs.sub_total                                 as parcel_sub_total,\n        transformed_ram_costs.vat                                       as parcel_vat,\n        transformed_ram_costs.total                                     as parcel_total,\n        transformed_ram_costs.date_dt                                   as parcel_delivery_date_dt,\n        transformed_ram_costs.duration_of_fulfillment                   as duration_of_fulfillment,\n        item_order_details.\"parcel no\"                                  as parcel_no,\n        COUNT(item_order_details.\"parcel no\")                           as number_of_items,\n        (parcel_sub_total / number_of_items)::DECIMAL(10,2)             as cost_per_item\n    FROM\n        \"dev\".\"dbt_parcel_costs_staging\".\"stg_ram_costs\" transformed_ram_costs\n    JOIN \n        \"dev\".\"exasol\".\"omni_orders_fct_order_item_details\" item_order_details\n    ON \n        item_order_details.\"parcel no\" = consignment\n    GROUP BY \n        fulfillment_start_date_dt, fulfillment_start_month_dt, fulfillment_start_day_of_month_dt, fulfillment_start_day_of_week_dt, fulfillment_start_time_dt, consignment, \n        hub_a, hub_b, area, number_of_parcels, parcel_weight, parcel_vol_weight, parcel_charge_kg, \n        service, parcel_basic_rate, parcel_fuel_surcharge, parcel_s_surcharge, parcel_township_charge, parcel_sub_total, parcel_vat,\n        parcel_total, parcel_delivery_date_dt, duration_of_fulfillment, parcel_no\n\n)\nSELECT * FROM transformed_ram_costs", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_parcel_costs\".\"fct_ram_costs\""}, "model.redshift.base_ram_costs": {"raw_sql": "WITH \n    ram_parcel_costs as(\n    SELECT\n        to_date(\"date\", 'DD/MM/YYYY')                                                       as \"date_dt\",\n        cast(to_char(to_timestamp(time::text, 'HH12:MI:SS am'), 'HH24:MI:SS') as time)      as time_dt,\n        \"consignment\",\n        \"suburb a\"                                                                          as suburb_a,\n        \"hub a\"                                                                             as hub_a,\n        \"suburb b\"                                                                          as suburb_b,\n        \"hub b\"                                                                             as hub_b,\n        area,\n        parcels,\n        weight,\n        \"vol weight\"                                                                        as vol_weight,\n        \"charge kg\"                                                                         as charge_kg,\n        service,\n        {{trim_unwanted_characters('\"basic rate\"')}}                                        as basic_rate,\n        {{trim_unwanted_characters('\"fuel surcharge\"')}}                                    as fuel_surcharge,\n        {{trim_unwanted_characters('\"waybill charge\"')}}                                    as waybill_charge,\n        {{trim_unwanted_characters('\"s surcharge\"')}}                                       as s_surcharge,\n        {{trim_unwanted_characters('\"saturday charge\"')}}                                   as saturday_charge,\n        {{trim_unwanted_characters('\"after hours charge\"')}}                                as after_hours_charge,\n        {{trim_unwanted_characters('\"armoured vehicle charge\"')}}                           as armoured_vehicle_charge,\n        {{trim_unwanted_characters('\"card assembly charge\"')}}                              as card_assembly_charge,\n        {{trim_unwanted_characters('\"township charge\"')}}                                   as township_charge,\n        {{trim_unwanted_characters('\"insured value\"')}}                                     as insured_value,\n        {{trim_unwanted_characters('\"sub total\"')}}                                         as sub_total,\n        {{trim_unwanted_characters('vat')}}                                                 as vat,\n        {{trim_unwanted_characters('total')}}                                               as total,\n        {{trim_unwanted_characters('delivered')}}                                           as delivered_dt\nFROM\n  \n  {{ source('ram', 'ram_parcel_costs') }} \n)\n\nSELECT * FROM ram_parcel_costs", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.redshift.trim_unwanted_characters"], "nodes": ["source.redshift.ram.ram_parcel_costs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_parcel_costs_staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "dev", "schema": "dbt_parcel_costs_staging", "fqn": ["redshift", "parcel_costs", "base", "base_ram_costs"], "unique_id": "model.redshift.base_ram_costs", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "parcel_costs/base/base_ram_costs.sql", "original_file_path": "models/parcel_costs/base/base_ram_costs.sql", "name": "base_ram_costs", "alias": "base_ram_costs", "checksum": {"name": "sha256", "checksum": "4edb09667995b2ea164b91a1393929104ab18ebbda3c76dd318f791f654bf10d"}, "tags": [], "refs": [], "sources": [["ram", "ram_parcel_costs"]], "description": "ram base parcel costs", "columns": {}, "meta": {}, "docs": {"show": false}, "patch_path": "redshift://models/parcel_costs/base/base.yml", "compiled_path": "target/compiled/redshift/models/parcel_costs/base/base_ram_costs.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_parcel_costs_staging", "materialized": "view"}, "created_at": 1649755425.02796, "compiled_sql": "WITH \n    ram_parcel_costs as(\n    SELECT\n        to_date(\"date\", 'DD/MM/YYYY')                                                       as \"date_dt\",\n        cast(to_char(to_timestamp(time::text, 'HH12:MI:SS am'), 'HH24:MI:SS') as time)      as time_dt,\n        \"consignment\",\n        \"suburb a\"                                                                          as suburb_a,\n        \"hub a\"                                                                             as hub_a,\n        \"suburb b\"                                                                          as suburb_b,\n        \"hub b\"                                                                             as hub_b,\n        area,\n        parcels,\n        weight,\n        \"vol weight\"                                                                        as vol_weight,\n        \"charge kg\"                                                                         as charge_kg,\n        service,\n        \n\n   TRIM('R, ' FROM \"basic rate\")\n\n\n                                        as basic_rate,\n        \n\n   TRIM('R, ' FROM \"fuel surcharge\")\n\n\n                                    as fuel_surcharge,\n        \n\n   TRIM('R, ' FROM \"waybill charge\")\n\n\n                                    as waybill_charge,\n        \n\n   TRIM('R, ' FROM \"s surcharge\")\n\n\n                                       as s_surcharge,\n        \n\n   TRIM('R, ' FROM \"saturday charge\")\n\n\n                                   as saturday_charge,\n        \n\n   TRIM('R, ' FROM \"after hours charge\")\n\n\n                                as after_hours_charge,\n        \n\n   TRIM('R, ' FROM \"armoured vehicle charge\")\n\n\n                           as armoured_vehicle_charge,\n        \n\n   TRIM('R, ' FROM \"card assembly charge\")\n\n\n                              as card_assembly_charge,\n        \n\n   TRIM('R, ' FROM \"township charge\")\n\n\n                                   as township_charge,\n        \n\n   TRIM('R, ' FROM \"insured value\")\n\n\n                                     as insured_value,\n        \n\n   TRIM('R, ' FROM \"sub total\")\n\n\n                                         as sub_total,\n        \n\n   TRIM('R, ' FROM vat)\n\n\n                                                 as vat,\n        \n\n   TRIM('R, ' FROM total)\n\n\n                                               as total,\n        \n\n   TRIM('R, ' FROM delivered)\n\n\n                                           as delivered_dt\nFROM\n  \n  \"dev\".\"dbt_tsitsi\".\"ram_parcel_costs\" \n)\n\nSELECT * FROM ram_parcel_costs", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_parcel_costs_staging\".\"base_ram_costs\""}, "model.redshift.base_rtt_costs": {"raw_sql": "WITH \nrtt_parcel_costs as\n(\n    SELECT\n        client,\n        cast(\"date\" as date)                                              as date_dt,\n        \"carton number\"                                                   as parcel_number,\n        \"sender suburb\"                                                   as sender_suburb,\n        \"sender hub\"                                                      as sender_hub,\n        \"sender area\"                                                     as sender_area,\n        \"consignee suburb\"                                                as consignee_suburb,\n        \"consignee hub\"                                                   as consignee_hub,\n        \"consignee area\"                                                  as consignee_area,\n        area,\n        \"route\",\n        svl,\n        \"nr parcels\"                                                      as nr_parcels, \n        \"actual weight\"                                                   as actual_weight,\n        \"volume weight\"                                                   as volume_weight,\n        \"weight billed\"                                                   as weight_billed,\n        \" min. chge \"                                                     as \"min_change\",\n        \"add on kg\"                                                       as add_on_kg,\n        {{trim_unwanted_characters('\"rate/ kg\"')}}                        as rate_per_kg,\n        {{trim_unwanted_characters('\"rate charge\"')}}                     as rate_charge,\n        {{trim_unwanted_characters('\"outlying rate charge\"')}}            as outlying_rate_charge,\n        {{trim_unwanted_characters('\" subtotal \"')}}                      as subtotal,\n        {{trim_unwanted_characters('\" fuel surcharge \"')}}                as fuel_surcharge,\n        {{trim_unwanted_characters('\" total exclusive \"')}}               as total_exclusive,\n        {{trim_unwanted_characters('\" vat \"')}}                           as vat,\n        {{trim_unwanted_characters('\" total inclusive \"')}}               as total_inclusive\nFROM\n  \n  {{ source('one_stock', 'one_stock_parcel_costs') }}\n)\nSELECT * FROM rtt_parcel_costs", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.redshift.trim_unwanted_characters"], "nodes": ["source.redshift.one_stock.one_stock_parcel_costs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_parcel_costs_staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "dev", "schema": "dbt_parcel_costs_staging", "fqn": ["redshift", "parcel_costs", "base", "base_rtt_costs"], "unique_id": "model.redshift.base_rtt_costs", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "parcel_costs/base/base_rtt_costs.sql", "original_file_path": "models/parcel_costs/base/base_rtt_costs.sql", "name": "base_rtt_costs", "alias": "base_rtt_costs", "checksum": {"name": "sha256", "checksum": "c751c2c99815c38df2f701bb0fd0cd0aa9af969e936d7a9a0f6033367547ab31"}, "tags": [], "refs": [], "sources": [["one_stock", "one_stock_parcel_costs"]], "description": "rtt base parcel costs", "columns": {}, "meta": {}, "docs": {"show": false}, "patch_path": "redshift://models/parcel_costs/base/base.yml", "compiled_path": "target/compiled/redshift/models/parcel_costs/base/base_rtt_costs.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_parcel_costs_staging", "materialized": "view"}, "created_at": 1649755425.028178, "compiled_sql": "WITH \nrtt_parcel_costs as\n(\n    SELECT\n        client,\n        cast(\"date\" as date)                                              as date_dt,\n        \"carton number\"                                                   as parcel_number,\n        \"sender suburb\"                                                   as sender_suburb,\n        \"sender hub\"                                                      as sender_hub,\n        \"sender area\"                                                     as sender_area,\n        \"consignee suburb\"                                                as consignee_suburb,\n        \"consignee hub\"                                                   as consignee_hub,\n        \"consignee area\"                                                  as consignee_area,\n        area,\n        \"route\",\n        svl,\n        \"nr parcels\"                                                      as nr_parcels, \n        \"actual weight\"                                                   as actual_weight,\n        \"volume weight\"                                                   as volume_weight,\n        \"weight billed\"                                                   as weight_billed,\n        \" min. chge \"                                                     as \"min_change\",\n        \"add on kg\"                                                       as add_on_kg,\n        \n\n   TRIM('R, ' FROM \"rate/ kg\")\n\n\n                        as rate_per_kg,\n        \n\n   TRIM('R, ' FROM \"rate charge\")\n\n\n                     as rate_charge,\n        \n\n   TRIM('R, ' FROM \"outlying rate charge\")\n\n\n            as outlying_rate_charge,\n        \n\n   TRIM('R, ' FROM \" subtotal \")\n\n\n                      as subtotal,\n        \n\n   TRIM('R, ' FROM \" fuel surcharge \")\n\n\n                as fuel_surcharge,\n        \n\n   TRIM('R, ' FROM \" total exclusive \")\n\n\n               as total_exclusive,\n        \n\n   TRIM('R, ' FROM \" vat \")\n\n\n                           as vat,\n        \n\n   TRIM('R, ' FROM \" total inclusive \")\n\n\n               as total_inclusive\nFROM\n  \n  \"dev\".\"dbt_tsitsi\".\"one_stock_parcel_costs\"\n)\nSELECT * FROM rtt_parcel_costs", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_parcel_costs_staging\".\"base_rtt_costs\""}, "model.redshift.base_otd_costs": {"raw_sql": "WITH \n    otd_parcel_costs as( \n    SELECT\n        shipmentid                                                                      as shipment_id,\n        parcelid                                                                        as parcel_id,\n        poadate                                                                         as poa_date_dt,\n        trunc(dateadd(d, cast(split_part(poa_date_dt, '.', 1) as int), '1899-12-30'))   as poa_date_part_dt,\n        cast(concat('0.', split_part(poa_date_dt, '.', 2)) as numeric(17,5))            as poa_date_time_dt,\n        pohdate                                                                         as poh_date_dt,\n        trunc(dateadd(d, cast(split_part(poh_date_dt, '.', 1) as int), '1899-12-30'))   as poh_date_part_dt,\n        cast(concat('0.',split_part(poh_date_dt, '.', 2)) as numeric(17,5))             as poh_date_time_dt,\n        primarycustomerid                                                               as primary_customer_id,\n        client                                                                          as client,\n        \"sender name\"                                                                   as sender_name,\n        \"length\"                                                                        as \"length\",\n        \"width\"                                                                         as \"width\",\n        \"height\"                                                                        as \"height\",\n        \"weight\"                                                                        as \"weight\",\n        chargeablemass                                                                  as chargeable_mass,\n        shippername                                                                     as shipper_name,\n        shipper                                                                         as shipper,\n        \"service\"                                                                       as \"service\",\n        \"zone\"                                                                          as \"zone\",\n        \"chargeout excl\"                                                                as chargeout_excl,\n        shipmentname                                                                    as shipment_name,\n        shipmentcountryid                                                               as shipment_country_id,\n        poddate                                                                         as pod_date_dt,\n        clientsite                                                                      as client_site,\n        costingdate                                                                     as costing_date_dt,\n        order_number2                                                                   as order_number2,\n        brand                                                                           as brand,\n        total_brands                                                                    as total_brands,\n        order_cat                                                                       as order_cat\n    FROM\n        {{ source('otd', 'otd_parcel_costs') }}\n    )\nSELECT * FROM otd_parcel_costs", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.redshift.otd.otd_parcel_costs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_parcel_costs_staging", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "dev", "schema": "dbt_parcel_costs_staging", "fqn": ["redshift", "parcel_costs", "base", "base_otd_costs"], "unique_id": "model.redshift.base_otd_costs", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "parcel_costs/base/base_otd_costs.sql", "original_file_path": "models/parcel_costs/base/base_otd_costs.sql", "name": "base_otd_costs", "alias": "base_otd_costs", "checksum": {"name": "sha256", "checksum": "c229724f241f99a70f0d77612940a70fdd6f544e6245510378dc846e94d01ff3"}, "tags": [], "refs": [], "sources": [["otd", "otd_parcel_costs"]], "description": "otd base parcel costs", "columns": {}, "meta": {}, "docs": {"show": false}, "patch_path": "redshift://models/parcel_costs/base/base.yml", "compiled_path": "target/compiled/redshift/models/parcel_costs/base/base_otd_costs.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "dbt_parcel_costs_staging", "materialized": "view"}, "created_at": 1649755425.027733, "compiled_sql": "WITH \n    otd_parcel_costs as( \n    SELECT\n        shipmentid                                                                      as shipment_id,\n        parcelid                                                                        as parcel_id,\n        poadate                                                                         as poa_date_dt,\n        trunc(dateadd(d, cast(split_part(poa_date_dt, '.', 1) as int), '1899-12-30'))   as poa_date_part_dt,\n        cast(concat('0.', split_part(poa_date_dt, '.', 2)) as numeric(17,5))            as poa_date_time_dt,\n        pohdate                                                                         as poh_date_dt,\n        trunc(dateadd(d, cast(split_part(poh_date_dt, '.', 1) as int), '1899-12-30'))   as poh_date_part_dt,\n        cast(concat('0.',split_part(poh_date_dt, '.', 2)) as numeric(17,5))             as poh_date_time_dt,\n        primarycustomerid                                                               as primary_customer_id,\n        client                                                                          as client,\n        \"sender name\"                                                                   as sender_name,\n        \"length\"                                                                        as \"length\",\n        \"width\"                                                                         as \"width\",\n        \"height\"                                                                        as \"height\",\n        \"weight\"                                                                        as \"weight\",\n        chargeablemass                                                                  as chargeable_mass,\n        shippername                                                                     as shipper_name,\n        shipper                                                                         as shipper,\n        \"service\"                                                                       as \"service\",\n        \"zone\"                                                                          as \"zone\",\n        \"chargeout excl\"                                                                as chargeout_excl,\n        shipmentname                                                                    as shipment_name,\n        shipmentcountryid                                                               as shipment_country_id,\n        poddate                                                                         as pod_date_dt,\n        clientsite                                                                      as client_site,\n        costingdate                                                                     as costing_date_dt,\n        order_number2                                                                   as order_number2,\n        brand                                                                           as brand,\n        total_brands                                                                    as total_brands,\n        order_cat                                                                       as order_cat\n    FROM\n        \"dev\".\"dbt_tsitsi\".\"otd_parcel_costs\"\n    )\nSELECT * FROM otd_parcel_costs", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"dev\".\"dbt_parcel_costs_staging\".\"base_otd_costs\""}, "test.redshift.assert_fulfillment_partner_not_null": {"raw_sql": "select *\nfrom {{ref('fct_combined_costs')}}\nwhere fulfillment_partner is null", "compiled": true, "resource_type": "test", "depends_on": {"macros": [], "nodes": ["model.redshift.fct_combined_costs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dev", "schema": "dbt_test__audit", "fqn": ["redshift", "assert_fulfillment_partner_not_null"], "unique_id": "test.redshift.assert_fulfillment_partner_not_null", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "assert_fulfillment_partner_not_null.sql", "original_file_path": "tests/assert_fulfillment_partner_not_null.sql", "name": "assert_fulfillment_partner_not_null", "alias": "assert_fulfillment_partner_not_null", "checksum": {"name": "sha256", "checksum": "e70ea9a11096cd6ad86bc35dcd7781d5119c01439394ce1fa9c247805e0dea7d"}, "tags": [], "refs": [["fct_combined_costs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/redshift/tests/assert_fulfillment_partner_not_null.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649755424.91301, "compiled_sql": "select *\nfrom \"dev\".\"dbt_parcel_costs\".\"fct_combined_costs\"\nwhere fulfillment_partner is null", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "test.redshift.assert_parcel_total_amount_excl_positive": {"raw_sql": "select \n    fulfillment_parcel_id,\n    parcel_total_amount_excl\nfrom {{ref('fct_combined_costs')}}\nwhere (cost_per_item < 0)", "compiled": true, "resource_type": "test", "depends_on": {"macros": [], "nodes": ["model.redshift.fct_combined_costs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dev", "schema": "dbt_test__audit", "fqn": ["redshift", "assert_parcel_total_amount_excl_positive"], "unique_id": "test.redshift.assert_parcel_total_amount_excl_positive", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "assert_parcel_total_amount_excl_positive.sql", "original_file_path": "tests/assert_parcel_total_amount_excl_positive.sql", "name": "assert_parcel_total_amount_excl_positive", "alias": "assert_parcel_total_amount_excl_positive", "checksum": {"name": "sha256", "checksum": "04c666f66ea2b67efd6f4567c1541f6f3e5a7a7ee8586d3aea451b597d785d55"}, "tags": [], "refs": [["fct_combined_costs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/redshift/tests/assert_parcel_total_amount_excl_positive.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649755424.914706, "compiled_sql": "select \n    fulfillment_parcel_id,\n    parcel_total_amount_excl\nfrom \"dev\".\"dbt_parcel_costs\".\"fct_combined_costs\"\nwhere (cost_per_item < 0)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "test.redshift.assert_item_cost_positive": {"raw_sql": "select \n    fulfillment_parcel_id,\n    cost_per_item\nfrom {{ref('fct_combined_costs')}}\nwhere (cost_per_item < 0)", "compiled": true, "resource_type": "test", "depends_on": {"macros": [], "nodes": ["model.redshift.fct_combined_costs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dev", "schema": "dbt_test__audit", "fqn": ["redshift", "assert_item_cost_positive"], "unique_id": "test.redshift.assert_item_cost_positive", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "assert_item_cost_positive.sql", "original_file_path": "tests/assert_item_cost_positive.sql", "name": "assert_item_cost_positive", "alias": "assert_item_cost_positive", "checksum": {"name": "sha256", "checksum": "79d0484c7117b26cf666120cde00716879233d813a99f8a290bbc1b4e700296a"}, "tags": [], "refs": [["fct_combined_costs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/redshift/tests/assert_item_cost_positive.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649755424.9164212, "compiled_sql": "select \n    fulfillment_parcel_id,\n    cost_per_item\nfrom \"dev\".\"dbt_parcel_costs\".\"fct_combined_costs\"\nwhere (cost_per_item < 0)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "test.redshift.assert_parcel_weight_positive": {"raw_sql": "select \n    parcel_weight\nfrom {{ref('fct_combined_costs')}}\nwhere (cost_per_item < 0)", "compiled": true, "resource_type": "test", "depends_on": {"macros": [], "nodes": ["model.redshift.fct_combined_costs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dev", "schema": "dbt_test__audit", "fqn": ["redshift", "assert_parcel_weight_positive"], "unique_id": "test.redshift.assert_parcel_weight_positive", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "assert_parcel_weight_positive.sql", "original_file_path": "tests/assert_parcel_weight_positive.sql", "name": "assert_parcel_weight_positive", "alias": "assert_parcel_weight_positive", "checksum": {"name": "sha256", "checksum": "cabbb05a5e27290ec28bb4140c702bf24e9547adb1488676435891ae6247ba50"}, "tags": [], "refs": [["fct_combined_costs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/redshift/tests/assert_parcel_weight_positive.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649755424.918072, "compiled_sql": "select \n    parcel_weight\nfrom \"dev\".\"dbt_parcel_costs\".\"fct_combined_costs\"\nwhere (cost_per_item < 0)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "test.redshift.assert_number_of_items_positive": {"raw_sql": "select \n    number_of_items\nfrom {{ref('fct_combined_costs')}}\nwhere cost_per_item < 0", "compiled": true, "resource_type": "test", "depends_on": {"macros": [], "nodes": ["model.redshift.fct_combined_costs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dev", "schema": "dbt_test__audit", "fqn": ["redshift", "assert_number_of_items_positive"], "unique_id": "test.redshift.assert_number_of_items_positive", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "assert_number_of_items_positive.sql", "original_file_path": "tests/assert_number_of_items_positive.sql", "name": "assert_number_of_items_positive", "alias": "assert_number_of_items_positive", "checksum": {"name": "sha256", "checksum": "95060942cf6f28004ceb8e7b6ef32b4939db62c322dfaf167306248f658694e2"}, "tags": [], "refs": [["fct_combined_costs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/redshift/tests/assert_number_of_items_positive.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649755424.920209, "compiled_sql": "select \n    number_of_items\nfrom \"dev\".\"dbt_parcel_costs\".\"fct_combined_costs\"\nwhere cost_per_item < 0", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "test.redshift.not_null_fct_combined_costs_fulfillment_partner.ae95c42a3a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "fulfillment_partner", "model": "{{ get_where_subquery(ref('fct_combined_costs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.redshift.fct_combined_costs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dev", "schema": "dbt_test__audit", "fqn": ["redshift", "parcel_costs", "transformed", "not_null_fct_combined_costs_fulfillment_partner"], "unique_id": "test.redshift.not_null_fct_combined_costs_fulfillment_partner.ae95c42a3a", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "not_null_fct_combined_costs_fulfillment_partner.sql", "original_file_path": "models/parcel_costs/transformed/transformed.yml", "name": "not_null_fct_combined_costs_fulfillment_partner", "alias": "not_null_fct_combined_costs_fulfillment_partner", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_combined_costs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/redshift/models/parcel_costs/transformed/transformed.yml/not_null_fct_combined_costs_fulfillment_partner.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649755425.0200582, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"dev\".\"dbt_parcel_costs\".\"fct_combined_costs\"\nwhere fulfillment_partner is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "fulfillment_partner", "file_key_name": "models.fct_combined_costs"}, "test.redshift.accepted_values_fct_combined_costs_fulfillment_partner__RAM__RTT__OTD.5b1e1e1ccf": {"raw_sql": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_fct_combined_c_42132f21d8bd031cd95486114f94f43a\") }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["RAM", "RTT", "OTD"], "column_name": "fulfillment_partner", "model": "{{ get_where_subquery(ref('fct_combined_costs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.redshift.fct_combined_costs"]}, "config": {"enabled": true, "alias": "accepted_values_fct_combined_c_42132f21d8bd031cd95486114f94f43a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dev", "schema": "dbt_test__audit", "fqn": ["redshift", "parcel_costs", "transformed", "accepted_values_fct_combined_costs_fulfillment_partner__RAM__RTT__OTD"], "unique_id": "test.redshift.accepted_values_fct_combined_costs_fulfillment_partner__RAM__RTT__OTD.5b1e1e1ccf", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "accepted_values_fct_combined_c_42132f21d8bd031cd95486114f94f43a.sql", "original_file_path": "models/parcel_costs/transformed/transformed.yml", "name": "accepted_values_fct_combined_costs_fulfillment_partner__RAM__RTT__OTD", "alias": "accepted_values_fct_combined_c_42132f21d8bd031cd95486114f94f43a", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_combined_costs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/redshift/models/parcel_costs/transformed/transformed.yml/accepted_values_fct_combined_c_42132f21d8bd031cd95486114f94f43a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_fct_combined_c_42132f21d8bd031cd95486114f94f43a"}, "created_at": 1649755425.0209532, "compiled_sql": "\n    \n    \n\nwith all_values as (\n\n    select\n        fulfillment_partner as value_field,\n        count(*) as n_records\n\n    from \"dev\".\"dbt_parcel_costs\".\"fct_combined_costs\"\n    group by fulfillment_partner\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'RAM','RTT','OTD'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "fulfillment_partner", "file_key_name": "models.fct_combined_costs"}, "test.redshift.not_null_fct_combined_costs_fulfillment_parcel_id.4c8fa468d9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "fulfillment_parcel_id", "model": "{{ get_where_subquery(ref('fct_combined_costs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.redshift.fct_combined_costs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "dev", "schema": "dbt_test__audit", "fqn": ["redshift", "parcel_costs", "transformed", "not_null_fct_combined_costs_fulfillment_parcel_id"], "unique_id": "test.redshift.not_null_fct_combined_costs_fulfillment_parcel_id.4c8fa468d9", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "not_null_fct_combined_costs_fulfillment_parcel_id.sql", "original_file_path": "models/parcel_costs/transformed/transformed.yml", "name": "not_null_fct_combined_costs_fulfillment_parcel_id", "alias": "not_null_fct_combined_costs_fulfillment_parcel_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_combined_costs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/redshift/models/parcel_costs/transformed/transformed.yml/not_null_fct_combined_costs_fulfillment_parcel_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1649755425.027015, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"dev\".\"dbt_parcel_costs\".\"fct_combined_costs\"\nwhere fulfillment_parcel_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "fulfillment_parcel_id", "file_key_name": "models.fct_combined_costs"}}, "sources": {"source.redshift.freshdesk.agents": {"fqn": ["redshift", "freshdesk", "staging", "freshdesk", "agents"], "database": "dev", "schema": "freshdeskstaging", "unique_id": "source.redshift.freshdesk.agents", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "models/freshdesk/staging/staging.yml", "original_file_path": "models/freshdesk/staging/staging.yml", "name": "agents", "source_name": "freshdesk", "source_description": "", "loader": "", "identifier": "agents", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Agent Info", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"freshdeskstaging\".\"agents\"", "created_at": 1649755425.032848}, "source.redshift.freshdesk.groups": {"fqn": ["redshift", "freshdesk", "staging", "freshdesk", "groups"], "database": "dev", "schema": "freshdeskstaging", "unique_id": "source.redshift.freshdesk.groups", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "models/freshdesk/staging/staging.yml", "original_file_path": "models/freshdesk/staging/staging.yml", "name": "groups", "source_name": "freshdesk", "source_description": "", "loader": "", "identifier": "groups", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "group Info", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"freshdeskstaging\".\"groups\"", "created_at": 1649755425.032922}, "source.redshift.freshdesk.tickets": {"fqn": ["redshift", "freshdesk", "staging", "freshdesk", "tickets"], "database": "dev", "schema": "freshdeskstaging", "unique_id": "source.redshift.freshdesk.tickets", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "models/freshdesk/staging/staging.yml", "original_file_path": "models/freshdesk/staging/staging.yml", "name": "tickets", "source_name": "freshdesk", "source_description": "", "loader": "", "identifier": "tickets", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "tickets Info", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"freshdeskstaging\".\"tickets\"", "created_at": 1649755425.0329778}, "source.redshift.freshdesk.conversations": {"fqn": ["redshift", "freshdesk", "staging", "freshdesk", "conversations"], "database": "dev", "schema": "freshdeskstaging", "unique_id": "source.redshift.freshdesk.conversations", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "models/freshdesk/staging/staging.yml", "original_file_path": "models/freshdesk/staging/staging.yml", "name": "conversations", "source_name": "freshdesk", "source_description": "", "loader": "", "identifier": "conversations", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "conversations Info", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"freshdeskstaging\".\"conversations\"", "created_at": 1649755425.0330298}, "source.redshift.freshdesk.status": {"fqn": ["redshift", "freshdesk", "staging", "freshdesk", "status"], "database": "dev", "schema": "freshdeskstaging", "unique_id": "source.redshift.freshdesk.status", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "models/freshdesk/staging/staging.yml", "original_file_path": "models/freshdesk/staging/staging.yml", "name": "status", "source_name": "freshdesk", "source_description": "", "loader": "", "identifier": "ticketsfields_status", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "ticket fields Info", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"freshdeskstaging\".\"ticketsfields_status\"", "created_at": 1649755425.0330791}, "source.redshift.freshdesk.source": {"fqn": ["redshift", "freshdesk", "staging", "freshdesk", "source"], "database": "dev", "schema": "freshdeskstaging", "unique_id": "source.redshift.freshdesk.source", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "models/freshdesk/staging/staging.yml", "original_file_path": "models/freshdesk/staging/staging.yml", "name": "source", "source_name": "freshdesk", "source_description": "", "loader": "", "identifier": "ticketsfields_source", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "ticket fields Info", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"freshdeskstaging\".\"ticketsfields_source\"", "created_at": 1649755425.033128}, "source.redshift.freshdesk.priority": {"fqn": ["redshift", "freshdesk", "staging", "freshdesk", "priority"], "database": "dev", "schema": "freshdeskstaging", "unique_id": "source.redshift.freshdesk.priority", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "models/freshdesk/staging/staging.yml", "original_file_path": "models/freshdesk/staging/staging.yml", "name": "priority", "source_name": "freshdesk", "source_description": "", "loader": "", "identifier": "ticketsfields_priority", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "ticket fields Info", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"freshdeskstaging\".\"ticketsfields_priority\"", "created_at": 1649755425.033176}, "source.redshift.freshdesk.satisfactionratings": {"fqn": ["redshift", "freshdesk", "staging", "freshdesk", "satisfactionratings"], "database": "dev", "schema": "freshdeskstaging", "unique_id": "source.redshift.freshdesk.satisfactionratings", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "models/freshdesk/staging/staging.yml", "original_file_path": "models/freshdesk/staging/staging.yml", "name": "satisfactionratings", "source_name": "freshdesk", "source_description": "", "loader": "", "identifier": "satisfactionratings", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "satisfaction ratings Info", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"freshdeskstaging\".\"satisfactionratings\"", "created_at": 1649755425.0332239}, "source.redshift.info.columns": {"fqn": ["redshift", "freshdesk", "staging", "info", "columns"], "database": "dev", "schema": "information_schema", "unique_id": "source.redshift.info.columns", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "models/freshdesk/staging/staging.yml", "original_file_path": "models/freshdesk/staging/staging.yml", "name": "columns", "source_name": "info", "source_description": "", "loader": "", "identifier": "columns", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "list of columns in ticketsfields table", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"information_schema\".\"columns\"", "created_at": 1649755425.033273}, "source.redshift.agents.order_summary": {"fqn": ["redshift", "freshdesk", "transformed", "agents", "order_summary"], "database": "dev", "schema": "matillionfreshdesk", "unique_id": "source.redshift.agents.order_summary", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "models/freshdesk/transformed/transformed.yml", "original_file_path": "models/freshdesk/transformed/transformed.yml", "name": "order_summary", "source_name": "agents", "source_description": "", "loader": "", "identifier": "FCT_ORDER_SUMMARY", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Order Summary table with paid flag and order dt", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"matillionfreshdesk\".\"FCT_ORDER_SUMMARY\"", "created_at": 1649755425.033322}, "source.redshift.otd.otd_parcel_costs": {"fqn": ["redshift", "parcel_costs", "otd", "otd_parcel_costs"], "database": "dev", "schema": "dbt_tsitsi", "unique_id": "source.redshift.otd.otd_parcel_costs", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "models/parcel_costs/parcel_costs.yml", "original_file_path": "models/parcel_costs/parcel_costs.yml", "name": "otd_parcel_costs", "source_name": "otd", "source_description": "", "loader": "", "identifier": "otd_parcel_costs", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"dbt_tsitsi\".\"otd_parcel_costs\"", "created_at": 1649755425.03337}, "source.redshift.otd.base_otd_costs": {"fqn": ["redshift", "parcel_costs", "otd", "base_otd_costs"], "database": "dev", "schema": "dbt_tsitsi", "unique_id": "source.redshift.otd.base_otd_costs", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "models/parcel_costs/parcel_costs.yml", "original_file_path": "models/parcel_costs/parcel_costs.yml", "name": "base_otd_costs", "source_name": "otd", "source_description": "", "loader": "", "identifier": "base_otd_costs", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"dbt_tsitsi\".\"base_otd_costs\"", "created_at": 1649755425.0334878}, "source.redshift.ram.ram_parcel_costs": {"fqn": ["redshift", "parcel_costs", "ram", "ram_parcel_costs"], "database": "dev", "schema": "dbt_tsitsi", "unique_id": "source.redshift.ram.ram_parcel_costs", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "models/parcel_costs/parcel_costs.yml", "original_file_path": "models/parcel_costs/parcel_costs.yml", "name": "ram_parcel_costs", "source_name": "ram", "source_description": "", "loader": "", "identifier": "ram_parcel_costs", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"dbt_tsitsi\".\"ram_parcel_costs\"", "created_at": 1649755425.03354}, "source.redshift.ram.base_ram_costs": {"fqn": ["redshift", "parcel_costs", "ram", "base_ram_costs"], "database": "dev", "schema": "dbt_tsitsi", "unique_id": "source.redshift.ram.base_ram_costs", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "models/parcel_costs/parcel_costs.yml", "original_file_path": "models/parcel_costs/parcel_costs.yml", "name": "base_ram_costs", "source_name": "ram", "source_description": "", "loader": "", "identifier": "base_ram_costs", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"dbt_tsitsi\".\"base_ram_costs\"", "created_at": 1649755425.0335948}, "source.redshift.one_stock.one_stock_parcel_costs": {"fqn": ["redshift", "parcel_costs", "one_stock", "one_stock_parcel_costs"], "database": "dev", "schema": "dbt_tsitsi", "unique_id": "source.redshift.one_stock.one_stock_parcel_costs", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "models/parcel_costs/parcel_costs.yml", "original_file_path": "models/parcel_costs/parcel_costs.yml", "name": "one_stock_parcel_costs", "source_name": "one_stock", "source_description": "", "loader": "", "identifier": "one_stock_parcel_costs", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"dbt_tsitsi\".\"one_stock_parcel_costs\"", "created_at": 1649755425.033644}, "source.redshift.one_stock.base_rtt_costs": {"fqn": ["redshift", "parcel_costs", "one_stock", "base_rtt_costs"], "database": "dev", "schema": "dbt_tsitsi", "unique_id": "source.redshift.one_stock.base_rtt_costs", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "models/parcel_costs/parcel_costs.yml", "original_file_path": "models/parcel_costs/parcel_costs.yml", "name": "base_rtt_costs", "source_name": "one_stock", "source_description": "", "loader": "", "identifier": "base_rtt_costs", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"dbt_tsitsi\".\"base_rtt_costs\"", "created_at": 1649755425.033695}, "source.redshift.fulfillment.omni_orders_fct_order_item_details": {"fqn": ["redshift", "parcel_costs", "fulfillment", "omni_orders_fct_order_item_details"], "database": "dev", "schema": "exasol", "unique_id": "source.redshift.fulfillment.omni_orders_fct_order_item_details", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "models/parcel_costs/parcel_costs.yml", "original_file_path": "models/parcel_costs/parcel_costs.yml", "name": "omni_orders_fct_order_item_details", "source_name": "fulfillment", "source_description": "", "loader": "", "identifier": "omni_orders_fct_order_item_details", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"exasol\".\"omni_orders_fct_order_item_details\"", "created_at": 1649755425.0337439}, "source.redshift.parcel_costs.base_otd_costs": {"fqn": ["redshift", "parcel_costs", "staging", "parcel_costs", "base_otd_costs"], "database": "dev", "schema": "dbt_tsitsi", "unique_id": "source.redshift.parcel_costs.base_otd_costs", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "models/parcel_costs/staging/staging.yml", "original_file_path": "models/parcel_costs/staging/staging.yml", "name": "base_otd_costs", "source_name": "parcel_costs", "source_description": "", "loader": "", "identifier": "base_otd_costs", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "otd base parcel costs", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"dbt_tsitsi\".\"base_otd_costs\"", "created_at": 1649755425.033792}, "source.redshift.parcel_costs.base_rtt_costs": {"fqn": ["redshift", "parcel_costs", "staging", "parcel_costs", "base_rtt_costs"], "database": "dev", "schema": "dbt_tsitsi", "unique_id": "source.redshift.parcel_costs.base_rtt_costs", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "models/parcel_costs/staging/staging.yml", "original_file_path": "models/parcel_costs/staging/staging.yml", "name": "base_rtt_costs", "source_name": "parcel_costs", "source_description": "", "loader": "", "identifier": "base_rtt_costs", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "rtt parcel costs", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"dbt_tsitsi\".\"base_rtt_costs\"", "created_at": 1649755425.0338402}, "source.redshift.parcel_costs.base_ram_costs": {"fqn": ["redshift", "parcel_costs", "staging", "parcel_costs", "base_ram_costs"], "database": "dev", "schema": "dbt_tsitsi", "unique_id": "source.redshift.parcel_costs.base_ram_costs", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "models/parcel_costs/staging/staging.yml", "original_file_path": "models/parcel_costs/staging/staging.yml", "name": "base_ram_costs", "source_name": "parcel_costs", "source_description": "", "loader": "", "identifier": "base_ram_costs", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "ram parcel costs", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"dbt_tsitsi\".\"base_ram_costs\"", "created_at": 1649755425.033887}, "source.redshift.parcel_costs.otd_parcel_costs": {"fqn": ["redshift", "parcel_costs", "base", "parcel_costs", "otd_parcel_costs"], "database": "dev", "schema": "dbt_tsitsi", "unique_id": "source.redshift.parcel_costs.otd_parcel_costs", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "models/parcel_costs/base/base.yml", "original_file_path": "models/parcel_costs/base/base.yml", "name": "otd_parcel_costs", "source_name": "parcel_costs", "source_description": "", "loader": "", "identifier": "otd_parcel_costs", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "otd base parcel costs", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"dbt_tsitsi\".\"otd_parcel_costs\"", "created_at": 1649755425.0339332}, "source.redshift.parcel_costs.rtt_parcel_costs": {"fqn": ["redshift", "parcel_costs", "base", "parcel_costs", "rtt_parcel_costs"], "database": "dev", "schema": "dbt_tsitsi", "unique_id": "source.redshift.parcel_costs.rtt_parcel_costs", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "models/parcel_costs/base/base.yml", "original_file_path": "models/parcel_costs/base/base.yml", "name": "rtt_parcel_costs", "source_name": "parcel_costs", "source_description": "", "loader": "", "identifier": "rtt_parcel_costs", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "rtt parcel costs", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"dbt_tsitsi\".\"rtt_parcel_costs\"", "created_at": 1649755425.03398}, "source.redshift.parcel_costs.ram_parcel_costs": {"fqn": ["redshift", "parcel_costs", "base", "parcel_costs", "ram_parcel_costs"], "database": "dev", "schema": "dbt_tsitsi", "unique_id": "source.redshift.parcel_costs.ram_parcel_costs", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "models/parcel_costs/base/base.yml", "original_file_path": "models/parcel_costs/base/base.yml", "name": "ram_parcel_costs", "source_name": "parcel_costs", "source_description": "", "loader": "", "identifier": "ram_parcel_costs", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "ram parcel costs", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dev\".\"dbt_tsitsi\".\"ram_parcel_costs\"", "created_at": 1649755425.034028}}, "macros": {"macro.redshift.union_tables_in_list": {"unique_id": "macro.redshift.union_tables_in_list", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "macros/union_tables_in_list.sql", "original_file_path": "macros/union_tables_in_list.sql", "name": "union_tables_in_list", "macro_sql": "{% macro union_tables_in_list(list_name) %}\n       \n\t   {% for item_name in list_name %}\n\n        select * from {{ item_name }}\n\n        {% if not loop.last -%} union all {%- endif %}\n\n    {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.4297118}, "macro.redshift.generate_schema_name": {"unique_id": "macro.redshift.generate_schema_name", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "macros/generate_schema_name.sql", "original_file_path": "macros/generate_schema_name.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.430153}, "macro.redshift.generate_open_days_sort": {"unique_id": "macro.redshift.generate_open_days_sort", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "macros/freshdesk/generate_open_days_sort.sql", "original_file_path": "macros/freshdesk/generate_open_days_sort.sql", "name": "generate_open_days_sort", "macro_sql": "{% macro generate_open_days_sort(open_days) %}\n    case when floor({{ open_days }}) = 0 then 1\n\t\t when floor({{ open_days }}) = 1 then 2\n\t\t when floor({{ open_days }}) = 2 then 3\n\t\t when floor({{ open_days }}) = 3 then 4\n\t\t when floor({{ open_days }}) >3 and floor({{ open_days }}) <10 then 5\n\t\t when floor({{ open_days }}) >=10 and floor({{ open_days }}) <21 then 6\n\t\t when floor({{ open_days }}) >=21 and floor({{ open_days }}) <42 then 7\n\t\t else 8 end\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.430707}, "macro.redshift.generate_open_days_bins": {"unique_id": "macro.redshift.generate_open_days_bins", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "macros/freshdesk/generate_open_days_bins.sql", "original_file_path": "macros/freshdesk/generate_open_days_bins.sql", "name": "generate_open_days_bins", "macro_sql": "{% macro generate_open_days_bins(open_days) %}\n    case when floor({{ open_days }}) = 0 then '< 24 Hours'\n\t\t when floor({{ open_days }}) = 1 then '1 Day'\n\t\t when floor({{ open_days }}) = 2 then '2 Days'\n\t\t when floor({{ open_days }}) = 3 then '3 Days'\n\t\t when floor({{ open_days }}) >3 and floor({{ open_days }}) <10 then '4 - 10 Days'\n\t\t when floor({{ open_days }}) >=10 and floor({{ open_days }}) <21 then '10 - 20 Days'\n\t\t when floor({{ open_days }}) >=21 and floor({{ open_days }}) <42 then '21 - 42 Days'\n\t\t else '> 42 Days' end\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.431315}, "macro.redshift.map_area_locations": {"unique_id": "macro.redshift.map_area_locations", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "macros/parcelcosts/map_area_locations.sql", "original_file_path": "macros/parcelcosts/map_area_locations.sql", "name": "map_area_locations", "macro_sql": "{% macro map_area_locations(column_name_temp) %}\n    case\n        when {{column_name_temp}} = 'LOCAL OUTLYING' then 'Outlying'\n        when {{column_name_temp}} = 'MAIN OUTLYING' then 'Outlying'\n        when {{column_name_temp}} = 'LOCAL' then 'Local'\n        when {{column_name_temp}} = 'MAIN' then 'Main'\n        when {{column_name_temp}} = 'L' then 'Local'\n        when {{column_name_temp}} = 'M' then 'Main'\n        when {{column_name_temp}} = 'Local' then 'Local'\n        when {{column_name_temp}} = 'Local Township' then 'Local'\n        when {{column_name_temp}} = 'Outlying' then 'Outlying'\n        when {{column_name_temp}} = 'Main Township' then 'Main'\n        when {{column_name_temp}} = 'Main Centre' then 'Main'\n        when {{column_name_temp}} = 'Regional' then 'Regional'\n        when {{column_name_temp}} = 'R' then 'Regional'\n        when {{column_name_temp}} = 'Regional Township' then 'Regional'\n        when {{column_name_temp}} = 'Remote' then 'Remote'\n        else null end\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "regulates area location across multiple couriers", "meta": {}, "docs": {"show": false}, "patch_path": "redshift://macros/parcelcosts/parcelcosts_macros.yml", "arguments": [{"name": "area", "type": "text", "description": "area as given to us by courier"}], "created_at": 1649755425.031266}, "macro.redshift.varchar_to_date": {"unique_id": "macro.redshift.varchar_to_date", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "macros/parcelcosts/varchar_to_date.sql", "original_file_path": "macros/parcelcosts/varchar_to_date.sql", "name": "varchar_to_date", "macro_sql": "{% macro varchar_to_date(column_name_temp) %}\n\n  \n    {% if column_name_temp ~ '^[0-9]+$' %}\n     to_date({{ column_name_temp }}, 'DD/MM/YYYY') \n    {% else %}\n        null\n    end as {{column_name_temp}}\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "converts text dates to datetime", "meta": {}, "docs": {"show": false}, "patch_path": "redshift://macros/parcelcosts/parcelcosts_macros.yml", "arguments": [{"name": "date", "type": "text", "description": "date"}], "created_at": 1649755425.0322602}, "macro.redshift.varchar_to_numeric": {"unique_id": "macro.redshift.varchar_to_numeric", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "macros/parcelcosts/varchar_to_numeric.sql", "original_file_path": "macros/parcelcosts/varchar_to_numeric.sql", "name": "varchar_to_numeric", "macro_sql": "{% macro varchar_to_numeric(column_name_temp) %}\n\n    {% if column_name_temp ~ '^[0-9]+$' %}\n     cast({{ column_name_temp }} as DECIMAL(10,2))\n    {% else %}\n        null\n    end as {{column_name_temp}}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "converts text to numeric", "meta": {}, "docs": {"show": false}, "patch_path": "redshift://macros/parcelcosts/parcelcosts_macros.yml", "arguments": [{"name": "numeric column", "type": "text", "description": "gets converted to numeric"}], "created_at": 1649755425.0327291}, "macro.redshift.trim_unwanted_characters": {"unique_id": "macro.redshift.trim_unwanted_characters", "package_name": "redshift", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift", "path": "macros/parcelcosts/trim_unwanted_characters.sql", "original_file_path": "macros/parcelcosts/trim_unwanted_characters.sql", "name": "trim_unwanted_characters", "macro_sql": "{% macro trim_unwanted_characters(column_name_temp) %}\n\n   TRIM('R, ' FROM {{column_name_temp}})\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "trims unwanted characters from columns i.e R signs on money columns and space", "meta": {}, "docs": {"show": false}, "patch_path": "redshift://macros/parcelcosts/parcelcosts_macros.yml", "arguments": [{"name": "financial column", "type": "text", "description": "amount with a R"}], "created_at": 1649755425.0317838}, "macro.dbt_redshift.redshift__get_base_catalog": {"unique_id": "macro.dbt_redshift.redshift__get_base_catalog", "package_name": "dbt_redshift", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/redshift", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "redshift__get_base_catalog", "macro_sql": "{% macro redshift__get_base_catalog(information_schema, schemas) -%}\n  {%- call statement('base_catalog', fetch_result=True) -%}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    with late_binding as (\n      select\n        '{{ database }}'::varchar as table_database,\n        table_schema,\n        table_name,\n        'LATE BINDING VIEW'::varchar as table_type,\n        null::text as table_comment,\n\n        column_name,\n        column_index,\n        column_type,\n        null::text as column_comment\n      from pg_get_late_binding_view_cols()\n        cols(table_schema name, table_name name, column_name name,\n             column_type varchar,\n             column_index int)\n        order by \"column_index\"\n    ),\n\n    early_binding as (\n        select\n            '{{ database }}'::varchar as table_database,\n            sch.nspname as table_schema,\n            tbl.relname as table_name,\n            case tbl.relkind\n                when 'v' then 'VIEW'\n                else 'BASE TABLE'\n            end as table_type,\n            tbl_desc.description as table_comment,\n            col.attname as column_name,\n            col.attnum as column_index,\n            pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n            col_desc.description as column_comment\n\n        from pg_catalog.pg_namespace sch\n        join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n        join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n        left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n        left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n        where (\n            {%- for schema in schemas -%}\n              upper(sch.nspname) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n            {%- endfor -%}\n          )\n            and tbl.relkind in ('r', 'v', 'f', 'p')\n            and col.attnum > 0\n            and not col.attisdropped\n    ),\n\n    table_owners as (\n\n        select\n            '{{ database }}'::varchar as table_database,\n            schemaname as table_schema,\n            tablename as table_name,\n            tableowner as table_owner\n\n        from pg_tables\n\n        union all\n\n        select\n            '{{ database }}'::varchar as table_database,\n            schemaname as table_schema,\n            viewname as table_name,\n            viewowner as table_owner\n\n        from pg_views\n\n    ),\n\n    unioned as (\n\n        select *\n        from early_binding\n\n        union all\n\n        select *\n        from late_binding\n\n    )\n\n    select *,\n        table_database || '.' || table_schema || '.' || table_name as table_id\n\n    from unioned\n    join table_owners using (table_database, table_schema, table_name)\n\n    where (\n        {%- for schema in schemas -%}\n          upper(table_schema) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n\n    order by \"column_index\"\n  {%- endcall -%}\n\n  {{ return(load_result('base_catalog').table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.438868}, "macro.dbt_redshift.redshift__get_extended_catalog": {"unique_id": "macro.dbt_redshift.redshift__get_extended_catalog", "package_name": "dbt_redshift", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/redshift", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "redshift__get_extended_catalog", "macro_sql": "{% macro redshift__get_extended_catalog(schemas) %}\n  {%- call statement('extended_catalog', fetch_result=True) -%}\n\n    select\n        \"database\" || '.' || \"schema\" || '.' || \"table\" as table_id,\n\n        'Encoded'::text as \"stats:encoded:label\",\n        encoded as \"stats:encoded:value\",\n        'Indicates whether any column in the table has compression encoding defined.'::text as \"stats:encoded:description\",\n        true as \"stats:encoded:include\",\n\n        'Dist Style' as \"stats:diststyle:label\",\n        diststyle as \"stats:diststyle:value\",\n        'Distribution style or distribution key column, if key distribution is defined.'::text as \"stats:diststyle:description\",\n        true as \"stats:diststyle:include\",\n\n        'Sort Key 1' as \"stats:sortkey1:label\",\n        -- handle 0xFF byte in response for interleaved sort styles\n        case\n            when sortkey1 like 'INTERLEAVED%' then 'INTERLEAVED'::text\n            else sortkey1\n        end as \"stats:sortkey1:value\",\n        'First column in the sort key.'::text as \"stats:sortkey1:description\",\n        (sortkey1 is not null) as \"stats:sortkey1:include\",\n\n        'Max Varchar' as \"stats:max_varchar:label\",\n        max_varchar as \"stats:max_varchar:value\",\n        'Size of the largest column that uses a VARCHAR data type.'::text as \"stats:max_varchar:description\",\n        true as \"stats:max_varchar:include\",\n\n        -- exclude this, as the data is strangely returned with null-byte characters\n        'Sort Key 1 Encoding' as \"stats:sortkey1_enc:label\",\n        sortkey1_enc as \"stats:sortkey1_enc:value\",\n        'Compression encoding of the first column in the sort key.' as \"stats:sortkey1_enc:description\",\n        false as \"stats:sortkey1_enc:include\",\n\n        '# Sort Keys' as \"stats:sortkey_num:label\",\n        sortkey_num as \"stats:sortkey_num:value\",\n        'Number of columns defined as sort keys.' as \"stats:sortkey_num:description\",\n        (sortkey_num > 0) as \"stats:sortkey_num:include\",\n\n        'Approximate Size' as \"stats:size:label\",\n        size * 1000000 as \"stats:size:value\",\n        'Approximate size of the table, calculated from a count of 1MB blocks'::text as \"stats:size:description\",\n        true as \"stats:size:include\",\n\n        'Disk Utilization' as \"stats:pct_used:label\",\n        pct_used / 100.0 as \"stats:pct_used:value\",\n        'Percent of available space that is used by the table.'::text as \"stats:pct_used:description\",\n        true as \"stats:pct_used:include\",\n\n        'Unsorted %' as \"stats:unsorted:label\",\n        unsorted / 100.0 as \"stats:unsorted:value\",\n        'Percent of unsorted rows in the table.'::text as \"stats:unsorted:description\",\n        (unsorted is not null) as \"stats:unsorted:include\",\n\n        'Stats Off' as \"stats:stats_off:label\",\n        stats_off as \"stats:stats_off:value\",\n        'Number that indicates how stale the table statistics are; 0 is current, 100 is out of date.'::text as \"stats:stats_off:description\",\n        true as \"stats:stats_off:include\",\n\n        'Approximate Row Count' as \"stats:rows:label\",\n        tbl_rows as \"stats:rows:value\",\n        'Approximate number of rows in the table. This value includes rows marked for deletion, but not yet vacuumed.'::text as \"stats:rows:description\",\n        true as \"stats:rows:include\",\n\n        'Sort Key Skew' as \"stats:skew_sortkey1:label\",\n        skew_sortkey1 as \"stats:skew_sortkey1:value\",\n        'Ratio of the size of the largest non-sort key column to the size of the first column of the sort key.'::text as \"stats:skew_sortkey1:description\",\n        (skew_sortkey1 is not null) as \"stats:skew_sortkey1:include\",\n\n        'Skew Rows' as \"stats:skew_rows:label\",\n        skew_rows as \"stats:skew_rows:value\",\n        'Ratio of the number of rows in the slice with the most rows to the number of rows in the slice with the fewest rows.'::text as \"stats:skew_rows:description\",\n        (skew_rows is not null) as \"stats:skew_rows:include\"\n\n    from svv_table_info\n    where (\n        {%- for schema in schemas -%}\n          upper(schema) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n    )\n\n  {%- endcall -%}\n\n  {{ return(load_result('extended_catalog').table) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.439475}, "macro.dbt_redshift.redshift__can_select_from": {"unique_id": "macro.dbt_redshift.redshift__can_select_from", "package_name": "dbt_redshift", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/redshift", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "redshift__can_select_from", "macro_sql": "{% macro redshift__can_select_from(table_name) %}\n\n  {%- call statement('has_table_privilege', fetch_result=True) -%}\n\n    select has_table_privilege(current_user, '{{ table_name }}', 'SELECT') as can_select\n\n  {%- endcall -%}\n\n  {% set can_select = load_result('has_table_privilege').table[0]['can_select'] %}\n  {{ return(can_select) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.439839}, "macro.dbt_redshift.redshift__no_svv_table_info_warning": {"unique_id": "macro.dbt_redshift.redshift__no_svv_table_info_warning", "package_name": "dbt_redshift", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/redshift", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "redshift__no_svv_table_info_warning", "macro_sql": "{% macro redshift__no_svv_table_info_warning() %}\n\n    {% set msg %}\n\n    Warning: The database user \"{{ target.user }}\" has insufficient permissions to\n    query the \"svv_table_info\" table. Please grant SELECT permissions on this table\n    to the \"{{ target.user }}\" user to fetch extended table details from Redshift.\n\n    {% endset %}\n\n    {{ log(msg, info=True) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.440112}, "macro.dbt_redshift.redshift__get_catalog": {"unique_id": "macro.dbt_redshift.redshift__get_catalog", "package_name": "dbt_redshift", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/redshift", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "redshift__get_catalog", "macro_sql": "{% macro redshift__get_catalog(information_schema, schemas) %}\n\n    {#-- Compute a left-outer join in memory. Some Redshift queries are\n      -- leader-only, and cannot be joined to other compute-based queries #}\n\n    {% set catalog = redshift__get_base_catalog(information_schema, schemas) %}\n\n    {% set select_extended =  redshift__can_select_from('svv_table_info') %}\n    {% if select_extended %}\n        {% set extended_catalog = redshift__get_extended_catalog(schemas) %}\n        {% set catalog = catalog.join(extended_catalog, 'table_id') %}\n    {% else %}\n        {{ redshift__no_svv_table_info_warning() }}\n    {% endif %}\n\n    {{ return(catalog.exclude(['table_id'])) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__get_base_catalog", "macro.dbt_redshift.redshift__can_select_from", "macro.dbt_redshift.redshift__get_extended_catalog", "macro.dbt_redshift.redshift__no_svv_table_info_warning"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.440707}, "macro.dbt_redshift.redshift__get_relations": {"unique_id": "macro.dbt_redshift.redshift__get_relations", "package_name": "dbt_redshift", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/redshift", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "name": "redshift__get_relations", "macro_sql": "{% macro redshift__get_relations () -%}\n  {{ return(dbt.postgres__get_relations()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.440953}, "macro.dbt_redshift.dist": {"unique_id": "macro.dbt_redshift.dist", "package_name": "dbt_redshift", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "dist", "macro_sql": "{% macro dist(dist) %}\n  {%- if dist is not none -%}\n      {%- set dist = dist.strip().lower() -%}\n\n      {%- if dist in ['all', 'even'] -%}\n        diststyle {{ dist }}\n      {%- elif dist == \"auto\" -%}\n      {%- else -%}\n        diststyle key distkey ({{ dist }})\n      {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.450848}, "macro.dbt_redshift.sort": {"unique_id": "macro.dbt_redshift.sort", "package_name": "dbt_redshift", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "sort", "macro_sql": "{% macro sort(sort_type, sort) %}\n  {%- if sort is not none %}\n      {{ sort_type | default('compound', boolean=true) }} sortkey(\n      {%- if sort is string -%}\n        {%- set sort = [sort] -%}\n      {%- endif -%}\n      {%- for item in sort -%}\n        {{ item }}\n        {%- if not loop.last -%},{%- endif -%}\n      {%- endfor -%}\n      )\n  {%- endif %}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.451318}, "macro.dbt_redshift.redshift__create_table_as": {"unique_id": "macro.dbt_redshift.redshift__create_table_as", "package_name": "dbt_redshift", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__create_table_as", "macro_sql": "{% macro redshift__create_table_as(temporary, relation, sql) -%}\n\n  {%- set _dist = config.get('dist') -%}\n  {%- set _sort_type = config.get(\n          'sort_type',\n          validator=validation.any['compound', 'interleaved']) -%}\n  {%- set _sort = config.get(\n          'sort',\n          validator=validation.any[list, basestring]) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  {%- set backup = config.get('backup') -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n    {{ dist(_dist) }}\n    {{ sort(_sort_type, _sort) }}\n    {% if backup == false -%}backup no{%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.dist", "macro.dbt_redshift.sort"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.452406}, "macro.dbt_redshift.redshift__create_view_as": {"unique_id": "macro.dbt_redshift.redshift__create_view_as", "package_name": "dbt_redshift", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__create_view_as", "macro_sql": "{% macro redshift__create_view_as(relation, sql) -%}\n  {%- set binding = config.get('bind', default=True) -%}\n\n  {% set bind_qualifier = '' if binding else 'with no schema binding' %}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create view {{ relation }} as (\n    {{ sql }}\n  ) {{ bind_qualifier }};\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.4528608}, "macro.dbt_redshift.redshift__create_schema": {"unique_id": "macro.dbt_redshift.redshift__create_schema", "package_name": "dbt_redshift", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__create_schema", "macro_sql": "{% macro redshift__create_schema(relation) -%}\n  {{ postgres__create_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.452991}, "macro.dbt_redshift.redshift__drop_schema": {"unique_id": "macro.dbt_redshift.redshift__drop_schema", "package_name": "dbt_redshift", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__drop_schema", "macro_sql": "{% macro redshift__drop_schema(relation) -%}\n  {{ postgres__drop_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.4531121}, "macro.dbt_redshift.redshift__get_columns_in_relation": {"unique_id": "macro.dbt_redshift.redshift__get_columns_in_relation", "package_name": "dbt_redshift", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__get_columns_in_relation", "macro_sql": "{% macro redshift__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      with bound_views as (\n        select\n          ordinal_position,\n          table_schema,\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n        from information_schema.\"columns\"\n        where table_name = '{{ relation.identifier }}'\n    ),\n\n    unbound_views as (\n      select\n        ordinal_position,\n        view_schema,\n        col_name,\n        case\n          when col_type ilike 'character varying%' then\n            'character varying'\n          when col_type ilike 'numeric%' then 'numeric'\n          else col_type\n        end as col_type,\n        case\n          when col_type like 'character%'\n          then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int\n          else null\n        end as character_maximum_length,\n        case\n          when col_type like 'numeric%'\n          then nullif(\n            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),\n            '')::int\n          else null\n        end as numeric_precision,\n        case\n          when col_type like 'numeric%'\n          then nullif(\n            SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),\n            '')::int\n          else null\n        end as numeric_scale\n\n      from pg_get_late_binding_view_cols()\n      cols(view_schema name, view_name name, col_name name,\n           col_type varchar, ordinal_position int)\n      where view_name = '{{ relation.identifier }}'\n    ),\n\n    external_views as (\n      select\n        columnnum,\n        schemaname,\n        columnname,\n        case\n          when external_type ilike 'character varying%' or external_type ilike 'varchar%'\n          then 'character varying'\n          when external_type ilike 'numeric%' then 'numeric'\n          else external_type\n        end as external_type,\n        case\n          when external_type like 'character%' or external_type like 'varchar%'\n          then nullif(\n            REGEXP_SUBSTR(external_type, '[0-9]+'),\n            '')::int\n          else null\n        end as character_maximum_length,\n        case\n          when external_type like 'numeric%'\n          then nullif(\n            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 1),\n            '')::int\n          else null\n        end as numeric_precision,\n        case\n          when external_type like 'numeric%'\n          then nullif(\n            SPLIT_PART(REGEXP_SUBSTR(external_type, '[0-9,]+'), ',', 2),\n            '')::int\n          else null\n        end as numeric_scale\n      from\n        pg_catalog.svv_external_columns\n      where\n        schemaname = '{{ relation.schema }}'\n        and tablename = '{{ relation.identifier }}'\n\n    ),\n\n    unioned as (\n      select * from bound_views\n      union all\n      select * from unbound_views\n      union all\n      select * from external_views\n    )\n\n    select\n      column_name,\n      data_type,\n      character_maximum_length,\n      numeric_precision,\n      numeric_scale\n\n    from unioned\n    {% if relation.schema %}\n    where table_schema = '{{ relation.schema }}'\n    {% endif %}\n    order by ordinal_position\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.453778}, "macro.dbt_redshift.redshift__list_relations_without_caching": {"unique_id": "macro.dbt_redshift.redshift__list_relations_without_caching", "package_name": "dbt_redshift", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__list_relations_without_caching", "macro_sql": "{% macro redshift__list_relations_without_caching(schema_relation) %}\n  {{ return(postgres__list_relations_without_caching(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.453929}, "macro.dbt_redshift.redshift__information_schema_name": {"unique_id": "macro.dbt_redshift.redshift__information_schema_name", "package_name": "dbt_redshift", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__information_schema_name", "macro_sql": "{% macro redshift__information_schema_name(database) -%}\n  {{ return(postgres__information_schema_name(database)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.454066}, "macro.dbt_redshift.redshift__list_schemas": {"unique_id": "macro.dbt_redshift.redshift__list_schemas", "package_name": "dbt_redshift", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__list_schemas", "macro_sql": "{% macro redshift__list_schemas(database) -%}\n  {{ return(postgres__list_schemas(database)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.4542}, "macro.dbt_redshift.redshift__check_schema_exists": {"unique_id": "macro.dbt_redshift.redshift__check_schema_exists", "package_name": "dbt_redshift", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__check_schema_exists", "macro_sql": "{% macro redshift__check_schema_exists(information_schema, schema) -%}\n  {{ return(postgres__check_schema_exists(information_schema, schema)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.454359}, "macro.dbt_redshift.redshift__current_timestamp": {"unique_id": "macro.dbt_redshift.redshift__current_timestamp", "package_name": "dbt_redshift", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() -%}\n  getdate()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.4544342}, "macro.dbt_redshift.redshift__snapshot_get_time": {"unique_id": "macro.dbt_redshift.redshift__snapshot_get_time", "package_name": "dbt_redshift", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__snapshot_get_time", "macro_sql": "{% macro redshift__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.4545379}, "macro.dbt_redshift.redshift__snapshot_string_as_time": {"unique_id": "macro.dbt_redshift.redshift__snapshot_string_as_time", "package_name": "dbt_redshift", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__snapshot_string_as_time", "macro_sql": "{% macro redshift__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.454716}, "macro.dbt_redshift.redshift__make_temp_relation": {"unique_id": "macro.dbt_redshift.redshift__make_temp_relation", "package_name": "dbt_redshift", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__make_temp_relation", "macro_sql": "{% macro redshift__make_temp_relation(base_relation, suffix) %}\n    {% do return(postgres__make_temp_relation(base_relation, suffix)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.4549}, "macro.dbt_redshift.redshift__persist_docs": {"unique_id": "macro.dbt_redshift.redshift__persist_docs", "package_name": "dbt_redshift", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__persist_docs", "macro_sql": "{% macro redshift__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {# Override: do not set column comments for LBVs #}\n  {% set is_lbv = config.get('materialized') == 'view' and config.get('bind') == false %}\n  {% if for_columns and config.persist_column_docs() and model.columns and not is_lbv %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.455578}, "macro.dbt_redshift.redshift__alter_relation_comment": {"unique_id": "macro.dbt_redshift.redshift__alter_relation_comment", "package_name": "dbt_redshift", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__alter_relation_comment", "macro_sql": "{% macro redshift__alter_relation_comment(relation, comment) %}\n  {% do return(postgres__alter_relation_comment(relation, comment)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.455761}, "macro.dbt_redshift.redshift__alter_column_comment": {"unique_id": "macro.dbt_redshift.redshift__alter_column_comment", "package_name": "dbt_redshift", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__alter_column_comment", "macro_sql": "{% macro redshift__alter_column_comment(relation, column_dict) %}\n  {% do return(postgres__alter_column_comment(relation, column_dict)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.4559412}, "macro.dbt_redshift.redshift__alter_relation_add_remove_columns": {"unique_id": "macro.dbt_redshift.redshift__alter_relation_add_remove_columns", "package_name": "dbt_redshift", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/redshift", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "redshift__alter_relation_add_remove_columns", "macro_sql": "{% macro redshift__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  \n  {% if add_columns %}\n  \n    {% for column in add_columns %}\n      {% set sql -%}\n          alter {{ relation.type }} {{ relation }} add column {{ column.name }} {{ column.data_type }}\n      {% endset %}\n      {% do run_query(sql) %}\n    {% endfor %}\n\n  {% endif %}\n  \n  {% if remove_columns %}\n  \n    {% for column in remove_columns %}\n      {% set sql -%}\n          alter {{ relation.type }} {{ relation }} drop column {{ column.name }}\n      {% endset %}\n      {% do run_query(sql) %}\n    {% endfor %}\n    \n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.456631}, "macro.dbt_redshift.redshift__snapshot_merge_sql": {"unique_id": "macro.dbt_redshift.redshift__snapshot_merge_sql", "package_name": "dbt_redshift", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/redshift", "path": "macros/materializations/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot_merge.sql", "name": "redshift__snapshot_merge_sql", "macro_sql": "{% macro redshift__snapshot_merge_sql(target, source, insert_cols) -%}\n    {{ postgres__snapshot_merge_sql(target, source, insert_cols) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.456925}, "macro.dbt_postgres.postgres__get_catalog": {"unique_id": "macro.dbt_postgres.postgres__get_catalog", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "postgres__get_catalog", "macro_sql": "{% macro postgres__get_catalog(information_schema, schemas) -%}\n\n  {%- call statement('catalog', fetch_result=True) -%}\n    {#\n      If the user has multiple databases set and the first one is wrong, this will fail.\n      But we won't fail in the case where there are multiple quoting-difference-only dbs, which is better.\n    #}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    select\n        '{{ database }}' as table_database,\n        sch.nspname as table_schema,\n        tbl.relname as table_name,\n        case tbl.relkind\n            when 'v' then 'VIEW'\n            else 'BASE TABLE'\n        end as table_type,\n        tbl_desc.description as table_comment,\n        col.attname as column_name,\n        col.attnum as column_index,\n        pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n        col_desc.description as column_comment,\n        pg_get_userbyid(tbl.relowner) as table_owner\n\n    from pg_catalog.pg_namespace sch\n    join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n    join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n    left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n    left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n\n    where (\n        {%- for schema in schemas -%}\n          upper(sch.nspname) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      and not pg_is_other_temp_schema(sch.oid) -- not a temporary schema belonging to another session\n      and tbl.relpersistence in ('p', 'u') -- [p]ermanent table or [u]nlogged table. Exclude [t]emporary tables\n      and tbl.relkind in ('r', 'v', 'f', 'p') -- o[r]dinary table, [v]iew, [f]oreign table, [p]artitioned table. Other values are [i]ndex, [S]equence, [c]omposite type, [t]OAST table, [m]aterialized view\n      and col.attnum > 0 -- negative numbers are used for system columns such as oid\n      and not col.attisdropped -- column as not been dropped\n\n    order by\n        sch.nspname,\n        tbl.relname,\n        col.attnum\n\n  {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.458011}, "macro.dbt_postgres.postgres_get_relations": {"unique_id": "macro.dbt_postgres.postgres_get_relations", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "name": "postgres_get_relations", "macro_sql": "{% macro postgres_get_relations () -%}\n\n  {#\n      -- in pg_depend, objid is the dependent, refobjid is the referenced object\n      --  > a pg_depend entry indicates that the referenced object cannot be\n      --  > dropped without also dropping the dependent object.\n  #}\n\n  {%- call statement('relations', fetch_result=True) -%}\n    with relation as (\n        select\n            pg_rewrite.ev_class as class,\n            pg_rewrite.oid as id\n        from pg_rewrite\n    ),\n    class as (\n        select\n            oid as id,\n            relname as name,\n            relnamespace as schema,\n            relkind as kind\n        from pg_class\n    ),\n    dependency as (\n        select\n            pg_depend.objid as id,\n            pg_depend.refobjid as ref\n        from pg_depend\n    ),\n    schema as (\n        select\n            pg_namespace.oid as id,\n            pg_namespace.nspname as name\n        from pg_namespace\n        where nspname != 'information_schema' and nspname not like 'pg\\_%'\n    ),\n    referenced as (\n        select\n            relation.id AS id,\n            referenced_class.name ,\n            referenced_class.schema ,\n            referenced_class.kind\n        from relation\n        join class as referenced_class on relation.class=referenced_class.id\n        where referenced_class.kind in ('r', 'v')\n    ),\n    relationships as (\n        select\n            referenced.name as referenced_name,\n            referenced.schema as referenced_schema_id,\n            dependent_class.name as dependent_name,\n            dependent_class.schema as dependent_schema_id,\n            referenced.kind as kind\n        from referenced\n        join dependency on referenced.id=dependency.id\n        join class as dependent_class on dependency.ref=dependent_class.id\n        where\n            (referenced.name != dependent_class.name or\n             referenced.schema != dependent_class.schema)\n    )\n\n    select\n        referenced_schema.name as referenced_schema,\n        relationships.referenced_name as referenced_name,\n        dependent_schema.name as dependent_schema,\n        relationships.dependent_name as dependent_name\n    from relationships\n    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id\n    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id\n    group by referenced_schema, referenced_name, dependent_schema, dependent_name\n    order by referenced_schema, referenced_name, dependent_schema, dependent_name;\n\n  {%- endcall -%}\n\n  {{ return(load_result('relations').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.4586759}, "macro.dbt_postgres.postgres__create_table_as": {"unique_id": "macro.dbt_postgres.postgres__create_table_as", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__create_table_as", "macro_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.4644742}, "macro.dbt_postgres.postgres__get_create_index_sql": {"unique_id": "macro.dbt_postgres.postgres__get_create_index_sql", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__get_create_index_sql", "macro_sql": "{% macro postgres__get_create_index_sql(relation, index_dict) -%}\n  {%- set index_config = adapter.parse_index(index_dict) -%}\n  {%- set comma_separated_columns = \", \".join(index_config.columns) -%}\n  {%- set index_name = index_config.render(relation) -%}\n\n  create {% if index_config.unique -%}\n    unique\n  {%- endif %} index if not exists\n  \"{{ index_name }}\"\n  on {{ relation }} {% if index_config.type -%}\n    using {{ index_config.type }}\n  {%- endif %}\n  ({{ comma_separated_columns }});\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.465054}, "macro.dbt_postgres.postgres__create_schema": {"unique_id": "macro.dbt_postgres.postgres__create_schema", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__create_schema", "macro_sql": "{% macro postgres__create_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier().include(database=False) }}\n  {%- endcall -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.465379}, "macro.dbt_postgres.postgres__drop_schema": {"unique_id": "macro.dbt_postgres.postgres__drop_schema", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__drop_schema", "macro_sql": "{% macro postgres__drop_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier().include(database=False) }} cascade\n  {%- endcall -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.465703}, "macro.dbt_postgres.postgres__get_columns_in_relation": {"unique_id": "macro.dbt_postgres.postgres__get_columns_in_relation", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__get_columns_in_relation", "macro_sql": "{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.466181}, "macro.dbt_postgres.postgres__list_relations_without_caching": {"unique_id": "macro.dbt_postgres.postgres__list_relations_without_caching", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__list_relations_without_caching", "macro_sql": "{% macro postgres__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.46656}, "macro.dbt_postgres.postgres__information_schema_name": {"unique_id": "macro.dbt_postgres.postgres__information_schema_name", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__information_schema_name", "macro_sql": "{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.466733}, "macro.dbt_postgres.postgres__list_schemas": {"unique_id": "macro.dbt_postgres.postgres__list_schemas", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__list_schemas", "macro_sql": "{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.467086}, "macro.dbt_postgres.postgres__check_schema_exists": {"unique_id": "macro.dbt_postgres.postgres__check_schema_exists", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__check_schema_exists", "macro_sql": "{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if information_schema.database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.467484}, "macro.dbt_postgres.postgres__current_timestamp": {"unique_id": "macro.dbt_postgres.postgres__current_timestamp", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__current_timestamp", "macro_sql": "{% macro postgres__current_timestamp() -%}\n  now()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.467561}, "macro.dbt_postgres.postgres__snapshot_string_as_time": {"unique_id": "macro.dbt_postgres.postgres__snapshot_string_as_time", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__snapshot_string_as_time", "macro_sql": "{% macro postgres__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp without time zone\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.4677372}, "macro.dbt_postgres.postgres__snapshot_get_time": {"unique_id": "macro.dbt_postgres.postgres__snapshot_get_time", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__snapshot_get_time", "macro_sql": "{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.467841}, "macro.dbt_postgres.postgres__make_temp_relation": {"unique_id": "macro.dbt_postgres.postgres__make_temp_relation", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__make_temp_relation", "macro_sql": "{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% set dtstring = dt.strftime(\"%H%M%S%f\") %}\n    {% set suffix_length = suffix|length + dtstring|length %}\n    {% set relation_max_name_length = 63 %}\n    {% if suffix_length > relation_max_name_length %}\n        {% do exceptions.raise_compiler_error('Temp relation suffix is too long (' ~ suffix|length ~ ' characters). Maximum length is ' ~ (relation_max_name_length - dtstring|length) ~ ' characters.') %}\n    {% endif %}\n    {% set tmp_identifier = base_relation.identifier[:relation_max_name_length - suffix_length] ~ suffix ~ dtstring %}\n    {% do return(base_relation.incorporate(\n                                  path={\n                                    \"identifier\": tmp_identifier,\n                                    \"schema\": none,\n                                    \"database\": none\n                                  })) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.468708}, "macro.dbt_postgres.postgres_escape_comment": {"unique_id": "macro.dbt_postgres.postgres_escape_comment", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres_escape_comment", "macro_sql": "{% macro postgres_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.4691489}, "macro.dbt_postgres.postgres__alter_relation_comment": {"unique_id": "macro.dbt_postgres.postgres__alter_relation_comment", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__alter_relation_comment", "macro_sql": "{% macro postgres__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = postgres_escape_comment(comment) %}\n  comment on {{ relation.type }} {{ relation }} is {{ escaped_comment }};\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.4693792}, "macro.dbt_postgres.postgres__alter_column_comment": {"unique_id": "macro.dbt_postgres.postgres__alter_column_comment", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__alter_column_comment", "macro_sql": "{% macro postgres__alter_column_comment(relation, column_dict) %}\n  {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n  {% for column_name in column_dict if (column_name in existing_columns) %}\n    {% set comment = column_dict[column_name]['description'] %}\n    {% set escaped_comment = postgres_escape_comment(comment) %}\n    comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is {{ escaped_comment }};\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.4699972}, "macro.dbt_postgres.postgres__snapshot_merge_sql": {"unique_id": "macro.dbt_postgres.postgres__snapshot_merge_sql", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/materializations/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot_merge.sql", "name": "postgres__snapshot_merge_sql", "macro_sql": "{% macro postgres__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }}\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = {{ target }}.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      and {{ target }}.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.470783}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.471947}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.472149}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.4722939}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.472438}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.4725811}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.473015}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.473398}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.473711}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.474208}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.474486}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.477898}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.478071}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.478299}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.478445}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.478545}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.4792871}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.479454}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.479625}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.4806411}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    \n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} as snapshot_start\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = config.get('updated_at', snapshot_string_as_time(now)) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.run_query", "macro.dbt.snapshot_string_as_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.482634}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.485926}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.486217}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.486389}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.486476}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.486688}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select \n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n    \n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n    \n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.4875882}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.4877849}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.4880419}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.4884841}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_schema", "macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.494615}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n    \n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n    \n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n    \n    {% do relations.append(target_relation) %}\n  \n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n    \n    {{ adapter.commit() }}\n  \n  {% else %}\n\n      {% set main_sql = sql %}\n  \n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n  \n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.496802}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.497333}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.4976482}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.49808}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.498473}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n    \n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.499352}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n   \n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n  \n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.49992}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n  \n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }} \n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.500553}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.5035121}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% set unique_key_match %}\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n        {% endset %}\n        {% do predicates.append(unique_key_match) %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.5047119}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.504957}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.505395}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.505665}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.506321}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.507031}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(target_relation) %}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n  {% set backup_identifier = model['name'] + \"__dbt_backup\" %}\n\n  -- the intermediate_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {% set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                  schema=schema,\n                                                                  database=database) %}                                               \n  {% set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                            schema=schema,\n                                                            database=database) %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {# -- first check whether we want to full refresh for source view or config reasons #}\n  {% set trigger_full_refresh = (full_refresh_mode or existing_relation.is_view) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n{% elif trigger_full_refresh %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n      {% set backup_identifier = model['name'] + '__dbt_backup' %}\n      {% set intermediate_relation = existing_relation.incorporate(path={\"identifier\": tmp_identifier}) %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n\n      {% set build_sql = create_table_as(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns) %}\n  \n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %} \n      {% do adapter.rename_relation(target_relation, backup_relation) %} \n      {% do adapter.rename_relation(intermediate_relation, target_relation) %} \n  {% endif %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.get_delete_insert_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.5120692}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n   \n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n     \n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n     \n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n   \n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.5171058}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n  \n  {% set schema_changed = False %}\n  \n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n  \n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.518372}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n  \n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n  \n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n  \n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %} \n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n  \n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(schema_change_message) %}\n  \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.5196228}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n    \n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n    \n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n      \n      {% if schema_changes_dict['schema_changed'] %}\n    \n        {% if on_schema_change == 'fail' %}\n        \n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways: \n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n          \n          {% do exceptions.raise_compiler_error(fail_msg) %}\n        \n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n          \n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n        \n        {% endif %}\n      \n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n    \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.520374}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.5242329}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.5247319}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.5249221}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.525134}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  \n  {{ sql_header if sql_header is not none }}\n  \n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.525562}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_view_as", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.529257}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.5296252}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.529854}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.531134}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.531553}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.5317252}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.531915}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.532183}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.535137}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.5393422}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.540284}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.540529}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.5410292}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.541177}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.5412931}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.5414588}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.541573}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.54207}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.542319}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.543589}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.544039}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.5442739}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.5448582}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.5451279}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.545424}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.545884}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.546141}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.546557}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\nselect *\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.546793}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.5470989}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.547724}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.548925}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.549522}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.549825}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.5516732}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.552979}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.553757}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.553998}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.554442}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.5546272}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.554795}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.55498}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.555498}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.555635}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.555799}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.556213}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.557923}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.5582368}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.5584252}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.5586472}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.558887}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.55909}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.5593112}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.559608}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.559871}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.5605319}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.5607748}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.560985}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.redshift__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.561557}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.561708}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.5619462}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.5623932}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.5631528}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.563329}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.563543}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.563713}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.5639958}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.564501}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.5660422}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.566313}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.566504}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.566659}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.5668411}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.5670981}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.567307}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.567821}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.5680141}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.568177}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.569996}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.570177}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.5705101}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.570702}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.5710561}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.571294}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.571913}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_redshift.redshift__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.5721998}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  \n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n  \n  {% set sql -%}\n     \n     alter {{ relation.type }} {{ relation }}\n       \n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n            \n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n  \n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.573009}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.573587}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.573824}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.574122}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.57441}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.5747252}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.574801}, "macro.dbt_utils.bigquery__except": {"unique_id": "macro.dbt_utils.bigquery__except", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.574872}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.575268}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.575435}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.575746}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.592957}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.redshift__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.593848}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.59393}, "macro.dbt_utils.redshift__type_string": {"unique_id": "macro.dbt_utils.redshift__type_string", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "redshift__type_string", "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.594005}, "macro.dbt_utils.postgres__type_string": {"unique_id": "macro.dbt_utils.postgres__type_string", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_string", "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.594078}, "macro.dbt_utils.snowflake__type_string": {"unique_id": "macro.dbt_utils.snowflake__type_string", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_string", "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.594147}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.594312}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.594385}, "macro.dbt_utils.postgres__type_timestamp": {"unique_id": "macro.dbt_utils.postgres__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() %}\n    timestamp without time zone\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.594456}, "macro.dbt_utils.snowflake__type_timestamp": {"unique_id": "macro.dbt_utils.snowflake__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.594524}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.594688}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.594759}, "macro.dbt_utils.bigquery__type_float": {"unique_id": "macro.dbt_utils.bigquery__type_float", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_float", "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.594829}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.594989}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.595061}, "macro.dbt_utils.bigquery__type_numeric": {"unique_id": "macro.dbt_utils.bigquery__type_numeric", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_numeric", "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.5951302}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.595289}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.595417}, "macro.dbt_utils.bigquery__type_bigint": {"unique_id": "macro.dbt_utils.bigquery__type_bigint", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_bigint", "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.595486}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.595649}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.595721}, "macro.dbt_utils.bigquery__type_int": {"unique_id": "macro.dbt_utils.bigquery__type_int", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_int", "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.595791}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_relation.sql", "original_file_path": "macros/cross_db_utils/_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.596342}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.redshift__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.596716}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.5968251}, "macro.dbt_utils.redshift__length": {"unique_id": "macro.dbt_utils.redshift__length", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.596925}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.redshift__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.597545}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.5977159}, "macro.dbt_utils.bigquery__dateadd": {"unique_id": "macro.dbt_utils.bigquery__dateadd", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.597881}, "macro.dbt_utils.postgres__dateadd": {"unique_id": "macro.dbt_utils.postgres__dateadd", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.598042}, "macro.dbt_utils.redshift__dateadd": {"unique_id": "macro.dbt_utils.redshift__dateadd", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "redshift__dateadd", "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ return(dbt_utils.default__dateadd(datepart, interval, from_date_or_timestamp)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.5982442}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.5985558}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.598633}, "macro.dbt_utils.bigquery__intersect": {"unique_id": "macro.dbt_utils.bigquery__intersect", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.598704}, "macro.dbt_utils.escape_single_quotes": {"unique_id": "macro.dbt_utils.escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.599093}, "macro.dbt_utils.default__escape_single_quotes": {"unique_id": "macro.dbt_utils.default__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.5992372}, "macro.dbt_utils.snowflake__escape_single_quotes": {"unique_id": "macro.dbt_utils.snowflake__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.59938}, "macro.dbt_utils.bigquery__escape_single_quotes": {"unique_id": "macro.dbt_utils.bigquery__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.599521}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.600178}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.6003149}, "macro.dbt_utils.bigquery__right": {"unique_id": "macro.dbt_utils.bigquery__right", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.600472}, "macro.dbt_utils.snowflake__right": {"unique_id": "macro.dbt_utils.snowflake__right", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.600627}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.redshift__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.603345}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.60351}, "macro.dbt_utils.bigquery__datediff": {"unique_id": "macro.dbt_utils.bigquery__datediff", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.6036701}, "macro.dbt_utils.postgres__datediff": {"unique_id": "macro.dbt_utils.postgres__datediff", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.605448}, "macro.dbt_utils.redshift__datediff": {"unique_id": "macro.dbt_utils.redshift__datediff", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "redshift__datediff", "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) %}\n\n    {{ return(dbt_utils.default__datediff(first_date, second_date, datepart)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.605663}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.6060858}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.60623}, "macro.dbt_utils.snowflake__safe_cast": {"unique_id": "macro.dbt_utils.snowflake__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.606359}, "macro.dbt_utils.bigquery__safe_cast": {"unique_id": "macro.dbt_utils.bigquery__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.606485}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.606842}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.6069849}, "macro.dbt_utils.bigquery__hash": {"unique_id": "macro.dbt_utils.bigquery__hash", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.607117}, "macro.dbt_utils.cast_bool_to_text": {"unique_id": "macro.dbt_utils.cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.redshift__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.607483}, "macro.dbt_utils.default__cast_bool_to_text": {"unique_id": "macro.dbt_utils.default__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.607625}, "macro.dbt_utils.redshift__cast_bool_to_text": {"unique_id": "macro.dbt_utils.redshift__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "redshift__cast_bool_to_text", "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.607757}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__identifier"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.608288}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.608463}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.608564}, "macro.dbt_utils.any_value": {"unique_id": "macro.dbt_utils.any_value", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__any_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.608913}, "macro.dbt_utils.default__any_value": {"unique_id": "macro.dbt_utils.default__any_value", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n    \n    any_value({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.6090188}, "macro.dbt_utils.postgres__any_value": {"unique_id": "macro.dbt_utils.postgres__any_value", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n    {#- /*Postgres doesn't support any_value, so we're using min() to get the same result*/ -#}\n    min({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.6091259}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.609545}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.609686}, "macro.dbt_utils.bigquery__position": {"unique_id": "macro.dbt_utils.bigquery__position", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.609822}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.610132}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.610236}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.redshift__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.610872}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.610991}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.611061}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.6111329}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.redshift__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.6112928}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.611404}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.611558}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.611676}, "macro.dbt_utils.redshift__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.6118069}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.redshift__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.6133811}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.613945}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.614432}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.614629}, "macro.dbt_utils.bool_or": {"unique_id": "macro.dbt_utils.bool_or", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.615044}, "macro.dbt_utils.default__bool_or": {"unique_id": "macro.dbt_utils.default__bool_or", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n    \n    bool_or({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.6151512}, "macro.dbt_utils.snowflake__bool_or": {"unique_id": "macro.dbt_utils.snowflake__bool_or", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n    \n    boolor_agg({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.615253}, "macro.dbt_utils.bigquery__bool_or": {"unique_id": "macro.dbt_utils.bigquery__bool_or", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n    \n    logical_or({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.615353}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.redshift__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.615981}, "macro.dbt_utils.default_last_day": {"unique_id": "macro.dbt_utils.default_last_day", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.616266}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.61642}, "macro.dbt_utils.postgres__last_day": {"unique_id": "macro.dbt_utils.postgres__last_day", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd('month', '3', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc", "macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.616839}, "macro.dbt_utils.redshift__last_day": {"unique_id": "macro.dbt_utils.redshift__last_day", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "redshift__last_day", "macro_sql": "{% macro redshift__last_day(date, datepart) %}\n\n    {{ return(dbt_utils.default__last_day(date, datepart)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.617019}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.617512}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.617683}, "macro.dbt_utils.bigquery__split_part": {"unique_id": "macro.dbt_utils.bigquery__split_part", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.6178648}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.618264}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) %}\n    date_trunc('{{datepart}}', {{date}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.6184}, "macro.dbt_utils.bigquery__date_trunc": {"unique_id": "macro.dbt_utils.bigquery__date_trunc", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) %}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.6185331}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_ephemeral.sql", "original_file_path": "macros/cross_db_utils/_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.619431}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.62539}, "macro.dbt_utils.default__get_period_boundaries": {"unique_id": "macro.dbt_utils.default__get_period_boundaries", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.6260118}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.626349}, "macro.dbt_utils.default__get_period_sql": {"unique_id": "macro.dbt_utils.default__get_period_sql", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.626861}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}}\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n    \n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_utils.get_period_boundaries", "macro.dbt_utils.log_info", "macro.dbt_utils.get_period_sql", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.632142}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.632611}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(\n                    dbt_utils.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.633114}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.6336691}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_utils.position", "macro.dbt_utils.split_part", "macro.dbt_utils.right", "macro.dbt_utils.length", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.634349}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.634741}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.6350799}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.635411}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.635582}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.6359239}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.6361291}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.636446}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.6366222}, "macro.dbt_utils.slugify": {"unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.637161}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/schema_tests/fewer_rows_than.sql", "original_file_path": "macros/schema_tests/fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.637759}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/schema_tests/fewer_rows_than.sql", "original_file_path": "macros/schema_tests/fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.6379972}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/schema_tests/equal_rowcount.sql", "original_file_path": "macros/schema_tests/equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.638447}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/schema_tests/equal_rowcount.sql", "original_file_path": "macros/schema_tests/equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.638762}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/schema_tests/relationships_where.sql", "original_file_path": "macros/schema_tests/relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.639476}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/schema_tests/relationships_where.sql", "original_file_path": "macros/schema_tests/relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.63989}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/schema_tests/recency.sql", "original_file_path": "macros/schema_tests/recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.640356}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/schema_tests/recency.sql", "original_file_path": "macros/schema_tests/recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.640696}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/schema_tests/not_constant.sql", "original_file_path": "macros/schema_tests/not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.641075}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/schema_tests/not_constant.sql", "original_file_path": "macros/schema_tests/not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.6412559}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/schema_tests/accepted_range.sql", "original_file_path": "macros/schema_tests/accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.641922}, "macro.dbt_utils.default__test_accepted_range": {"unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/schema_tests/accepted_range.sql", "original_file_path": "macros/schema_tests/accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.6424162}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/schema_tests/not_accepted_values.sql", "original_file_path": "macros/schema_tests/not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.643017}, "macro.dbt_utils.default__test_not_accepted_values": {"unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/schema_tests/not_accepted_values.sql", "original_file_path": "macros/schema_tests/not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.64342}, "macro.dbt_utils.test_unique_where": {"unique_id": "macro.dbt_utils.test_unique_where", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/schema_tests/test_unique_where.sql", "original_file_path": "macros/schema_tests/test_unique_where.sql", "name": "test_unique_where", "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.643897}, "macro.dbt_utils.default__test_unique_where": {"unique_id": "macro.dbt_utils.default__test_unique_where", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/schema_tests/test_unique_where.sql", "original_file_path": "macros/schema_tests/test_unique_where.sql", "name": "default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.6440718}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/schema_tests/at_least_one.sql", "original_file_path": "macros/schema_tests/at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.644468}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/schema_tests/at_least_one.sql", "original_file_path": "macros/schema_tests/at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.644651}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/schema_tests/unique_combination_of_columns.sql", "original_file_path": "macros/schema_tests/unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.645327}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/schema_tests/unique_combination_of_columns.sql", "original_file_path": "macros/schema_tests/unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.6459908}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/schema_tests/cardinality_equality.sql", "original_file_path": "macros/schema_tests/cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.6465962}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/schema_tests/cardinality_equality.sql", "original_file_path": "macros/schema_tests/cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.646956}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/schema_tests/expression_is_true.sql", "original_file_path": "macros/schema_tests/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.6475048}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/schema_tests/expression_is_true.sql", "original_file_path": "macros/schema_tests/expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.647874}, "macro.dbt_utils.test_not_null_proportion": {"unique_id": "macro.dbt_utils.test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/schema_tests/not_null_proportion.sql", "original_file_path": "macros/schema_tests/not_null_proportion.sql", "name": "test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.648364}, "macro.dbt_utils.default__test_not_null_proportion": {"unique_id": "macro.dbt_utils.default__test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/schema_tests/not_null_proportion.sql", "original_file_path": "macros/schema_tests/not_null_proportion.sql", "name": "default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.6489081}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/schema_tests/sequential_values.sql", "original_file_path": "macros/schema_tests/sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.6496398}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/schema_tests/sequential_values.sql", "original_file_path": "macros/schema_tests/sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})= cast({{ dbt_utils.dateadd(datepart, interval, previous_column_name) }} as {{ dbt_utils.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.650288}, "macro.dbt_utils.test_not_null_where": {"unique_id": "macro.dbt_utils.test_not_null_where", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/schema_tests/test_not_null_where.sql", "original_file_path": "macros/schema_tests/test_not_null_where.sql", "name": "test_not_null_where", "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.650773}, "macro.dbt_utils.default__test_not_null_where": {"unique_id": "macro.dbt_utils.default__test_not_null_where", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/schema_tests/test_not_null_where.sql", "original_file_path": "macros/schema_tests/test_not_null_where.sql", "name": "default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.650949}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/schema_tests/equality.sql", "original_file_path": "macros/schema_tests/equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.651725}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/schema_tests/equality.sql", "original_file_path": "macros/schema_tests/equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.652647}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/schema_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/schema_tests/mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.655794}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/schema_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/schema_tests/mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.657402}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.658164}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.658779}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.659022}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.659402}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.6597838}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.6601448}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.660883}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.661775}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.662664}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.663106}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.6633039}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.6638348}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.6645708}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.6654599}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.66594}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.666239}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.667058}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n\n        {%- endif %}\n    {%- endfor %}\n\n    {%- for col in include_cols %}\n\n        {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' -%} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\n        {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n\n    {%- endfor -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.6683352}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.670161}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt_utils.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.type_string", "macro.dbt_utils.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.672269}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.6746502}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.6775749}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.677948}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.67821}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.6788568}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.679832}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.680286}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.6805818}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.680985}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.681327}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.682952}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.6832352}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                case table_type\n                    when 'BASE TABLE' then 'table'\n                    else lower(table_type)\n                end as table_type\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.6839528}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.684482}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.685524}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none) -%}\n{% if default is none %}\n    {% set default = [] %}\n{% endif %}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return(default) }}\n    {% endif %}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.6871629}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.6882958}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt_utils.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.689188}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.689652}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.6902761}, "macro.dbt_utils.get_table_types_sql": {"unique_id": "macro.dbt_utils.get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.690697}, "macro.dbt_utils.default__get_table_types_sql": {"unique_id": "macro.dbt_utils.default__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.690788}, "macro.dbt_utils.postgres__get_table_types_sql": {"unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.6908731}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.691992}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.6922848}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.692874}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/tsitsim/Documents/TFG_LABS/data-dbt-redshift/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1649755424.6937091}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-redshift/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.redshift.stg_status": ["source.redshift.freshdesk.status"], "model.redshift.stg_tickets": ["source.redshift.freshdesk.tickets"], "model.redshift.stg_conversations": ["source.redshift.freshdesk.conversations"], "model.redshift.stg_groups": ["source.redshift.freshdesk.groups"], "model.redshift.stg_source": ["source.redshift.freshdesk.source"], "model.redshift.stg_satisfaction_ratings": ["source.redshift.freshdesk.satisfactionratings"], "model.redshift.stg_priority": ["source.redshift.freshdesk.priority"], "model.redshift.stg_agents": ["source.redshift.freshdesk.agents"], "model.redshift.stg_ratings_definition": [], "model.redshift.fct_freshdesk_tickets": ["model.redshift.stg_agents", "model.redshift.stg_conversations", "model.redshift.stg_groups", "model.redshift.stg_priority", "model.redshift.stg_source", "model.redshift.stg_status", "model.redshift.stg_tickets", "model.redshift.stg_tickets", "model.redshift.stg_tickets", "model.redshift.stg_tickets"], "model.redshift.fct_freshdesk_ticket_events": ["model.redshift.fct_freshdesk_tickets", "model.redshift.fct_freshdesk_tickets", "model.redshift.fct_freshdesk_tickets", "model.redshift.fct_freshdesk_tickets", "model.redshift.fct_satisfaction_ratings", "model.redshift.stg_tickets"], "model.redshift.fct_satisfaction_ratings": ["model.redshift.stg_agents", "model.redshift.stg_ratings_definition", "model.redshift.stg_ratings_definition", "model.redshift.stg_satisfaction_ratings"], "model.redshift.stg_rtt_costs": ["model.redshift.base_rtt_costs"], "model.redshift.stg_otd_costs": ["model.redshift.base_otd_costs"], "model.redshift.stg_ram_costs": ["model.redshift.base_ram_costs"], "model.redshift.fct_otd_costs": ["model.redshift.stg_otd_costs", "source.redshift.fulfillment.omni_orders_fct_order_item_details"], "model.redshift.fct_rtt_costs": ["model.redshift.stg_rtt_costs", "source.redshift.fulfillment.omni_orders_fct_order_item_details"], "model.redshift.fct_combined_costs": ["model.redshift.fct_otd_costs", "model.redshift.fct_ram_costs", "model.redshift.fct_rtt_costs"], "model.redshift.fct_order_items_with_costs": ["model.redshift.fct_combined_costs", "source.redshift.fulfillment.omni_orders_fct_order_item_details"], "model.redshift.fct_ram_costs": ["model.redshift.stg_ram_costs", "source.redshift.fulfillment.omni_orders_fct_order_item_details"], "model.redshift.base_ram_costs": ["source.redshift.ram.ram_parcel_costs"], "model.redshift.base_rtt_costs": ["source.redshift.one_stock.one_stock_parcel_costs"], "model.redshift.base_otd_costs": ["source.redshift.otd.otd_parcel_costs"], "test.redshift.assert_fulfillment_partner_not_null": ["model.redshift.fct_combined_costs"], "test.redshift.assert_parcel_total_amount_excl_positive": ["model.redshift.fct_combined_costs"], "test.redshift.assert_item_cost_positive": ["model.redshift.fct_combined_costs"], "test.redshift.assert_parcel_weight_positive": ["model.redshift.fct_combined_costs"], "test.redshift.assert_number_of_items_positive": ["model.redshift.fct_combined_costs"], "test.redshift.not_null_fct_combined_costs_fulfillment_partner.ae95c42a3a": ["model.redshift.fct_combined_costs"], "test.redshift.accepted_values_fct_combined_costs_fulfillment_partner__RAM__RTT__OTD.5b1e1e1ccf": ["model.redshift.fct_combined_costs"], "test.redshift.not_null_fct_combined_costs_fulfillment_parcel_id.4c8fa468d9": ["model.redshift.fct_combined_costs"], "source.redshift.freshdesk.agents": [], "source.redshift.freshdesk.groups": [], "source.redshift.freshdesk.tickets": [], "source.redshift.freshdesk.conversations": [], "source.redshift.freshdesk.status": [], "source.redshift.freshdesk.source": [], "source.redshift.freshdesk.priority": [], "source.redshift.freshdesk.satisfactionratings": [], "source.redshift.info.columns": [], "source.redshift.agents.order_summary": [], "source.redshift.otd.otd_parcel_costs": [], "source.redshift.otd.base_otd_costs": [], "source.redshift.ram.ram_parcel_costs": [], "source.redshift.ram.base_ram_costs": [], "source.redshift.one_stock.one_stock_parcel_costs": [], "source.redshift.one_stock.base_rtt_costs": [], "source.redshift.fulfillment.omni_orders_fct_order_item_details": [], "source.redshift.parcel_costs.base_otd_costs": [], "source.redshift.parcel_costs.base_rtt_costs": [], "source.redshift.parcel_costs.base_ram_costs": [], "source.redshift.parcel_costs.otd_parcel_costs": [], "source.redshift.parcel_costs.rtt_parcel_costs": [], "source.redshift.parcel_costs.ram_parcel_costs": []}, "child_map": {"model.redshift.stg_status": ["model.redshift.fct_freshdesk_tickets"], "model.redshift.stg_tickets": ["model.redshift.fct_freshdesk_ticket_events", "model.redshift.fct_freshdesk_tickets", "model.redshift.fct_freshdesk_tickets", "model.redshift.fct_freshdesk_tickets", "model.redshift.fct_freshdesk_tickets"], "model.redshift.stg_conversations": ["model.redshift.fct_freshdesk_tickets"], "model.redshift.stg_groups": ["model.redshift.fct_freshdesk_tickets"], "model.redshift.stg_source": ["model.redshift.fct_freshdesk_tickets"], "model.redshift.stg_satisfaction_ratings": ["model.redshift.fct_satisfaction_ratings"], "model.redshift.stg_priority": ["model.redshift.fct_freshdesk_tickets"], "model.redshift.stg_agents": ["model.redshift.fct_freshdesk_tickets", "model.redshift.fct_satisfaction_ratings"], "model.redshift.stg_ratings_definition": ["model.redshift.fct_satisfaction_ratings", "model.redshift.fct_satisfaction_ratings"], "model.redshift.fct_freshdesk_tickets": ["model.redshift.fct_freshdesk_ticket_events", "model.redshift.fct_freshdesk_ticket_events", "model.redshift.fct_freshdesk_ticket_events", "model.redshift.fct_freshdesk_ticket_events"], "model.redshift.fct_freshdesk_ticket_events": [], "model.redshift.fct_satisfaction_ratings": ["model.redshift.fct_freshdesk_ticket_events"], "model.redshift.stg_rtt_costs": ["model.redshift.fct_rtt_costs"], "model.redshift.stg_otd_costs": ["model.redshift.fct_otd_costs"], "model.redshift.stg_ram_costs": ["model.redshift.fct_ram_costs"], "model.redshift.fct_otd_costs": ["model.redshift.fct_combined_costs"], "model.redshift.fct_rtt_costs": ["model.redshift.fct_combined_costs"], "model.redshift.fct_combined_costs": ["model.redshift.fct_order_items_with_costs", "test.redshift.accepted_values_fct_combined_costs_fulfillment_partner__RAM__RTT__OTD.5b1e1e1ccf", "test.redshift.assert_fulfillment_partner_not_null", "test.redshift.assert_item_cost_positive", "test.redshift.assert_number_of_items_positive", "test.redshift.assert_parcel_total_amount_excl_positive", "test.redshift.assert_parcel_weight_positive", "test.redshift.not_null_fct_combined_costs_fulfillment_parcel_id.4c8fa468d9", "test.redshift.not_null_fct_combined_costs_fulfillment_partner.ae95c42a3a"], "model.redshift.fct_order_items_with_costs": [], "model.redshift.fct_ram_costs": ["model.redshift.fct_combined_costs"], "model.redshift.base_ram_costs": ["model.redshift.stg_ram_costs"], "model.redshift.base_rtt_costs": ["model.redshift.stg_rtt_costs"], "model.redshift.base_otd_costs": ["model.redshift.stg_otd_costs"], "test.redshift.assert_fulfillment_partner_not_null": [], "test.redshift.assert_parcel_total_amount_excl_positive": [], "test.redshift.assert_item_cost_positive": [], "test.redshift.assert_parcel_weight_positive": [], "test.redshift.assert_number_of_items_positive": [], "test.redshift.not_null_fct_combined_costs_fulfillment_partner.ae95c42a3a": [], "test.redshift.accepted_values_fct_combined_costs_fulfillment_partner__RAM__RTT__OTD.5b1e1e1ccf": [], "test.redshift.not_null_fct_combined_costs_fulfillment_parcel_id.4c8fa468d9": [], "source.redshift.freshdesk.agents": ["model.redshift.stg_agents"], "source.redshift.freshdesk.groups": ["model.redshift.stg_groups"], "source.redshift.freshdesk.tickets": ["model.redshift.stg_tickets"], "source.redshift.freshdesk.conversations": ["model.redshift.stg_conversations"], "source.redshift.freshdesk.status": ["model.redshift.stg_status"], "source.redshift.freshdesk.source": ["model.redshift.stg_source"], "source.redshift.freshdesk.priority": ["model.redshift.stg_priority"], "source.redshift.freshdesk.satisfactionratings": ["model.redshift.stg_satisfaction_ratings"], "source.redshift.info.columns": [], "source.redshift.agents.order_summary": [], "source.redshift.otd.otd_parcel_costs": ["model.redshift.base_otd_costs"], "source.redshift.otd.base_otd_costs": [], "source.redshift.ram.ram_parcel_costs": ["model.redshift.base_ram_costs"], "source.redshift.ram.base_ram_costs": [], "source.redshift.one_stock.one_stock_parcel_costs": ["model.redshift.base_rtt_costs"], "source.redshift.one_stock.base_rtt_costs": [], "source.redshift.fulfillment.omni_orders_fct_order_item_details": ["model.redshift.fct_order_items_with_costs", "model.redshift.fct_otd_costs", "model.redshift.fct_ram_costs", "model.redshift.fct_rtt_costs"], "source.redshift.parcel_costs.base_otd_costs": [], "source.redshift.parcel_costs.base_rtt_costs": [], "source.redshift.parcel_costs.base_ram_costs": [], "source.redshift.parcel_costs.otd_parcel_costs": [], "source.redshift.parcel_costs.rtt_parcel_costs": [], "source.redshift.parcel_costs.ram_parcel_costs": []}}